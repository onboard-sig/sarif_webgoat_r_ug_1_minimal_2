{"$schema":"https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json","runs":[{"tool":{"driver":{"name":"Black Duck (Rapid)","organization":"Synopsys","rules":[{"id":"CVE-2022-36033 jsoup 1.11.3: org.jsoup","shortDescription":{"text":"Direct Dependency: jsoup 1.11.3 (CVE-2022-36033 BDSA-2022-2382)"},"fullDescription":{"text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jsoup 1.11.3  | 1.16.2  | 1.16.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=569305f9-4010-446b-a215-28c735bfeb48)\n\n\n## Description\nJsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2382](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2382)([CVE-2022-36033](https://nvd.nist.gov/vuln/detail/CVE-2022-36033)) - Jsoup Vulnerable to Cross-Site Scripting (XSS) via Incorrect Sanitization of 'javascript:' URL expressions\n\n\n## Solution\nFixed in version [**1.15.3**](https://github.com/jhy/jsoup/releases/tag/jsoup-1.15.3) by [this](https://github.com/jhy/jsoup/commit/4ea768d96b3d232e63edef9594766d44597b3882) commit.\n\nThe latest stable releases can be found [here](https://github.com/jhy/jsoup/releases).\n\n## Workaround\nThe vendor recommends users to:\n* Disable `SafeList.preserveRelativeLinks` option, which will rewrite input URLs as absolute URLs.\n* Ensure an appropriate Content Security Policy is defined.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html)\n\n","text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-37714 jsoup 1.11.3: org.jsoup","shortDescription":{"text":"Direct Dependency: jsoup 1.11.3 (CVE-2021-37714 BDSA-2021-2510)"},"fullDescription":{"text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jsoup 1.11.3  | 1.16.2  | 1.16.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=569305f9-4010-446b-a215-28c735bfeb48)\n\n\n## Description\njsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2510](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2510)([CVE-2021-37714](https://nvd.nist.gov/vuln/detail/CVE-2021-37714)) - jsoup Vulnerable to Denial-of-Service (DoS) via Improper HTML and XML Parsing\n\n\n## Solution\nFixed in version [**1.14.2**](https://github.com/jhy/jsoup/releases/tag/jsoup-1.14.2).\n\nThe latest stable releases can be found [here](https://github.com/jhy/jsoup/releases).\n\n## Workaround\nThe vendor has provided the following workaround:\n\n\u003e Users may rate limit input parsing. Users should limit the size of inputs based on system resources. Users should implement thread watchdogs to cap and timeout parse runtimes.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html)\nCommon Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html)\n\n","text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-229","external/cwe/cwe-248"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-17521 groovy-json 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","shortDescription":{"text":"Transitive Dependency: groovy-json 2.5.8 from rest-assured 3.3.0 (CVE-2020-17521 BDSA-2020-3660)"},"fullDescription":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| rest-assured 3.3.0  | Not available  | 5.3.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| groovy-json 2.5.8  | 2.5.23  | 3.0.19 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=31daed92-9910-4355-b11a-c60c8bd5da60)\n\n\n## Description\nApache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3660](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3660)([CVE-2020-17521](https://nvd.nist.gov/vuln/detail/CVE-2020-17521)) - Apache Groovy Vulnerable to Privilege Escalation and Information Exposure via Insecure 'createTempDir' Method\n\n\n## Solution\nFixed in:\n* [**2.4.21**](https://github.com/apache/groovy/releases/tag/GROOVY_2_4_21) by [this](https://github.com/apache/groovy/commit/4e418d4a34c973a7ec1e822552103043ac13780e) commit,\n* [**2.5.14**](https://github.com/apache/groovy/releases/tag/GROOVY_2_5_14) by [this](https://github.com/apache/groovy/commit/98dc5d713926cd81b006c510a1546ccd520fe17f) commit,\n* [**3.0.7**](https://github.com/apache/groovy/releases/tag/GROOVY_3_0_7) by [this](https://github.com/apache/groovy/commit/f069c35c4bbaf68547c76381509d59840a7ed32d) commit,\n* [**4.0.0-alpha-2**](https://github.com/apache/groovy/releases/tag/GROOVY_4_0_0_ALPHA_2) by [this](https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28) commit.\n\nNote: the vendor states that the fix for **2.4**, when Groovy is running on a pre-JDK7 version of the JDK, eliminates the risk of privilege escalation but still leaves the potential for sensitive information leakage. The vendor recommends applying the following mitigation for **2.4**/pre-JDK7 users:\n\u003e Set the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-integration-tests:v8.1.0:-maven\n    - io.rest-assured:rest-assured:3.3.0\n        - io.rest-assured:json-path:3.3.0\n            - org.codehaus.groovy:groovy-json:2.5.8\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-27568 json-smart 2.3: spring-boot-starter-test 2.2.2.RELEASE: net.minidev","shortDescription":{"text":"Transitive Dependency: json-smart 2.3 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2021-27568 BDSA-2021-0939)"},"fullDescription":{"text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json-smart 2.3  | 2.5.0  | 2.5.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e28e3938-cef3-4054-b4dc-d47c2f9cc80d)\n\n\n## Description\nA vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0939](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0939)([CVE-2021-27568](https://nvd.nist.gov/vuln/detail/CVE-2021-27568)) - netplex json-smart V1 and V2 Vulnerable to Denial-of-Service (DoS) and Sensitive Data Exposure via Uncaught Exception in Parser\n\n\n## Solution\nFixed in:\n* **json-smart-v1** version [**1.3.2**](https://github.com/netplex/json-smart-v1/releases/tag/1.3.2) by [this](https://github.com/netplex/json-smart-v1/commit/768db58ee0e3e344fcdb574b7629765308a1d0af) commit.\n* **json-smart-v2** version **2.3.1** by [this](https://github.com/netplex/json-smart-v2/commit/b3d52aa168e5a474c70a8e9ec69f823c2e7216ca) commit.\n* **json-smart-v2** version [**2.4.1**](https://github.com/netplex/json-smart-v2/releases/tag/2.4.1) by [this](https://github.com/netplex/json-smart-v2/commit/550411600d5e60e372618fa7c90c8bd82f954e67) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - com.jayway.jsonpath:json-path:2.4.0\n            - net.minidev:json-smart:2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-1370 json-smart 2.3: spring-boot-starter-test 2.2.2.RELEASE: net.minidev","shortDescription":{"text":"Transitive Dependency: json-smart 2.3 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-1370 BDSA-2023-0616)"},"fullDescription":{"text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| json-smart 2.3  | 2.5.0  | 2.5.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e28e3938-cef3-4054-b4dc-d47c2f9cc80d)\n\n\n## Description\njson-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0616](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0616)([CVE-2023-1370](https://nvd.nist.gov/vuln/detail/CVE-2023-1370)) - json-smart Vulnerable to Denial-of-Service (DoS) via Missing Object Nesting Limits\n\n\n## Solution\nFixed in version [**2.4.9**](https://github.com/netplex/json-smart-v2/releases/tag/2.4.9) by [this](https://github.com/netplex/json-smart-v2/commit/5b3205d051952d3100aa0db1535f6ba6226bd87a) commit.\n\nThe latest stable releases can be found [here](https://github.com/netplex/json-smart-v2/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - com.jayway.jsonpath:json-path:2.4.0\n            - net.minidev:json-smart:2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-beans 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-beans 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=12bbff3f-d882-4ec4-bf5c-fc6fbe1eec09)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-beans:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-27216 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-server 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-server 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cd63d951-d282-4827-86fd-e756b2a13f72)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-15250 junit 4.12: junit","shortDescription":{"text":"Direct Dependency: junit 4.12 (CVE-2020-15250 BDSA-2020-2739)"},"fullDescription":{"text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| junit 4.12  | 4.13.2  | 4.13.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=febd4a6e-c3d0-430b-b455-d912074f7a59)\n\n\n## Description\nJUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2739](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2739)([CVE-2020-15250](https://nvd.nist.gov/vuln/detail/CVE-2020-15250)) - JUnit4 Vulnerable to Information Disclosure via 'TemporaryFolder' Directory\n\n\n## Solution\nFixed in [**4.13.1**](https://github.com/junit-team/junit4/releases/tag/r4.13.1) by [this](https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae) commit.\n\nThe latest stable releases are available [here](https://github.com/junit-team/junit4/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n\n","text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-webapp 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-webapp 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=21245ecf-0949-466f-8ac0-cab2aa568d16)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-27216 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-security 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-security 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=039d67c0-7e31-4955-ba23-93b868aceb11)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-security:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3731 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-jdbc 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-jdbc 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=212f9f2b-4625-4839-bc54-51063f5849c1)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-aop 2.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-aop 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97d5235-0ff3-4dd1-9cf6-0d5f83a8ea52)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-aop:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-9116 wiremock 2.8.0: com.github.tomakehurst","shortDescription":{"text":"Direct Dependency: wiremock 2.8.0 (CVE-2018-9116 BDSA-2018-0914)"},"fullDescription":{"text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | 2.27.2  | 3.0.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfb11188-8550-4580-8437-9065e8c5e60e)\n\n\n## Description\nWiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-0914](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-0914)([CVE-2018-9116](https://nvd.nist.gov/vuln/detail/CVE-2018-9116)) - Wiremock Vulnerable to XML External Entity (XXE) Injection via Weak XML Parsing\n\n\n## Solution\nFixed in [**2.16.0**](https://github.com/tomakehurst/wiremock/releases/tag/2.16.0) by these commits:\n\n* [Commit 1](https://github.com/tomakehurst/wiremock/commit/4c6dfde82a5ee91c5f47bf353f5099d11692db39)\n* [Commit 2](https://github.com/tomakehurst/wiremock/commit/ea18dab0082b858d3efac005c7185e6f8d08d19c)\n* [Commit 3](https://github.com/tomakehurst/wiremock/commit/d36516bb76b3b7b8fb84fe2254fc2597b3fce11c)\n\nThe latest stable releases can be found [here](https://github.com/wiremock/wiremock/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\n\n","text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-41327 wiremock 2.8.0: com.github.tomakehurst","shortDescription":{"text":"Direct Dependency: wiremock 2.8.0 (CVE-2023-41327 BDSA-2023-2379)"},"fullDescription":{"text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | 2.27.2  | 3.0.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfb11188-8550-4580-8437-9065e8c5e60e)\n\n\n## Description\nWireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2379](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2379)([CVE-2023-41327](https://nvd.nist.gov/vuln/detail/CVE-2023-41327)) - WireMock Vulnerable to Server-Side Request Forgery (SSRF) via 'Webhooks.java' File\n\n\n## Solution\nFixed in [**2.35.1**](https://github.com/tomakehurst/wiremock/releases/tag/2.35.1) by [this](https://github.com/tomakehurst/wiremock/commit/90a37e10) commit and in [**3.0.3**](https://github.com/tomakehurst/wiremock/releases/tag/3.0.3) by [this](https://github.com/tomakehurst/wiremock/commit/92d77937) commit.\n\nThe latest stable releases can be found [here](https://github.com/wiremock/wiremock/releases).\n\n## Workaround\nThe vendor has stated the following as a workaround for this issue:\n \u003e Use external firewall rules to define the list of permitted destinations.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-9117 wiremock 2.8.0: com.github.tomakehurst","shortDescription":{"text":"Direct Dependency: wiremock 2.8.0 (CVE-2018-9117 BDSA-2018-0930)"},"fullDescription":{"text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | 2.27.2  | 3.0.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfb11188-8550-4580-8437-9065e8c5e60e)\n\n\n## Description\nWireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2018-0930](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-0930)([CVE-2018-9117](https://nvd.nist.gov/vuln/detail/CVE-2018-9117)) - WireMock Vulnerable to Local File Access via Absolute Path Traversal\n\n\n## Solution\nFixed in version [**2.16.0**](https://github.com/tomakehurst/wiremock/releases/tag/2.16.0) by [this](https://github.com/tomakehurst/wiremock/commit/831aec84b553fa10927f6df6ddaf03701c35b13c) commit.\n\nThe latest stable releases can be found [here](https://github.com/wiremock/wiremock/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-36](https://cwe.mitre.org/data/definitions/36.html)\n\n","text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-36"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-41329 wiremock 2.8.0: com.github.tomakehurst","shortDescription":{"text":"Direct Dependency: wiremock 2.8.0 (CVE-2023-41329 BDSA-2023-2375)"},"fullDescription":{"text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | 2.27.2  | 3.0.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfb11188-8550-4580-8437-9065e8c5e60e)\n\n\n## Description\nWireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2375](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2375)([CVE-2023-41329](https://nvd.nist.gov/vuln/detail/CVE-2023-41329)) - WireMock Vulnerable to Domain Restriction Bypass via DNS Rebinding in 'NetworkAddressRules.java' File\n\n\n## Solution\nFixed in [**2.35.1**](https://github.com/wiremock/wiremock/releases/tag/2.35.1) by [this](https://github.com/wiremock/wiremock/commit/20adc25d) commit and in [**3.0.3**](https://github.com/tomakehurst/wiremock/releases/tag/3.0.3) by [this](https://github.com/tomakehurst/wiremock/commit/0f72091c) commit.\n\nThe latest stable releases can be found [here](https://github.com/wiremock/wiremock/releases).\n\n## Workaround\nThe vendor has supplied the following workaround for this issue:\n\u003e * **Option 1**: Configure WireMock to use IP addresses instead of the domain names in the outbound URLs subject to DNS rebinding.\n\u003e * **Option 2**: Use external firewall rules to define the list of permitted destinations.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-350](https://cwe.mitre.org/data/definitions/350.html)\n\n","text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-350"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3731 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-autoconfigure 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-autoconfigure 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3584a963-9596-45fe-88dd-ca14672dd376)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-autoconfigure:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-web 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-web 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=3bc09f28-42dc-47e1-a380-296f866d4c8f)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-web:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2022-3109 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3109](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3109) - Spring Security Vulnerable to Privilege Escalation via Specially Crafted Request Causing OAuth2 Server Access Token Response With Empty Scope List\n\n\n\n## Solution\nFixed in versions [**5.7.5**](https://github.com/spring-projects/spring-security/releases/tag/5.7.5) and [**5.6.9**](https://github.com/spring-projects/spring-security/releases/tag/5.6.9) by [this](https://github.com/spring-projects/spring-security/commit/75004587a419a96d18909030b20c6b16b226ecbe) commit..\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-security/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1369](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1369)([CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)) - Spring Security Vulnerable to Authorization Bypass via Improper Request Validation in 'RegexRequestMatcher' Class\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2023-1825 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-1825](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1825) - Spring Security Vulnerable to Security Mechanism Bypass in Spring WebFlux via Un-Prefixed Double Wildcard Pattern\n\n\n\n## Solution\nFixed in versions:\n- [**5.6.12**](https://github.com/spring-projects/spring-security/releases/tag/5.6.12) by [this](https://github.com/spring-projects/spring-security/commit/7813a9ba26e53fe54e4d2ec6eb076126e8550780) commit,\n- [**5.7.10**](https://github.com/spring-projects/spring-security/releases/tag/5.7.10) by [this](https://github.com/spring-projects/spring-security/commit/fe9bc26bdcfea2a40c93e3db98e649bfb0edaab2) commit,\n- [**5.8.5**](https://github.com/spring-projects/spring-security/releases/tag/5.8.5) by [this](https://github.com/spring-projects/spring-security/commit/a939f17890a9415604ecf81bc236d3e969e2d9b4) commit,\n- [**6.0.5**](https://github.com/spring-projects/spring-security/releases/tag/6.0.5) by [this](https://github.com/spring-projects/spring-security/commit/cbef118026e38005109158dd35e79038af2bb913) commit,\n- [**6.1.2**](https://github.com/spring-projects/spring-security/releases/tag/6.1.2) by [this](https://github.com/spring-projects/spring-security/commit/aaa31312bd74c637ce9549ed68cab33214008bf5) commit.\n\nThe above fixed versions require Spring Framework versions:\n- [**5.2.25**](https://github.com/spring-projects/spring-framework/releases/tag/5.2.25),\n- [**5.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/5.3.29),\n- [**6.0.11**](https://github.com/spring-projects/spring-framework/releases/tag/6.0.11).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5407 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1092](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1092)([CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)) - Spring Security Vulnerable to Authentication Abuse via Signature Wrapping Attacks with SAML Responses\n\n\n## Solution\nFixed in **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/0db9cd075d621118cdff303f402d25425ec81bbc) commit and **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/69b1bc62ffe7c1e1bbf508951efa1e0235954198) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1094](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1094)([CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)) - Spring Security Vulnerable to Information Exposure via Insecure Text Encryptor\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-security/commit/db155b30941536e6c33408a20f62e790b2c78a97) commit in:\n* **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)**\n* **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)**\n* **[5.1.10](https://github.com/spring-projects/spring-security/releases/tag/5.1.10.RELEASE)**\n* **[5.0.16](https://github.com/spring-projects/spring-security/releases/tag/5.0.16.RELEASE)**\n* **[4.2.16](https://github.com/spring-projects/spring-security/releases/tag/4.2.16.RELEASE)**\n\n## Workaround\nIf upgrading to a fixed version cannot be performed immediately, users should discontinue use of the function `Encryptors#queryableText(CharSequence, CharSequence)` and look to their data store for a secure mechanism to query encrypted data.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html)\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-329"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2310](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2310)([CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)) - Spring Security Vulnerable to Denial-of-Service (DoS) via Uncontrolled Resource Consumption in Authorization Request Functionality\n\n\n## Solution\nFixed in:\n* **[5.5.1](https://github.com/spring-projects/spring-security/releases/tag/5.5.1)**\n* **[5.4.7](https://github.com/spring-projects/spring-security/releases/tag/5.4.7)**\n* **[5.3.10](https://github.com/spring-projects/spring-security/releases/tag/5.3.10.RELEASE)**\n* **[5.2.11](https://github.com/spring-projects/spring-security/releases/tag/5.2.11.RELEASE)**\n\nThe latest stable releases are also available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1370](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1370)([CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)) - Spring Security Vulnerable to Weakened Bcrypt Hashing via Integer Overflow in 'BCryptPasswordEncoder' Component\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n## Workaround\nThe vendor has stated [here](https://tanzu.vmware.com/security/cve-2022-22976) that the following workaround can be implemented:\n\n\u003e Update your BCryptPasswordEncoder to use a lower number of rounds.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-config 5.2.1.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-config 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bdebb9fe-25a1-47ed-9748-01ee19a54a38)\n\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0417](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0417)([CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)) - Spring Security Vulnerable to Privilege Escalation via 'SecurityContext' State Mishandling\n\n\n## Solution\nFixed in:\n* [**5.4.4**](https://github.com/spring-projects/spring-security/releases/tag/5.4.4) by [this](https://github.com/spring-projects/spring-security/commit/c72a6fac04853912a4b7caad5f0500f2aace5a79) commit.\n* [**5.3.8**](https://github.com/spring-projects/spring-security/releases/tag/5.3.8.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/9a49a8695fd7fd6ab5e8d31ba1fae00dead1f643) commit.\n* [**5.2.9**](https://github.com/spring-projects/spring-security/releases/tag/5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/7cab7b06c51ea885dd0d07ff26b135dd3afce1d1) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework.security:spring-security-config:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html)\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-context 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-context 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=62bb8b29-3816-41a9-9ef1-5bcee56eeb39)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n            - org.springframework:spring-context:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3731 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5befaa95-e954-4537-86c1-b51930309dfa)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-thymeleaf 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a58dead6-d420-4218-80d8-6b38fb717946)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-17521 groovy-xml 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","shortDescription":{"text":"Transitive Dependency: groovy-xml 2.5.8 from rest-assured 3.3.0 (CVE-2020-17521 BDSA-2020-3660)"},"fullDescription":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| rest-assured 3.3.0  | Not available  | 5.3.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| groovy-xml 2.5.8  | 2.5.23  | 3.0.19 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6118b60e-9fd1-4604-bb8d-448f82212dfb)\n\n\n## Description\nApache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3660](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3660)([CVE-2020-17521](https://nvd.nist.gov/vuln/detail/CVE-2020-17521)) - Apache Groovy Vulnerable to Privilege Escalation and Information Exposure via Insecure 'createTempDir' Method\n\n\n## Solution\nFixed in:\n* [**2.4.21**](https://github.com/apache/groovy/releases/tag/GROOVY_2_4_21) by [this](https://github.com/apache/groovy/commit/4e418d4a34c973a7ec1e822552103043ac13780e) commit,\n* [**2.5.14**](https://github.com/apache/groovy/releases/tag/GROOVY_2_5_14) by [this](https://github.com/apache/groovy/commit/98dc5d713926cd81b006c510a1546ccd520fe17f) commit,\n* [**3.0.7**](https://github.com/apache/groovy/releases/tag/GROOVY_3_0_7) by [this](https://github.com/apache/groovy/commit/f069c35c4bbaf68547c76381509d59840a7ed32d) commit,\n* [**4.0.0-alpha-2**](https://github.com/apache/groovy/releases/tag/GROOVY_4_0_0_ALPHA_2) by [this](https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28) commit.\n\nNote: the vendor states that the fix for **2.4**, when Groovy is running on a pre-JDK7 version of the JDK, eliminates the risk of privilege escalation but still leaves the potential for sensitive information leakage. The vendor recommends applying the following mitigation for **2.4**/pre-JDK7 users:\n\u003e Set the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-integration-tests:v8.1.0:-maven\n    - io.rest-assured:rest-assured:3.3.0\n        - org.codehaus.groovy:groovy-xml:2.5.8\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlet 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlet 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8bcf396b-5b93-4896-88a4-23942d104668)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlet:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-2110 jakarta.el 3.0.3: spring-boot-starter-undertow 2.2.2.RELEASE: org.glassfish","shortDescription":{"text":"Transitive Dependency: jakarta.el 3.0.3 from spring-boot-starter-undertow 2.2.2.RELEASE (BDSA-2021-2110)"},"fullDescription":{"text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jakarta.el 3.0.3  | 3.0.4  | 4.0.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=541c144c-9269-4974-bf07-1e03a3ddd277)\n\n\n## Description\nJakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2110](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2110) - Jakarta Expression Language Vulnerable to Remote Code Execution (RCE) via Bug in 'ELParserTokenManager'\n\n\n\n## Solution\nFixed in:\n* [**3.0.4-impl**](https://github.com/eclipse-ee4j/el-ri/releases/tag/3.0.4-impl) by [this](https://github.com/eclipse-ee4j/el-ri/commit/c76b9e6) commit\n* [**4.0.2-impl**](https://github.com/eclipse-ee4j/el-ri/releases/tag/4.0.2-impl) by [this](https://github.com/eclipse-ee4j/el-ri/commit/de73c2b) commit\n* [**5.0.0-M1-RELEASE-api**](https://github.com/eclipse-ee4j/el-ri/releases/tag/5.0.0-M1-RELEASE-api) by [this](https://github.com/eclipse-ee4j/el-ri/commit/fe0c60b) commit\n\n## Workaround\nFixed in [**3.0.3-jbossorg3**](https://github.com/jbossas/el-ri/releases/tag/3.0.3.jbossorg-3) by [this](https://github.com/jbossas/el-ri/commit/cc774521f21606ae256ffa4b293d196aec957042) commit.\n\n**Note:** this fixed release is offered by the maintainers of JBoss products.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - org.glassfish:jakarta.el:3.0.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-146](https://cwe.mitre.org/data/definitions/146.html)\n\n","text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-146"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-25638 hibernate-core 5.4.9.Final: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.hibernate","shortDescription":{"text":"Transitive Dependency: hibernate-core 5.4.9.Final from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-25638 BDSA-2020-3410)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| hibernate-core 5.4.9.Final  | 5.6.15.Final  | 6.3.1.Final |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c950d597-aac8-4b35-bf41-d2cdd412d407)\n\n\n## Description\nHibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-3410](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3410)([CVE-2020-25638](https://nvd.nist.gov/vuln/detail/CVE-2020-25638)) - Hibernate ORM Vulnerable to SQL Injection via Unsafe SQL Debugging Functionality\n\n\n## Solution\nFixed in:\n* [**5.4.24**](https://github.com/hibernate/hibernate-orm/releases/tag/5.4.24) by [this](https://github.com/hibernate/hibernate-orm/commit/36ebf7d3836e83e99f2a91777b5389e1daf1f2b7) commit.\n* [**5.3.20**](https://github.com/hibernate/hibernate-orm/releases/tag/5.3.20) by [this](https://github.com/hibernate/hibernate-orm/commit/d22bbb5c339c9df7712c3365bb1df97c91b35ec5) commit.\n\nThe latest stable releases are available [here](https://hibernate.org/orm/releases/).\n\n## Workaround\nThe vulnerability can be mitigated by using the setting `hibernate.use_sql_comments=false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.hibernate:hibernate-core:5.4.9.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html)\n\n","text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-14900 hibernate-core 5.4.9.Final: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.hibernate","shortDescription":{"text":"Transitive Dependency: hibernate-core 5.4.9.Final from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2019-14900 BDSA-2019-4479)"},"fullDescription":{"text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| hibernate-core 5.4.9.Final  | 5.6.15.Final  | 6.3.1.Final |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c950d597-aac8-4b35-bf41-d2cdd412d407)\n\n\n## Description\nHibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2019-4479](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-4479)([CVE-2019-14900](https://nvd.nist.gov/vuln/detail/CVE-2019-14900)) - Hibernate ORM Vulnerable to SQL Injection (SQLi) via 'SELECT' and 'GROUP BY' Queries in JPA Criteria API\n\n\n## Solution\nFixed in:\n* **[5.3.18](https://github.com/hibernate/hibernate-orm/releases/tag/5.3.18)** by [this](https://github.com/hibernate/hibernate-orm/commit/646b383f959eff18d58081b1a574f0d777d353da) commit,\n* **[5.4.18](https://github.com/hibernate/hibernate-orm/releases/tag/5.4.18)** by [this](https://github.com/hibernate/hibernate-orm/commit/e0e22ea256) commit,\n* **[6.0.0Alpha6](https://github.com/hibernate/hibernate-orm/releases/tag/6.0.0.Alpha6)** by [this](https://github.com/hibernate/hibernate-orm/commit/eebf01fbf3) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.hibernate:hibernate-core:5.4.9.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html)\n\n","text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=14d4000b-5836-462d-b48e-09a08fdcd185)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-25649 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","shortDescription":{"text":"Transitive Dependency: jackson-databind 2.10.1 from wiremock 2.8.0 (CVE-2020-25649 BDSA-2020-2965)"},"fullDescription":{"text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.10.1  | 2.15.3  | 2.15.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6590db80-d251-4b79-ba96-70137d2abf52)\n\n\n## Description\nJackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2965](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2965)([CVE-2020-25649](https://nvd.nist.gov/vuln/detail/CVE-2020-25649)) - Jackson Databind Vulnerable to XML External Entities (XXE) via FasterXML 'DOMDeserializer' Component\n\n\n## Solution\nFixed in: \n* [**2.11.0.rc1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.11.0.rc1) by [this](https://github.com/FasterXML/jackson-databind/commit/612f971b78c60202e9cd75a299050c8f2d724a59) commit.\n* [**2.10.5.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.10.5.1) and [**2.9.10.7**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.9.10.7) by [this](https://github.com/FasterXML/jackson-databind/commit/3d932709abd0b5390efe67451653fc9efa9db677) commit.\n* [**2.6.7.4**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.6.7.4) by [this](https://github.com/FasterXML/jackson-databind/commit/b59b611f82c546c13753421f79103c6f6e584606) commit.\n\nThe latest stable releases are available [here](https://github.com/FasterXML/jackson-databind/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.fasterxml.jackson.core:jackson-databind:2.10.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\n\n","text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-46877 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","shortDescription":{"text":"Transitive Dependency: jackson-databind 2.10.1 from wiremock 2.8.0 (CVE-2021-46877 BDSA-2021-4830)"},"fullDescription":{"text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.10.1  | 2.15.3  | 2.15.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6590db80-d251-4b79-ba96-70137d2abf52)\n\n\n## Description\njackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-4830](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-4830)([CVE-2021-46877](https://nvd.nist.gov/vuln/detail/CVE-2021-46877)) - jackson-databind Vulnerable to Denial-of-Service (DoS) via Excessive Memory Usage Involving JsonNode JDK Serialization\n\n\n## Solution\nFixed in [**2.12.6**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.6) and [**2.13.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.1) by [this](https://github.com/FasterXML/jackson-databind/commit/3ccde7d938fea547e598fdefe9a82cff37fed5cb) commit \n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.fasterxml.jackson.core:jackson-databind:2.10.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-36518 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","shortDescription":{"text":"Transitive Dependency: jackson-databind 2.10.1 from wiremock 2.8.0 (CVE-2020-36518 BDSA-2020-4752)"},"fullDescription":{"text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.10.1  | 2.15.3  | 2.15.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6590db80-d251-4b79-ba96-70137d2abf52)\n\n\n## Description\njackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4752](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4752)([CVE-2020-36518](https://nvd.nist.gov/vuln/detail/CVE-2020-36518)) - jackson-databind Vulnerable to Denial-of-Service (DoS) via Java StackOverflow Exception in 'UntypedObjectDeserializer'\n\n\n## Solution\nFixed in [**2.13.2.2**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.2.2) by [this](https://github.com/FasterXML/jackson-databind/commit/fcfc4998ec23f0b1f7f8a9521c2b317b6c25892b) commit, and in [**2.12.6.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.6.1) by [this](https://github.com/FasterXML/jackson-databind/commit/83b928dab9ba6ef81cf48987fcd12071e1ddb0c9) commit.\n\n**Note**: This was also fixed in [**2.13.2.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.2.1), however, the vendor has stated [here](https://github.com/FasterXML/jackson-databind/issues/2816#issue-678075273) that there is a problem in Gradle Module Metadata declaration. This lead to the release of **2.13.2.2**. If you are not using GMM you can use either update. \n\nThe latest stable releases are available [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.fasterxml.jackson.core:jackson-databind:2.10.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n","text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-674"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-42003 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","shortDescription":{"text":"Transitive Dependency: jackson-databind 2.10.1 from wiremock 2.8.0 (CVE-2022-42003 BDSA-2022-2765)"},"fullDescription":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.10.1  | 2.15.3  | 2.15.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6590db80-d251-4b79-ba96-70137d2abf52)\n\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2765](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2765)([CVE-2022-42003](https://nvd.nist.gov/vuln/detail/CVE-2022-42003)) - Jackson Databind Vulnerable to Denial-of-Service (DoS) via Resource Exhaustion in Primitive Value Deserializers\n\n\n## Solution\nFixed in versions:\n*  [**2.14.0-rc1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.14.0-rc1) by [this](https://github.com/FasterXML/jackson-databind/commit/d78d00ee7b5245b93103fef3187f70543d67ca33) commit,\n*  [**2.13.4.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.4.1) by [this](https://github.com/FasterXML/jackson-databind/commit/2c4a601c626f7790cad9d3c322d244e182838288) commit,\n*  [**2.12.7.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.7.1) by [this](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea) commit.\n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.fasterxml.jackson.core:jackson-databind:2.10.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-42004 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","shortDescription":{"text":"Transitive Dependency: jackson-databind 2.10.1 from wiremock 2.8.0 (CVE-2022-42004 BDSA-2022-2768)"},"fullDescription":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jackson-databind 2.10.1  | 2.15.3  | 2.15.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6590db80-d251-4b79-ba96-70137d2abf52)\n\n\n## Description\nJackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2768](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2768)([CVE-2022-42004](https://nvd.nist.gov/vuln/detail/CVE-2022-42004)) - Jackson Databind Vulnerable to Denial-of-Service (DoS) via Resource Exhaustion in 'BeanDeserializer' Component\n\n\n## Solution\nFixed in version [**2.13.4**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.13.4) by [this](https://github.com/FasterXML/jackson-databind/commit/063183589218fec19a9293ed2f17ec53ea80ba88) commit and in version [**2.12.7.1**](https://github.com/FasterXML/jackson-databind/releases/tag/jackson-databind-2.12.7.1) by [this](https://github.com/FasterXML/jackson-databind/commit/cd090979b7ea78c75e4de8a4aed04f7e9fa8deea) commit.\n\nThe latest stable releases can be found [here](https://github.com/FasterXML/jackson-databind/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.fasterxml.jackson.core:jackson-databind:2.10.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-webmvc 5.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-webmvc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=975f0ae2-a634-405f-ae02-376fe26a51b0)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework:spring-webmvc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-45960 dom4j 2.1.1: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.dom4j","shortDescription":{"text":"Transitive Dependency: dom4j 2.1.1 from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-45960)"},"fullDescription":{"text":"** DISPUTED ** An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which \"can be safe in one case and unsafe in another.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| dom4j 2.1.1  | 2.1.4  | 2.1.4 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=432c6040-c4fb-4cec-b062-5688c4f1d71e)\n\n\n## Description\n** DISPUTED ** An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which \"can be safe in one case and unsafe in another.\"\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [CVE-2023-45960](https://openhub.net/vulnerabilities/bdsa/CVE-2023-45960) - \n\n\n\n\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.hibernate:hibernate-core:5.4.9.Final\n            - org.dom4j:dom4j:2.1.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-91](https://cwe.mitre.org/data/definitions/91.html)\n\n","text":"** DISPUTED ** An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which \"can be safe in one case and unsafe in another.\""},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-91"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-10683 dom4j 2.1.1: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.dom4j","shortDescription":{"text":"Transitive Dependency: dom4j 2.1.1 from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-10683 BDSA-2019-4386)"},"fullDescription":{"text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| dom4j 2.1.1  | 2.1.4  | 2.1.4 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=432c6040-c4fb-4cec-b062-5688c4f1d71e)\n\n\n## Description\nDom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2019-4386](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-4386)([CVE-2020-10683](https://nvd.nist.gov/vuln/detail/CVE-2020-10683)) - Dom4j Vulnerable to XML External Entities (XXE) Attacks via Improper Default Configurations of XML Parser\n\n\n## Solution\nFixed in versions [**2.0.3**](https://github.com/dom4j/dom4j/releases/tag/version-2.0.3) and [**2.1.2**](https://github.com/dom4j/dom4j/releases/tag/version-2.1.2) by [this](https://github.com/dom4j/dom4j/commit/a8228522a99a02146106672a34c104adbda5c658) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.hibernate:hibernate-core:5.4.9.Final\n            - org.dom4j:dom4j:2.1.1\n\n\n## References\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\n\n","text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-41853 hsqldb 2.5.0: org.hsqldb","shortDescription":{"text":"Direct Dependency: hsqldb 2.5.0 (CVE-2022-41853 BDSA-2022-3330)"},"fullDescription":{"text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| hsqldb 2.5.0  | 2.7.2  | 2.7.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e97fd5db-dede-4ca6-af64-9ffb98dc1797)\n\n\n## Description\nHyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3330)([CVE-2022-41853](https://nvd.nist.gov/vuln/detail/CVE-2022-41853)) - HyperSQL DataBase Vulnerable to Remote Code Execution (RCE) via Unsafe Reflection\n\n\n## Solution\nFixed in version [**2.7.1**](https://github.com/ryenus/hsqldb/releases/tag/2.7.1) by [this](https://github.com/ryenus/hsqldb/commit/b6719c67b41eb9298c2451ad2829bf03b262a941) commit.\n\nThe latest stable releases can be found [here](https://github.com/ryenus/hsqldb/tags).\n\n## Workaround\nThe following workaround has been advised:\n\nSet the system property `hsqldb.method_class_names` to classes which are allowed to be called.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-470](https://cwe.mitre.org/data/definitions/470.html)\n\n","text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-470"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3731 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e00edd00-4767-4a49-8bb3-6b1c578c6959)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-util 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-util 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=bfd06643-c2a2-46e4-aec6-b5bcdd3d0f9d)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-util:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-13956 httpclient 4.5.10: wiremock 2.8.0: org.apache.httpcomponents","shortDescription":{"text":"Transitive Dependency: httpclient 4.5.10 from wiremock 2.8.0 (CVE-2020-13956 BDSA-2020-2701)"},"fullDescription":{"text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| httpclient 4.5.10  | 4.5.14  | 4.5.14 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccde71fb-7a11-4b2b-aeb6-2b0f05457e3d)\n\n\n## Description\nApache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2701](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2701)([CVE-2020-13956](https://nvd.nist.gov/vuln/detail/CVE-2020-13956)) - Apache HttpClient Vulnerable to Information Disclosure and Modification via Improper URI Authority Component Handling\n\n\n## Solution\nFixed in [**5.0.3**](https://hc.apache.org/downloads.cgi) by [this](https://github.com/apache/httpcomponents-client/commit/894234a5aeb9958e7e466c383e4d0ded17a9a813) commit, and in [**4.5.13**](https://hc.apache.org/downloads.cgi) by [this](https://github.com/apache/httpcomponents-client/commit/e628b4c5c464c2fa346385596cc78e035a91a62e) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.apache.httpcomponents:httpclient:4.5.10\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\nCommon Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html)\n\n","text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20","external/cwe/cwe-229"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-validation 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-validation 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b3590980-8f82-48fd-87f0-44b8230a1a80)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aspects 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aspects 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=864a267d-4e48-4913-95c0-4b62ba07253c)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework:spring-aspects:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-1471 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-1471 BDSA-2022-3447)"},"fullDescription":{"text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3447](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3447)([CVE-2022-1471](https://nvd.nist.gov/vuln/detail/CVE-2022-1471)) - SnakeYAML Vulnerable to Remote Code Execution (RCE) via Deserialization of Untrusted YAML File with 'Constructor()' Class\n\n\n## Solution\nFixed in version [**2.0**](https://bitbucket.org/snakeyaml/snakeyaml/src/snakeyaml-2.0/) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/2b8d47c8bcfd402e7a682b7b2674e8d0cb25e522) commit.\n\nThe latest stable releases are available [here](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n## Workaround\nThe `SafeConstructor()` class may be used instead of `Constructor()` while parsing untrusted content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-38749 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-38749 BDSA-2022-2577)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2577](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2577)([CVE-2022-38749](https://nvd.nist.gov/vuln/detail/CVE-2022-38749)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Stack-Based Buffer Overflow in Parsing of Untrusted YAML Files\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n","text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-121"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38750 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-38750 BDSA-2022-2578)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2578](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2578)([CVE-2022-38750](https://nvd.nist.gov/vuln/detail/CVE-2022-38750)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Stack-Based Buffer Overflow in 'BaseConstructor.java'\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n","text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-121"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2017-18640 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2017-18640 BDSA-2017-3947)"},"fullDescription":{"text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2017-3947](https://openhub.net/vulnerabilities/bdsa/BDSA-2017-3947)([CVE-2017-18640](https://nvd.nist.gov/vuln/detail/CVE-2017-18640)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Billion Laughs Attack\n\n\n## Solution\nFixed in version [**1.26**](https://bitbucket.org/asomov/snakeyaml/src/snakeyaml-1.26/) by [this](https://github.com/snakeyaml/snakeyaml/commit/da11ddbd91c1f8392ea932b37fa48110fa54ed8c) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-409](https://cwe.mitre.org/data/definitions/409.html)\n\n","text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-409"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41854 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-41854 BDSA-2022-3211)"},"fullDescription":{"text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-3211](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3211)([CVE-2022-41854](https://nvd.nist.gov/vuln/detail/CVE-2022-41854)) - Snakeyaml Vulnerable to Denial-of-Service (DoS) via Stack-based Buffer Overflow due to Uncaught Exception in 'java.util.AbstractSet.hashCode' Component\n\n\n## Solution\nFixed in version [**1.32**](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/5ee00863a816f2a023d35a7512b5f742c9a36b5a) commit.\n\nThe latest stable releases can be found [here](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\n\n","text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-121"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38751 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-38751 BDSA-2022-2587)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2587](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2587)([CVE-2022-38751](https://nvd.nist.gov/vuln/detail/CVE-2022-38751)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Regular Expression Mishandling\n\n\n## Solution\nFixed in version [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/f3ab4e0f54c37ddb10f00b71d04187bb0ef1799c) commit and [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/6aedd33a811f7347c5dae2940e75940966f59466) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-229](https://cwe.mitre.org/data/definitions/229.html)\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-229"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-25857 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-25857 BDSA-2022-2579)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2579](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2579)([CVE-2022-25857](https://nvd.nist.gov/vuln/detail/CVE-2022-25857)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Lack of Nested Depth Limitation for Collections\n\n\n## Solution\nFixed in [**1.31**](https://mvnrepository.com/artifact/org.yaml/snakeyaml/1.31) by [this](https://bitbucket.org/snakeyaml/snakeyaml/commits/fc30078) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.yaml/snakeyaml).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-38752 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","shortDescription":{"text":"Transitive Dependency: snakeyaml 1.25 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-38752 BDSA-2022-2590)"},"fullDescription":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| snakeyaml 1.25  | 1.33.0.SP1-redhat-00001  | 2.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ccca8249-a654-49dc-a652-26c5151a6954)\n\n\n## Description\nSnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2590](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2590)([CVE-2022-38752](https://nvd.nist.gov/vuln/detail/CVE-2022-38752)) - SnakeYAML Vulnerable to Denial-of-Service (DoS) via Stack Overflow Caused by 'ArrayList' Recursion\n\n\n## Solution\nFixed in [**1.32**](https://bitbucket.org/snakeyaml/snakeyaml/downloads/?tab=tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.yaml:snakeyaml:1.25\n\n\n## References\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\nCommon Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n","text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-121","external/cwe/cwe-674"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-io 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-io 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0a29b019-3dc7-4512-a721-68eb24442444)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-io:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2018-1836 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (BDSA-2018-1836)"},"fullDescription":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-1836](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-1836) - Apache Ant Vulnerable to Arbtirary File Write due to Failure to Sanitize File Names\n\n\n\n## Solution\nFixed by [this](https://github.com/apache/ant/commit/e56e54565804991c62ec76dad385d2bdda8972a7#diff-32b057b8e95fa2b3f7d644552643010aR11) commit in.\n* **[1.9.12](https://github.com/apache/ant/releases/tag/rel%2F1.9.12)**\n* **[1.10.4](https://github.com/apache/ant/releases/tag/rel%2F1.10.4)**\n\n\n\n**Note:** To prevent this attack it is required to set `allowFilesToEscapeDest` to false as well as updating the component.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2012-0078 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (BDSA-2012-0078)"},"fullDescription":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2012-0078](https://openhub.net/vulnerabilities/bdsa/BDSA-2012-0078) - Apache Common Compress and Apache Ant Vulnerable to Denial-of-Service (DoS) via bzip2 Resource Consumption\n\n\n\n## Solution\nFixed in Commons Compress version [**1.4.1**](https://github.com/apache/commons-compress/releases/tag/rel%2F1.4.1) by the following commits:\n* [Commit 1](https://github.com/apache/commons-compress/commit/b06f7b41c936ef1a79589d16ea5c1d8b93f71f66)\n* [Commit 2](https://github.com/apache/commons-compress/commit/6e95697e783767f3549f00d7d2e1b002eac4a3d4)\n* [Commit 3](https://github.com/apache/commons-compress/commit/1ce57d976c4f25fe99edcadf079840c278f3cb84)\n* [Commit 4](https://github.com/apache/commons-compress/commit/020c03d8ef579e80511023fb46ece30e9c3dd27d)\n* [Commit 5](https://github.com/apache/commons-compress/commit/ea31005111f0abede7e43e4ba0012e62e0808b22)\n* [Commit 6](https://github.com/apache/commons-compress/commit/cca0e6e5341aacddefd4c4d36cef7cbdbc2a8777)\n* [Commit 7](https://github.com/apache/commons-compress/commit/fdd7459bc5470e90024dbe762249166481cce769)\n* [Commit 8](https://github.com/apache/commons-compress/commit/0600296ab8f8a0bbdfedd483f51b38005eb8e34e)\n* [Commit 9](https://github.com/apache/commons-compress/commit/2ab2fcb356753927afaa731b9d2dcc47d3083408)\n* [Commit 10](https://github.com/apache/commons-compress/commit/6ced422bf5eca3aac05396367bafb33ec21bf74e)\n* [Commit 11](https://github.com/apache/commons-compress/commit/654222e628097763ee6ca561ae77be5c06666173)\n* [Commit 12](https://github.com/apache/commons-compress/commit/8f702469cbf4c451b6dea349290bc4af0f6f76c7)\n\nFixed by [this](https://github.com/apache/ant/commit/08284bc7aa7d066544b30974231240c9b73597eb) commit and [this](https://github.com/apache/ant/commit/8f2b4c5f4f8a977c4b07393e3156b1c02d1085fc) commit in the **master** branch of Ant. These fixes were applied in Ant version [**1.8.4**](https://github.com/apache/ant/tree/rel/1.8.4) by [this](https://github.com/apache/ant/commit/eb9c33f406f31e3705a963e051ff5004dbe8f0cd) commit.\n\nThe latest stable releases of Commons Compress are available [here](https://commons.apache.org/proper/commons-compress/download_compress.cgi), and the latest stable releases of Ant are available [here](https://ant.apache.org/).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2083 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (BDSA-2021-2083)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\".\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2083](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2083) - Apache Ant Vulnerable to Denial-of-Service (DoS) via Crafted TAR Archive\n\n\n\n## Solution\nFixed in [**1.9.16-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.9.16_RC1) and [**1.10.11-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.11_RC1) by [this](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/ant/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-1945 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (CVE-2020-1945 BDSA-2020-1128)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1128](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1128)([CVE-2020-1945](https://nvd.nist.gov/vuln/detail/CVE-2020-1945)) - Apache Ant Vulnerable to Information Disclosure via Default Temporary Directory Identified by 'java.io.tmpdir'\n\n\n## Solution\nFixed in [**1.10.9-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.9_RC1) by [this](https://github.com/apache/ant/commit/87ac51d3c22bcf7cfd0dc07cb0bd04a496e0d428) commit.\n\n## Workaround\nSteps were added to vulnerable versions to work around the issue. \n\nIn [**1.9.15-rc1**](https://github.com/apache/ant/releases/tag/rel%2F1.9.15) and [**1.10.8-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.8_RC1), the vendor has added [this](https://github.com/apache/ant/commit/9c1f4d905da59bf446570ac28df5b68a37281f35) commit and [this](https://github.com/apache/ant/commit/926f339ea30362bec8e53bf5924ce803938163b7) commit. \n\nThe changes introduce the `ant.tmpdir` property which holds the safe directory path for temporary files. It has to be set by the user. The directory itself should also be set up by the user since Ant may not have the correct permissions to do it automatically.\n\nIn [**1.10.8-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.8_RC1), [this](https://github.com/apache/ant/commit/a8645a151bc706259fb1789ef587d05482d98612) commit was also added. It attempts to set secure temporary file permissions, but does not protect the directory. \n\nTherefore it is strongly recommended that users set up a private secure temporary directory with appropriate permissions.\n\nThe official mitigation for versions from **1.1** to **1.9.14** and **1.10.0** to **1.10.7** is setting the `java.io.tmpdir` system property to point to a directory only readable and writable by the current user prior to running Ant.\n\nVersions **1.9.15** and **1.10.8** can be trusted to use the Ant property `ant.tmpfile`, but the vendor still highly recommends using a safer private temporary directory instead.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2085 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (BDSA-2021-2085)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2085](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2085) - Apache Ant Vulnerable to Denial-of-Service (DoS) via Crafted ZIP Archive\n\n\n\n## Solution\nFixed in [**1.9.16-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.9.16_RC1) and [**1.10.11-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.11_RC1) by [this](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/ant/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-2577 ant 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant 1.6.2 (BDSA-2020-2577)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant 1.6.2  | 1.6.5-osgi  | 1.6.5-osgi |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=538a2757-28bc-4bfb-a555-1037b7411a31)\n\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2577](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2577) - Apache Ant Vulnerable to Information Disclosure via Insecure Temporary File Directory\n\n\n\n## Solution\nFixed in [**ANT_1.10.9_RC1**](https://github.com/apache/ant/releases/tag/ANT_1.10.9_RC1) by [this](https://github.com/apache/ant/commit/87ac51d3c22bcf7cfd0dc07cb0bd04a496e0d428) commit and [this](http://link-to-the-commit.com) commit.\n\n## Workaround\n**Note:** Per the vendor, The best mitigation still is to make Ant use a directory that is only readable and writable by the current user.\n\nThe official mitigation for versions from **1.1** to **1.9.14** and **1.10.0** to **1.10.7** is setting the `java.io.tmpdir` system property to point to a directory only readable and writable by the current user prior to running Ant.\n\nVersions **1.9.15** and **1.10.8** can be trusted to use the Ant property `ant.tmpfile`, but the vendor still highly recommends using a safer private temporary directory instead.\n\nAnt **1.10.9** will also try to create a temporary directory only accessible by the current user if neither of the properties above is set but may fail to create one if the underlying filesystem doesn't allow it.\n\nExplicitly setting up a directory to use and set the respective property is the only mitigation that will work on every platform.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-expression 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-expression 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aff917f1-6501-4884-893e-355afc9744cc)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n            - org.springframework:spring-expression:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2022-3109 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3109](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3109) - Spring Security Vulnerable to Privilege Escalation via Specially Crafted Request Causing OAuth2 Server Access Token Response With Empty Scope List\n\n\n\n## Solution\nFixed in versions [**5.7.5**](https://github.com/spring-projects/spring-security/releases/tag/5.7.5) and [**5.6.9**](https://github.com/spring-projects/spring-security/releases/tag/5.6.9) by [this](https://github.com/spring-projects/spring-security/commit/75004587a419a96d18909030b20c6b16b226ecbe) commit..\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-security/tags).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1369](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1369)([CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)) - Spring Security Vulnerable to Authorization Bypass via Improper Request Validation in 'RegexRequestMatcher' Class\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2023-1825 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-1825](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1825) - Spring Security Vulnerable to Security Mechanism Bypass in Spring WebFlux via Un-Prefixed Double Wildcard Pattern\n\n\n\n## Solution\nFixed in versions:\n- [**5.6.12**](https://github.com/spring-projects/spring-security/releases/tag/5.6.12) by [this](https://github.com/spring-projects/spring-security/commit/7813a9ba26e53fe54e4d2ec6eb076126e8550780) commit,\n- [**5.7.10**](https://github.com/spring-projects/spring-security/releases/tag/5.7.10) by [this](https://github.com/spring-projects/spring-security/commit/fe9bc26bdcfea2a40c93e3db98e649bfb0edaab2) commit,\n- [**5.8.5**](https://github.com/spring-projects/spring-security/releases/tag/5.8.5) by [this](https://github.com/spring-projects/spring-security/commit/a939f17890a9415604ecf81bc236d3e969e2d9b4) commit,\n- [**6.0.5**](https://github.com/spring-projects/spring-security/releases/tag/6.0.5) by [this](https://github.com/spring-projects/spring-security/commit/cbef118026e38005109158dd35e79038af2bb913) commit,\n- [**6.1.2**](https://github.com/spring-projects/spring-security/releases/tag/6.1.2) by [this](https://github.com/spring-projects/spring-security/commit/aaa31312bd74c637ce9549ed68cab33214008bf5) commit.\n\nThe above fixed versions require Spring Framework versions:\n- [**5.2.25**](https://github.com/spring-projects/spring-framework/releases/tag/5.2.25),\n- [**5.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/5.3.29),\n- [**6.0.11**](https://github.com/spring-projects/spring-framework/releases/tag/6.0.11).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-285","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5407 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1092](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1092)([CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)) - Spring Security Vulnerable to Authentication Abuse via Signature Wrapping Attacks with SAML Responses\n\n\n## Solution\nFixed in **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/0db9cd075d621118cdff303f402d25425ec81bbc) commit and **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/69b1bc62ffe7c1e1bbf508951efa1e0235954198) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1094](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1094)([CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)) - Spring Security Vulnerable to Information Exposure via Insecure Text Encryptor\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-security/commit/db155b30941536e6c33408a20f62e790b2c78a97) commit in:\n* **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)**\n* **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)**\n* **[5.1.10](https://github.com/spring-projects/spring-security/releases/tag/5.1.10.RELEASE)**\n* **[5.0.16](https://github.com/spring-projects/spring-security/releases/tag/5.0.16.RELEASE)**\n* **[4.2.16](https://github.com/spring-projects/spring-security/releases/tag/4.2.16.RELEASE)**\n\n## Workaround\nIf upgrading to a fixed version cannot be performed immediately, users should discontinue use of the function `Encryptors#queryableText(CharSequence, CharSequence)` and look to their data store for a secure mechanism to query encrypted data.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html)\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-329"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2310](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2310)([CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)) - Spring Security Vulnerable to Denial-of-Service (DoS) via Uncontrolled Resource Consumption in Authorization Request Functionality\n\n\n## Solution\nFixed in:\n* **[5.5.1](https://github.com/spring-projects/spring-security/releases/tag/5.5.1)**\n* **[5.4.7](https://github.com/spring-projects/spring-security/releases/tag/5.4.7)**\n* **[5.3.10](https://github.com/spring-projects/spring-security/releases/tag/5.3.10.RELEASE)**\n* **[5.2.11](https://github.com/spring-projects/spring-security/releases/tag/5.2.11.RELEASE)**\n\nThe latest stable releases are also available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1370](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1370)([CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)) - Spring Security Vulnerable to Weakened Bcrypt Hashing via Integer Overflow in 'BCryptPasswordEncoder' Component\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n## Workaround\nThe vendor has stated [here](https://tanzu.vmware.com/security/cve-2022-22976) that the following workaround can be implemented:\n\n\u003e Update your BCryptPasswordEncoder to use a lower number of rounds.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 spring-security-test 5.2.1.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 5.2.1.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=677318c8-fc61-424b-92fe-ae062ad9d083)\n\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0417](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0417)([CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)) - Spring Security Vulnerable to Privilege Escalation via 'SecurityContext' State Mishandling\n\n\n## Solution\nFixed in:\n* [**5.4.4**](https://github.com/spring-projects/spring-security/releases/tag/5.4.4) by [this](https://github.com/spring-projects/spring-security/commit/c72a6fac04853912a4b7caad5f0500f2aace5a79) commit.\n* [**5.3.8**](https://github.com/spring-projects/spring-security/releases/tag/5.3.8.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/9a49a8695fd7fd6ab5e8d31ba1fae00dead1f643) commit.\n* [**5.2.9**](https://github.com/spring-projects/spring-security/releases/tag/5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/7cab7b06c51ea885dd0d07ff26b135dd3afce1d1) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html)\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-10693 hibernate-validator 6.0.18.Final: spring-boot-starter-web 2.2.2.RELEASE: org.hibernate.validator","shortDescription":{"text":"Transitive Dependency: hibernate-validator 6.0.18.Final from spring-boot-starter-web 2.2.2.RELEASE (CVE-2020-10693 BDSA-2020-1019)"},"fullDescription":{"text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| hibernate-validator 6.0.18.Final  | 6.2.5.Final-redhat-00001  | 8.0.1.Final-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=901c5d62-56fa-4b1a-8009-6904fbdf7fe9)\n\n\n## Description\nHibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1019](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1019)([CVE-2020-10693](https://nvd.nist.gov/vuln/detail/CVE-2020-10693)) - Hibernate Validator Vulnerable to Input Sanitization Bypass via Flaw in Message Interpolation Processor\n\n\n## Solution\nFixed in **[6.0.20.Final](https://github.com/hibernate/hibernate-validator/releases/tag/6.0.20.Final)** by these commits:\n* [Commit 1](https://github.com/hibernate/hibernate-validator/commit/4b9f2a1a3e1c67fbd29a7fc710c611d7aca6eab9)\n* [Commit 2](https://github.com/hibernate/hibernate-validator/commit/16b77f08c2e9983f33538688107d6570986e31c1)\n* [Commit 3](https://github.com/hibernate/hibernate-validator/commit/29bd0f42bf63e28d9a71adef02af67b319144576)\n* [Commit 4](https://github.com/hibernate/hibernate-validator/commit/df2fe2c1e42bad5b12ab967d5d0db3cf49ac7af9)\n\nFixed in **[6.1.5.Final ](https://github.com/hibernate/hibernate-validator/releases/tag/6.1.5.Final)** by these commits:\n* [Commit 1](https://github.com/hibernate/hibernate-validator/commit/5415140b2aea35fa4eb5e0a07323a9f23c04aeda)\n* [Commit 2](https://github.com/hibernate/hibernate-validator/commit/d3b39a74bdc18ea6b112b1e9e6a8f77550066381)\n* [Commit 3](https://github.com/hibernate/hibernate-validator/commit/6ae28a1bc8f7ccb208fa004bdb7c6da569be8a59)\n* [Commit 4](https://github.com/hibernate/hibernate-validator/commit/438a0fc9bd7e30b4de2b5ba5a96e7f070e3d88e9)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-validation:2.2.2.RELEASE\n            - org.hibernate.validator:hibernate-validator:6.0.18.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-aop 5.2.2.RELEASE from spring-boot-starter-security 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-security 2.2.2.RELEASE  | 2.7.14  | 3.1.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-aop 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7c42f905-0aa2-4050-8ee1-80e23de4e345)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-security:2.2.2.RELEASE\n        - org.springframework:spring-aop:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3401 logback-classic 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","shortDescription":{"text":"Transitive Dependency: logback-classic 1.2.3 from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3401)"},"fullDescription":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| logback-classic 1.2.3  | 1.4.11  | 1.4.11 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d03a3bd8-ebf5-43ff-a468-be0afa40b477)\n\n\n## Description\nlogback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3401](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3401) - logback Vulnerable to Man-in-the-Middle (MitM) Attack via no SSL Hostname Verification\n\n\n\n## Solution\nFixed in [**1.2.7**](https://github.com/qos-ch/logback/releases/tag/v_1.2.7) by [this](https://github.com/qos-ch/logback/commit/626c7733c188) commit.\n\nThe latest releases can be found [here](https://github.com/qos-ch/logback/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n                - ch.qos.logback:logback-classic:1.2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-297](https://cwe.mitre.org/data/definitions/297.html)\n\n","text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-297"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-42550 logback-classic 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","shortDescription":{"text":"Transitive Dependency: logback-classic 1.2.3 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2021-42550 BDSA-2021-3818)"},"fullDescription":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| logback-classic 1.2.3  | 1.4.11  | 1.4.11 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d03a3bd8-ebf5-43ff-a468-be0afa40b477)\n\n\n## Description\nLogback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3818](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3818)([CVE-2021-42550](https://nvd.nist.gov/vuln/detail/CVE-2021-42550)) - Logback Vulnerable to Remote Code Execution (RCE) via Unrestricted JNDI Location Namespaces in 'logback.xml'\n\n\n## Solution\nFixed in [**1.2.9**](https://github.com/qos-ch/logback/releases/tag/v_1.2.9) by the following commits:\n* [Commit 1](https://github.com/qos-ch/logback/commit/21d772f2bc2ed780b01b4fe108df7e29707763f1)\n* [Commit 2](https://github.com/qos-ch/logback/commit/54e81d74a9304a188c62a8110d4d393ccad5cbc5)\n* [Commit 3](https://github.com/qos-ch/logback/commit/3b9cd0efe0b3390026a04a6092aa03e433ddd330)\n\nFixed in [**1.3.0-alpha11**](https://github.com/qos-ch/logback/releases/tag/v_1.3.0-alpha11) by the following commits:\n* [Commit 1](https://github.com/qos-ch/logback/commit/ef4fc4186b74b45ce80d86833820106ff27edd42)\n* [Commit 2](https://github.com/qos-ch/logback/commit/87291079a1de9369ac67e20dc70a8fdc7cc4359c)\n* [Commit 3](https://github.com/qos-ch/logback/commit/8fb44ca67e6ab8d89bb15ec6cb75075921106f38)\n* [Commit 4](https://github.com/qos-ch/logback/commit/c43bd30e1092b89bb91f5fb6a28310956b3bac61)\n\n**Note**: As an extra precaution, in addition to upgrading to logback version **1.2.9**, the vendor also recommends users to set their logback configuration files as read-only.\n\nThe latest stable releases can be found [here](https://github.com/qos-ch/logback/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n                - ch.qos.logback:logback-classic:1.2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=09a9146c-d7a1-4f6c-b23d-87bc884c621f)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-json 2.2.2.RELEASE from spring-boot-starter-web 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-web 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-json 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=6140b0ed-0816-4459-a4f8-e6b79df47aab)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-web:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-json:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-orm 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-orm 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=08048052-56f3-4c1b-901c-2c2bd2896fd7)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-orm:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3109](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3109) - Spring Security Vulnerable to Privilege Escalation via Specially Crafted Request Causing OAuth2 Server Access Token Response With Empty Scope List\n\n\n\n## Solution\nFixed in versions [**5.7.5**](https://github.com/spring-projects/spring-security/releases/tag/5.7.5) and [**5.6.9**](https://github.com/spring-projects/spring-security/releases/tag/5.6.9) by [this](https://github.com/spring-projects/spring-security/commit/75004587a419a96d18909030b20c6b16b226ecbe) commit..\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-security/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1369](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1369)([CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)) - Spring Security Vulnerable to Authorization Bypass via Improper Request Validation in 'RegexRequestMatcher' Class\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-1825](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1825) - Spring Security Vulnerable to Security Mechanism Bypass in Spring WebFlux via Un-Prefixed Double Wildcard Pattern\n\n\n\n## Solution\nFixed in versions:\n- [**5.6.12**](https://github.com/spring-projects/spring-security/releases/tag/5.6.12) by [this](https://github.com/spring-projects/spring-security/commit/7813a9ba26e53fe54e4d2ec6eb076126e8550780) commit,\n- [**5.7.10**](https://github.com/spring-projects/spring-security/releases/tag/5.7.10) by [this](https://github.com/spring-projects/spring-security/commit/fe9bc26bdcfea2a40c93e3db98e649bfb0edaab2) commit,\n- [**5.8.5**](https://github.com/spring-projects/spring-security/releases/tag/5.8.5) by [this](https://github.com/spring-projects/spring-security/commit/a939f17890a9415604ecf81bc236d3e969e2d9b4) commit,\n- [**6.0.5**](https://github.com/spring-projects/spring-security/releases/tag/6.0.5) by [this](https://github.com/spring-projects/spring-security/commit/cbef118026e38005109158dd35e79038af2bb913) commit,\n- [**6.1.2**](https://github.com/spring-projects/spring-security/releases/tag/6.1.2) by [this](https://github.com/spring-projects/spring-security/commit/aaa31312bd74c637ce9549ed68cab33214008bf5) commit.\n\nThe above fixed versions require Spring Framework versions:\n- [**5.2.25**](https://github.com/spring-projects/spring-framework/releases/tag/5.2.25),\n- [**5.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/5.3.29),\n- [**6.0.11**](https://github.com/spring-projects/spring-framework/releases/tag/6.0.11).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1092](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1092)([CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)) - Spring Security Vulnerable to Authentication Abuse via Signature Wrapping Attacks with SAML Responses\n\n\n## Solution\nFixed in **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/0db9cd075d621118cdff303f402d25425ec81bbc) commit and **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/69b1bc62ffe7c1e1bbf508951efa1e0235954198) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1094](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1094)([CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)) - Spring Security Vulnerable to Information Exposure via Insecure Text Encryptor\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-security/commit/db155b30941536e6c33408a20f62e790b2c78a97) commit in:\n* **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)**\n* **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)**\n* **[5.1.10](https://github.com/spring-projects/spring-security/releases/tag/5.1.10.RELEASE)**\n* **[5.0.16](https://github.com/spring-projects/spring-security/releases/tag/5.0.16.RELEASE)**\n* **[4.2.16](https://github.com/spring-projects/spring-security/releases/tag/4.2.16.RELEASE)**\n\n## Workaround\nIf upgrading to a fixed version cannot be performed immediately, users should discontinue use of the function `Encryptors#queryableText(CharSequence, CharSequence)` and look to their data store for a secure mechanism to query encrypted data.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html)\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-329"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2310](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2310)([CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)) - Spring Security Vulnerable to Denial-of-Service (DoS) via Uncontrolled Resource Consumption in Authorization Request Functionality\n\n\n## Solution\nFixed in:\n* **[5.5.1](https://github.com/spring-projects/spring-security/releases/tag/5.5.1)**\n* **[5.4.7](https://github.com/spring-projects/spring-security/releases/tag/5.4.7)**\n* **[5.3.10](https://github.com/spring-projects/spring-security/releases/tag/5.3.10.RELEASE)**\n* **[5.2.11](https://github.com/spring-projects/spring-security/releases/tag/5.2.11.RELEASE)**\n\nThe latest stable releases are also available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1370](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1370)([CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)) - Spring Security Vulnerable to Weakened Bcrypt Hashing via Integer Overflow in 'BCryptPasswordEncoder' Component\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n## Workaround\nThe vendor has stated [here](https://tanzu.vmware.com/security/cve-2022-22976) that the following workaround can be implemented:\n\n\u003e Update your BCryptPasswordEncoder to use a lower number of rounds.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-web 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-web 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a532807b-8701-40e5-afb4-f0e29ec0248c)\n\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0417](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0417)([CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)) - Spring Security Vulnerable to Privilege Escalation via 'SecurityContext' State Mishandling\n\n\n## Solution\nFixed in:\n* [**5.4.4**](https://github.com/spring-projects/spring-security/releases/tag/5.4.4) by [this](https://github.com/spring-projects/spring-security/commit/c72a6fac04853912a4b7caad5f0500f2aace5a79) commit.\n* [**5.3.8**](https://github.com/spring-projects/spring-security/releases/tag/5.3.8.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/9a49a8695fd7fd6ab5e8d31ba1fae00dead1f643) commit.\n* [**5.2.9**](https://github.com/spring-projects/spring-security/releases/tag/5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/7cab7b06c51ea885dd0d07ff26b135dd3afce1d1) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-web:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html)\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-test 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-test 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=85a1d0ff-0a96-447e-b04a-d9f5eaa863f1)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-test:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3731 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-actuator 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-actuator 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=c41dfffe-611e-4091-a60a-88cfc936c5e1)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot-starter-logging 2.2.2.RELEASE from spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-logging 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b451a044-55d1-4b3c-b3d2-f293ad967261)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-0856 spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-devtools 2.2.2.RELEASE (BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=408af327-c3e0-42fd-a760-915d06f9b523)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3109](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3109) - Spring Security Vulnerable to Privilege Escalation via Specially Crafted Request Causing OAuth2 Server Access Token Response With Empty Scope List\n\n\n\n## Solution\nFixed in versions [**5.7.5**](https://github.com/spring-projects/spring-security/releases/tag/5.7.5) and [**5.6.9**](https://github.com/spring-projects/spring-security/releases/tag/5.6.9) by [this](https://github.com/spring-projects/spring-security/commit/75004587a419a96d18909030b20c6b16b226ecbe) commit..\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-security/tags).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1369](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1369)([CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)) - Spring Security Vulnerable to Authorization Bypass via Improper Request Validation in 'RegexRequestMatcher' Class\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2016-9879 BDSA-2016-1603)"},"fullDescription":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2016-1603](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-1603)([CVE-2016-9879](https://nvd.nist.gov/vuln/detail/CVE-2016-9879)) - Spring Security Vulnerable to Path Traversal Due to Lack of Sanitization for Encoded '/' in 'getPathInfo' Function\n\n\n## Solution\nFixed in:\n\n* **[4.2.1](https://github.com/spring-projects/spring-security/releases/tag/4.2.1.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/666e356ebc479194ba51e43bb99fc42f849b6175) commit,\n* **[4.1.4](https://github.com/spring-projects/spring-security/releases/tag/4.1.4.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/ed2ae21074b7850d386371b2ab9e29268ef2f0c0) commit,\n* **[3.2.10](https://github.com/spring-projects/spring-security/releases/tag/3.2.10.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/6d30da2e1f166ceac339899295e1b8a8ff2f08c4) commit.\n\n## Workaround\nAvoid using Servlet containers which include path parameters in return values for `getServletPath()` and `getPathInfo()`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2310](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2310) - Spring Security Vulnerable to Denial-of-Service (DoS) via Uncontrolled Resource Consumption in Authorization Request Functionality\n\n\n\n## Solution\nFixed in:\n* **[5.5.1](https://github.com/spring-projects/spring-security/releases/tag/5.5.1)**\n* **[5.4.7](https://github.com/spring-projects/spring-security/releases/tag/5.4.7)**\n* **[5.3.10](https://github.com/spring-projects/spring-security/releases/tag/5.3.10.RELEASE)**\n* **[5.2.11](https://github.com/spring-projects/spring-security/releases/tag/5.2.11.RELEASE)**\n\nThe latest stable releases are also available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2019-11272 BDSA-2019-1853)"},"fullDescription":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2019-1853](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-1853)([CVE-2019-11272](https://nvd.nist.gov/vuln/detail/CVE-2019-11272)) - Spring Security Vulnerable to Authentication Bypass via Null Encoded Passwords in 'isPasswordValid' Function\n\n\n## Solution\nFixed in version [**4.2.13**](https://github.com/spring-projects/spring-security/commits/4.2.13.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/b2d4fec3617c497c5a8eb9c7e5270e0c7db293ee) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1370](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1370)([CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)) - Spring Security Vulnerable to Weakened Bcrypt Hashing via Integer Overflow in 'BCryptPasswordEncoder' Component\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n## Workaround\nThe vendor has stated [here](https://tanzu.vmware.com/security/cve-2022-22976) that the following workaround can be implemented:\n\n\u003e Update your BCryptPasswordEncoder to use a lower number of rounds.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2018-1199 BDSA-2018-0546)"},"fullDescription":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2018-0546](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-0546)([CVE-2018-1199](https://nvd.nist.gov/vuln/detail/CVE-2018-1199)) - Spring Security Vulnerable to Security Constraint Bypass Via Paths with Different Character Encodings\n\n\n## Solution\n* Fixed in Spring Security [**5.0.1**](https://projects.spring.io/spring-security/) by [this](https://github.com/spring-projects/spring-security/commit/0eef5b4b425ab42b9fa0fde1a3f36a37b92558f2) commit..\n* Fixed in Spring Security [**4.2.4**](https://projects.spring.io/spring-security/) by [this](https://github.com/spring-projects/spring-security/commit/cb8041ba67635edafcc934498ef82707157fd22a) commit..\n* Fixed in Spring Security [**4.1.5**](https://projects.spring.io/spring-security/) by [this](https://github.com/spring-projects/spring-security/commit/65da28e4bf62f58fb130ba727cbbd621b44a36d1) commit..  \n\n* Fixed in Spring Framework [**5.0.3**](https://projects.spring.io/spring-framework/).\n* Fixed in Spring Framework [**4.3.14**](https://projects.spring.io/spring-framework/).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-153](https://cwe.mitre.org/data/definitions/153.html)\n\n","text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-153"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Direct Dependency: spring-security-test 4.1.3.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b828c96c-02ff-414c-b80f-cbc02c1b6362)\n\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0417](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0417)([CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)) - Spring Security Vulnerable to Privilege Escalation via 'SecurityContext' State Mishandling\n\n\n## Solution\nFixed in:\n* [**5.4.4**](https://github.com/spring-projects/spring-security/releases/tag/5.4.4) by [this](https://github.com/spring-projects/spring-security/commit/c72a6fac04853912a4b7caad5f0500f2aace5a79) commit.\n* [**5.3.8**](https://github.com/spring-projects/spring-security/releases/tag/5.3.8.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/9a49a8695fd7fd6ab5e8d31ba1fae00dead1f643) commit.\n* [**5.2.9**](https://github.com/spring-projects/spring-security/releases/tag/5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/7cab7b06c51ea885dd0d07ff26b135dd3afce1d1) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html)\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-servlets 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-servlets 9.4.24.v20191120  | 9.4.53.20231009  | 11.0.18 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6d842ca-93c6-4e08-8c10-086950cf4212)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-29425 commons-io 2.6: commons-io","shortDescription":{"text":"Direct Dependency: commons-io 2.6 (CVE-2021-29425 BDSA-2021-0922)"},"fullDescription":{"text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| commons-io 2.6  | 2.15.0  | 20030203.000550 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=82d1de62-fd7d-42cd-9cca-1b7d6d54cfc1)\n\n\n## Description\nApache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0922](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0922)([CVE-2021-29425](https://nvd.nist.gov/vuln/detail/CVE-2021-29425)) - Apache Commons IO Vulnerable to Path Traversal via 'FileNameUtils.normalize'\n\n\n## Solution\nFixed in [**2.7-RC1**](https://github.com/apache/commons-io/releases/tag/commons-io-2.7-RC1) by [this](https://github.com/apache/commons-io/commit/2736b6fe0b3fa22ec8e2b4184897ecadb021fc78) commit.\n\nThe latest stable releases are available [here](https://commons.apache.org/proper/commons-io/).\n\n## Workaround\nThe vendor has [stated](https://lists.apache.org/thread.html/rc359823b5500e9a9a2572678ddb8e01d3505a7ffcadfa8d13b8780ab%40%3Cuser.commons.apache.org%3E) that a possible workaround would be not passing any unsafe input to `FileNameUtils.normalize`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-2976 guava 20.0: wiremock 2.8.0: com.google.guava","shortDescription":{"text":"Transitive Dependency: guava 20.0 from wiremock 2.8.0 (CVE-2023-2976 BDSA-2016-1748)"},"fullDescription":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 20.0  | 20.0-hal  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d560fcfd-01c5-44b8-89fe-ef65cdf9f96f)\n\n\n## Description\nGuava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2016-1748](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-1748)([CVE-2023-2976](https://nvd.nist.gov/vuln/detail/CVE-2023-2976)) - Guava Vulnerable to Authorization Bypass via Insecure Temporary File Creation in 'FileBackedOutputStream' Class\n\n\n## Solution\nFixed in version [**32.0.0**](https://github.com/google/guava/releases/tag/v32.0.0) by [this](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284) commit.\n\nIt should be noted that this patch broke the functionality of `FileBackedOutputStream` and `Files.createTempDir` on Windows. The vendor recommends upgrading to [**32.0.1**](https://github.com/google/guava/releases/tag/v32.0.1), which contains a patch that rectifies this.\n\nThe latest stable releases can be found [here](https://github.com/google/guava/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.google.guava:guava:20.0\n\n\n## References\nCommon Weakness Enumeration: [CWE-378](https://cwe.mitre.org/data/definitions/378.html)\n\n","text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-378"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-8908 guava 20.0: wiremock 2.8.0: com.google.guava","shortDescription":{"text":"Transitive Dependency: guava 20.0 from wiremock 2.8.0 (CVE-2020-8908 BDSA-2020-3736)"},"fullDescription":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 20.0  | 20.0-hal  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d560fcfd-01c5-44b8-89fe-ef65cdf9f96f)\n\n\n## Description\nGuava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3736](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3736)([CVE-2020-8908](https://nvd.nist.gov/vuln/detail/CVE-2020-8908)) - Guava Vulnerable to Local Information Disclosure via Insecure Permissions on Temporary Directory Creation\n\n\n## Solution\nFixed in **[30.0](https://github.com/google/guava/releases/tag/v30.0)** by [this](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40) commit.\n\n## Workaround\nExplicitly change the permissions of the created temporary directory after its creation.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.google.guava:guava:20.0\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-10237 guava 20.0: wiremock 2.8.0: com.google.guava","shortDescription":{"text":"Transitive Dependency: guava 20.0 from wiremock 2.8.0 (CVE-2018-10237 BDSA-2018-1358)"},"fullDescription":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 20.0  | 20.0-hal  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d560fcfd-01c5-44b8-89fe-ef65cdf9f96f)\n\n\n## Description\nServers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2018-1358](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-1358)([CVE-2018-10237](https://nvd.nist.gov/vuln/detail/CVE-2018-10237)) - Google Guava Vulnerable to Denial-of-Service via Unbounded Memory Allocation\n\n\n## Solution\nFixed in:\n* [**23.6.1**](https://github.com/google/guava/releases/tag/v23.6.1)  by [this](https://github.com/google/guava/commit/a81698a0525b6bcdecef3930aeed4db5aa7ab469) commit,\n* [**24.1.1**](https://github.com/google/guava/releases/tag/v24.1.1) by [this](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c) commit,\n* [**25.0**](https://github.com/google/guava/releases/tag/v25.0) by [this](https://github.com/google/guava/commit/f89ece5721b2f637fe754937ff1f3c86d80bb196) commit.\n\nThe latest stable releases are available [here](https://github.com/google/guava/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - com.google.guava:guava:20.0\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-39139 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39139 BDSA-2021-2581)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2581](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2581)([CVE-2021-39139](https://nvd.nist.gov/vuln/detail/CVE-2021-39139)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist of 'com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39146 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39146 BDSA-2021-2593)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2593](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2593)([CVE-2021-39146](https://nvd.nist.gov/vuln/detail/CVE-2021-39146)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.swing.MultiUIDefaults' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39148 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39148 BDSA-2021-2603)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2603](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2603)([CVE-2021-39148](https://nvd.nist.gov/vuln/detail/CVE-2021-39148)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.naming.Binding' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39144 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39144 BDSA-2021-2569)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2569](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2569)([CVE-2021-39144](https://nvd.nist.gov/vuln/detail/CVE-2021-39144)) - XStream Vulnerable to Arbitrary Command Execution via Incomplete Deserialization Blacklist of 'sun.tracing.*' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39141 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39141 BDSA-2021-2580)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2580](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2580)([CVE-2021-39141](https://nvd.nist.gov/vuln/detail/CVE-2021-39141)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist of 'com.sun.xml.internal.ws.spi.*' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26217 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2020-26217 BDSA-2020-3372)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2020-3372](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3372)([CVE-2020-26217](https://nvd.nist.gov/vuln/detail/CVE-2020-26217)) - Xstream Vulnerable to Remote Code Execution (RCE) via Incomplete Blacklist for Unmarshalling Specially Crafted Input\n\n\n## Solution\nFixed in **[1.4.14](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_14)** by [this](https://github.com/x-stream/xstream/commit/0fec095d534126931c99fd38e9c6d41f5c685c1a) commit.\n\nThe latest stable releases are available [here](https://github.com/x-stream/xstream/releases/).\n\n## Workaround\nThe vendor has supplied the following workarounds if you rely on the blacklisting feature and are unable to upgrade to **1.4.14**.\n\nFor version **1.4.13**\nAdd two lines to XStream's setup code:\n\u003e \n\u003e ```\n\u003e xstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\" });\n\u003e xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class });\n\u003e ```\n\u003e\nFor versions **1.4.7** to **1.4.12** deny at least the following types: javax.imageio.ImageIO$ContainsFilter, java.beans.EventHandler, java.lang.ProcessBuilder, java.lang.Void and void.\n\u003e```\n\u003e xstream.denyTypes(new String[]{ \"javax.imageio.ImageIO$ContainsFilter\" });\n\u003e xstream.denyTypes(new Class[]{ java.lang.ProcessBuilder.class, java.beans.EventHandler.class, java.lang.ProcessBuilder.class, java.lang.Void.class, void.class });\n\u003e ```\n\nFor versions **1.4.6** or below, register a converter to prevent the unmarshalling of the currently know critical types of the Java runtime.\n\u003e ```\n\u003e xstream.registerConverter(new Converter() {\n\u003e   public boolean canConvert(Class type) {\n\u003e     return type != null \u0026\u0026 (type == java.beans.EventHandler.class || type == java.lang.ProcessBuilder.class || type == java.lang.Void.class || void.class || type.getName().equals(\"javax.imageio.ImageIO$ContainsFilter\") || Proxy.isProxy(type));\n\u003e   }\n\u003e \n\u003e   public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n\u003e     throw new ConversionException(\"Unsupported type due to security reasons.\");\n\u003e   }\n\u003e \n\u003e   public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n\u003e     throw new ConversionException(\"Unsupported type due to security reasons.\");\n\u003e   }\n\u003e }, XStream.PRIORITY_LOW);\n\u003e ```\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2013-7285 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2013-7285 BDSA-2013-0046)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2013-0046](https://openhub.net/vulnerabilities/bdsa/BDSA-2013-0046)([CVE-2013-7285](https://nvd.nist.gov/vuln/detail/CVE-2013-7285)) - Xstream Vulnerable to Remote Code Execution (RCE) via Specially Crafted Input Stream\n\n\n## Solution\nFixed in version [**1.4.7**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_7) by [this](https://github.com/x-stream/xstream/commit/94666ae6dfe839410c73bdfeeb211374f04a2059) commit.\n\n## Workaround\nThe vendor supplies the following workaround:\n\n\"Users can register an own converter for dynamic proxies, the java.beans.EventHandler type or for the java.lang.ProcessBuilder type, that also protects against an attack for this special case:\n```\nxstream.registerConverter(new Converter() {\n  public boolean canConvert(Class type) {\n    return type != null \u0026\u0026 (type == java.beans.EventHandler || type == java.lang.ProcessBuilder || Proxy.isProxy(type));\n  }\n\n  public Object unmarshal(HierarchicalStreamReader reader, UnmarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n\n  public void marshal(Object source, HierarchicalStreamWriter writer, MarshallingContext context) {\n    throw new ConversionException(\"Unsupported type due to security reasons.\");\n  }\n}, XStream.PRIORITY_LOW);\n```\n\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39154 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39154 BDSA-2021-2573)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2573](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2573)([CVE-2021-39154](https://nvd.nist.gov/vuln/detail/CVE-2021-39154)) - XStream Vulnerable to Remote Code Execution (RCE) via Incomplete Deserialization Blacklist\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39147 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39147 BDSA-2021-2602)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2602](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2602)([CVE-2021-39147](https://nvd.nist.gov/vuln/detail/CVE-2021-39147)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'javax.naming.CompoundName' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39145 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39145 BDSA-2021-2590)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-2590](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2590)([CVE-2021-39145](https://nvd.nist.gov/vuln/detail/CVE-2021-39145)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'com.sun.org.apache.xpath.internal.objects.XString' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-29505 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-29505 BDSA-2021-1626)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-1626](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1626)([CVE-2021-29505](https://nvd.nist.gov/vuln/detail/CVE-2021-29505)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'sun.jndi.toolkit.dir.LazySearchEnumerationImpl' Type\n\n\n## Solution\nFixed in [**1.4.17**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/24fac82191292c6ae25f94508d28b9823f83624f) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21345 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21345 BDSA-2021-0728)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0728](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0728)([CVE-2021-21345](https://nvd.nist.gov/vuln/detail/CVE-2021-21345)) - XStream Vulnerable to Arbitrary Command Execution via Deserialization of 'com.sun.corba.se.impl.activation.ServerTableEntry' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-77](https://cwe.mitre.org/data/definitions/77.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-77"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21351 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21351 BDSA-2021-0721)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0721](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0721)([CVE-2021-21351](https://nvd.nist.gov/vuln/detail/CVE-2021-21351)) - Xstream Vulnerable to Remote Code Execution (RCE) via Input Stream Manipulation\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\n## Workaround\nOfficial workarounds for various versions are available [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21349 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21349 BDSA-2021-0731)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0731)([CVE-2021-21349](https://nvd.nist.gov/vuln/detail/CVE-2021-21349)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Crafted Input Stream\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21350 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21350 BDSA-2021-0724)"},"fullDescription":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0724](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0724)([CVE-2021-21350](https://nvd.nist.gov/vuln/detail/CVE-2021-21350)) - Xstream Vulnerable to Remote Code Execution (RCE) via Input Stream Containing 'PriorityQueue'\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\n## Workaround\nOfficial workarounds for various versions are available [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39149 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39149 BDSA-2021-2565)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2565](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2565)([CVE-2021-39149](https://nvd.nist.gov/vuln/detail/CVE-2021-39149)) - XStream Vulnerable to Remote Code Execution (RCE) via Unsafe 'CompositeInvocationHandlerImpl' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21342 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21342 BDSA-2021-0736)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0736](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0736)([CVE-2021-21342](https://nvd.nist.gov/vuln/detail/CVE-2021-21342)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Deserialization of 'DataTransferer$IndexOrderComparator' and 'URLDataSource' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39151 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39151 BDSA-2021-2568)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2568](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2568)([CVE-2021-39151](https://nvd.nist.gov/vuln/detail/CVE-2021-39151)) - XStream Vulnerable to Remote Code Execution (RCE) via Unsafe 'KeyStoreResolver$KeyStoreIterator' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21347 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21347 BDSA-2021-0722)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0722](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0722)([CVE-2021-21347](https://nvd.nist.gov/vuln/detail/CVE-2021-21347)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'JavacProcessingEnvironment$NameProcessIterator' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26259 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2020-26259 BDSA-2020-3780)"},"fullDescription":{"text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-3780](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3780)([CVE-2020-26259](https://nvd.nist.gov/vuln/detail/CVE-2020-26259)) - XStream Vulnerable to Arbitrary File Deletion via Unmarshalling of Specially Crafted Input\n\n\n## Solution\nFixed in [**1.4.15**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_15) by [this](https://github.com/x-stream/xstream/commit/0bcbf50126a62dfcd65f93a0da0c6d1ae92aa738) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers who configured the white listing approach of the Security Framework, without the affected classes on the whitelist, are not vulnerable.\n\nFor users of the blacklisting approach of the security framework, the vendor supplies a comprehensive workaround [here](https://x-stream.github.io/CVE-2020-26259.html).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21344 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21344 BDSA-2021-0730)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0730](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0730)([CVE-2021-21344](https://nvd.nist.gov/vuln/detail/CVE-2021-21344)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of JAXB 'Accessor$GetterSetterReflection' and 'com.sun.rowset.JdbcRowSetImpl' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types.\n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-26258 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2020-26258 BDSA-2020-3787)"},"fullDescription":{"text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-3787](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3787)([CVE-2020-26258](https://nvd.nist.gov/vuln/detail/CVE-2020-26258)) - XStream Vulnerable to Information Disclosure via Server-Side Request Forgery through Unmarshalling of Specially Crafted Input\n\n\n## Solution\nFixed in [**1.4.15**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_15) by [this](https://github.com/x-stream/xstream/commit/6740c04b217aef02d44fba26402b35e0f6f493ce) commit.\n\n## Workaround\nFor users who do not use the [recommended](https://x-stream.github.io/security.html#framework) white listing approach of the security framework, the vendor has supplied a comprehensive workaround involving the blacklist approach [here](https://x-stream.github.io/CVE-2020-26258.html).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39153 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39153 BDSA-2021-2576)"},"fullDescription":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2576](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2576)([CVE-2021-39153](https://nvd.nist.gov/vuln/detail/CVE-2021-39153)) - XStream is Vulnerable to Remote Code Execution (RCE) via Dangerous 'PackageWriter' Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-3674 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2016-3674 BDSA-2016-0027)"},"fullDescription":{"text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2016-0027](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-0027)([CVE-2016-3674](https://nvd.nist.gov/vuln/detail/CVE-2016-3674)) - XStream Vulnerable to XML Entity Entity Expansion via Crafted Document Type Definition\n\n\n## Solution\nThis vulnerability is fixed in version [**1.4.9**](http://repo.maven.apache.org/maven2/com/thoughtworks/xstream/xstream/1.4.9/).\n\n**Note**: Applications using one of the following parser implementations are still vulnerable:\n* `DOM` implementation from Java 5 runtime and below\n* `StAX` implementation from Java 6 runtime and below\n* `StAX` implementation from BEA (old reference implementation)\n* `XOM`\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor has recommended [here](https://x-stream.github.io/CVE-2016-3674.html) that users can opt to use one of the XML Pull Parser implementations in order to mitigate this issue.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\nCommon Weakness Enumeration: [CWE-776](https://cwe.mitre.org/data/definitions/776.html)\n\n","text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-611","external/cwe/cwe-776"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-21346 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21346 BDSA-2021-0726)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0726](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0726)([CVE-2021-21346](https://nvd.nist.gov/vuln/detail/CVE-2021-21346)) - XStream Vulnerable to Arbitrary Code Execution via Deserialization of 'sun.swing.SwingLazyValue' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39150 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39150 BDSA-2021-2586)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2586](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2586)([CVE-2021-39150](https://nvd.nist.gov/vuln/detail/CVE-2021-39150)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Unsafe SEI Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39152 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39152 BDSA-2021-2587)"},"fullDescription":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-2587](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2587)([CVE-2021-39152](https://nvd.nist.gov/vuln/detail/CVE-2021-39152)) - XStream Vulnerable to Server-Side Request Forgery (SSRF) via Unsafe Nashorn Class Deserialization\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/releases).\n\n## Workaround\nUsers can manually prevent the deserialization of problematic classes by following the [guidance](https://x-stream.github.io/security.html#workaround) provided by the vendor.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-918](https://cwe.mitre.org/data/definitions/918.html)\n\n","text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-918"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-39140 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-39140 BDSA-2021-2582)"},"fullDescription":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2582](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2582)([CVE-2021-39140](https://nvd.nist.gov/vuln/detail/CVE-2021-39140)) - XStream Vulnerable to Denial of Service (DoS) via Incomplete Deserialization Blacklist of 'sun.reflect.annotation.AnnotationInvocationHandler' Classes\n\n\n## Solution\nFixed in version [**1.4.18**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_18) by [this](https://github.com/x-stream/xstream/commit/652d72f38b33938c54fd3b2ef626cb7dce38001c) commit.\n\nThe latest releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nClasses that should be blacklisted for various versions of XStream are listed [here](https://x-stream.github.io/security.html#workaround).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-502","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21341 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21341 BDSA-2021-0737)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0737](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0737)([CVE-2021-21341](https://nvd.nist.gov/vuln/detail/CVE-2021-21341)) - XStream Vulnerable to Denial-of-Service (DoS) via Deserialization of 'java.io.ByteArrayInputStream' Type\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-43859 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-43859 BDSA-2022-0291)"},"fullDescription":{"text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0291](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0291)([CVE-2021-43859](https://nvd.nist.gov/vuln/detail/CVE-2021-43859)) - XStream Vulnerable to Denial-of-Service (DoS) via Object Injection\n\n\n## Solution\nFixed in [**1.4.19**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_19) by [this](https://github.com/x-stream/xstream/commit/e8e88621ba1c85ac3b8620337dd672e0c0c3a846) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nPer the Vendor [workaround](https://x-stream.github.io/CVE-2021-43859.html):\n\n\u003e If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:\n\u003e ```\n\u003e XStream xstream = new XStream();\n\u003e xstream.setMode(XStream.NO_REFERENCES);\n\u003e ```\n\u003e If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n\u003e ```\n\u003e XStream xstream = new XStream();\n\u003e xstream.denyTypes(new Class[]{\n\u003e \tjava.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n\u003e });\n\u003e ```\n\u003e \n\u003e Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time:\n\u003e \n\u003e ```\n\u003e xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n\u003e xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n\u003e ```\n\u003e However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2017-7957 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2017-7957 BDSA-2017-0661)"},"fullDescription":{"text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nA flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2017-0661](https://openhub.net/vulnerabilities/bdsa/BDSA-2017-0661)([CVE-2017-7957](https://nvd.nist.gov/vuln/detail/CVE-2017-7957)) - XStream (De)Serialization Denial of Service\n\n\n## Solution\nUpgrade to version **1.4.10** or later.\n\n## Workaround\nXStream contains since version 1.4.7 a security framework to prevent an \nattack described in CVE-2013-7285. This framework can also be used to \nsuppress the current vulnerability by setting:\n\nxstream.denyTypes(void.class, Void.class);\n\nUsers of older XStream releases can register an own converter for the 'void' \ntype, that also protects against this attack:\n\nxstream.registerConverter(new Converter() {\n  public boolean canConvert(Class type) {\n    return Void.class == type || void.class == type;\n  }\n  public Object unmarshal(HierarchicalStreamReader reader, \nUnmarshallingContext context) {\n    throw new ConversionException(\"Type void cannot have an instance\");\n  }\n  public void marshal(Object source, HierarchicalStreamWriter writer, \nMarshallingContext context) {\n    throw new ConversionException(\"Type void cannot have an instance\");\n  }\n}, XStream.PRIORITY_VERY_HIGH);\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41966 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2022-41966 BDSA-2022-3693)"},"fullDescription":{"text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-3693](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3693)([CVE-2022-41966](https://nvd.nist.gov/vuln/detail/CVE-2022-41966)) - XStream Vulnerable to Denial-of-Service (DoS) via Stack Overflow in Hash Processing Functionality\n\n\n## Solution\nFixed in version [**1.4.20**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_20) by [this](https://github.com/x-stream/xstream/commit/e9151f221b4969fb15b1e946d5d61dcdd459a391) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n## Workaround\nThe vendor has stated [here](https://github.com/x-stream/xstream/security/advisories/GHSA-j563-grx4-pjpv) that the following workaround can be implemented:\n\n\u003e The attack uses the hash code implementation for collections and maps to force recursive hash calculation causing a stack overflow. Following types of the Java runtime are affected:\n\u003e\n\u003e * java.util.HashMap\n\u003e * java.util.HashSet\n\u003e * java.util.Hashtable\n\u003e * java.util.LinkedHashMap\n\u003e * java.util.LinkedHashSet\n\u003e Other third party collection implementations that use their element's hash code may also be affected\n\u003e A simple solution is to catch the StackOverflowError in the client code calling XStream.\n\u003e \n\u003e If your object graph does not use referenced elements at all, you may simply set the NO_REFERENCE mode:\n\u003e \n\u003e XStream xstream = new XStream();\n\u003e xstream.setMode(XStream.NO_REFERENCES);\n\u003e If your object graph contains neither a Hashtable, HashMap nor a HashSet (or one of the linked variants of it) then you can use the security framework to deny the usage of these types:\n\u003e \n\u003e XStream xstream = new XStream();\n\u003e xstream.denyTypes(new Class[]{\n\u003e  java.util.HashMap.class, java.util.HashSet.class, java.util.Hashtable.class, java.util.LinkedHashMap.class, java.util.LinkedHashSet.class\n\u003e });\n\u003e Unfortunately these types are very common. If you only use HashMap or HashSet and your XML refers these only as default map or set, you may additionally change the default implementation of java.util.Map and java.util.Set at unmarshalling time::\n\u003e \n\u003e xstream.addDefaultImplementation(java.util.TreeMap.class, java.util.Map.class);\n\u003e xstream.addDefaultImplementation(java.util.TreeSet.class, java.util.Set.class);\n\u003e However, this implies that your application does not care about the implementation of the map and all elements are comparable.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n","text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-674"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-40151 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2022-40151 BDSA-2022-2580)"},"fullDescription":{"text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2580](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2580)([CVE-2022-40151](https://nvd.nist.gov/vuln/detail/CVE-2022-40151)) - XStream Vulnerable to Denial-of-Service (DoS) via Stack Overflow during XML Data Serialization\n\n\n## Solution\nFixed in version [**1.4.20**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_20) by [this](https://github.com/x-stream/xstream/commit/e9151f221b4969fb15b1e946d5d61dcdd459a391) commit.\n\nThe latest stable releases can be found [here](https://github.com/x-stream/xstream/tags).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-121](https://cwe.mitre.org/data/definitions/121.html)\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-674](https://cwe.mitre.org/data/definitions/674.html)\n\n","text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-121","external/cwe/cwe-502","external/cwe/cwe-674"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21348 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21348 BDSA-2021-0735)"},"fullDescription":{"text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0735](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0735)([CVE-2021-21348](https://nvd.nist.gov/vuln/detail/CVE-2021-21348)) - Xstream Vulnerable to Regular Expression Denial-of-Service (ReDoS) via Crafted Input Stream\n\n\n## Solution\nFixed in **[1.4.16](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16)** by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](https://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-185","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-21343 xstream 1.4.5: com.thoughtworks.xstream","shortDescription":{"text":"Direct Dependency: xstream 1.4.5 (CVE-2021-21343 BDSA-2021-0732)"},"fullDescription":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| xstream 1.4.5  | 1.4.20  | 1.4.20 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=a15c9ae0-8262-43f3-a281-3fa59003b486)\n\n\n## Description\nXStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0732](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0732)([CVE-2021-21343](https://nvd.nist.gov/vuln/detail/CVE-2021-21343)) - XStream Vulnerable to Arbitrary File Deletion via Deserialization of 'DataTransferer$IndexOrderComparator' and 'java.io.FileInputStream' Types\n\n\n## Solution\nFixed in [**1.4.16**](https://github.com/x-stream/xstream/releases/tag/XSTREAM_1_4_16) by [this](https://github.com/x-stream/xstream/commit/d5e51177634afea7213b9dc2d21f101d2e258db9) commit.\n\nThe latest stable releases are available [here](http://x-stream.github.io/download.html).\n\n## Workaround\nThe vendor recommends the use of XStream's security framework to implement a whitelist for allowed types. \n\nThe vendor has made available a set of [workarounds](https://x-stream.github.io/security.html#workaround) detailing this feature.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-21724 postgresql 42.2.8: org.postgresql","shortDescription":{"text":"Direct Dependency: postgresql 42.2.8 (CVE-2022-21724 BDSA-2022-1285)"},"fullDescription":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| postgresql 42.2.8  | 42.6.0  | 42.6.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ee6cfb7f-838c-43cc-8698-59bdd61fb7b5)\n\n\n## Description\npgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1285](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1285)([CVE-2022-21724](https://nvd.nist.gov/vuln/detail/CVE-2022-21724)) - pgjdbc Vulnerable to Remote Code Execution via Insufficient Plugin Class Validation\n\n\n## Solution\nFixed in version [**42.3.2-rc2**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.3.2-rc2) by [this](https://github.com/pgjdbc/pgjdbc/commit/f4d0ed69c0b3aae8531d83d6af4c57f22312c813) commit, and in [**42.2.25-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.2.25-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/8a363a7c0989ef8a8f45bb055b4003f758ceabd5) commit.\n\nThe latest stable releases can be found [here](https://github.com/pgjdbc/pgjdbc/tags).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-665](https://cwe.mitre.org/data/definitions/665.html)\n\n","text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-665"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-13692 postgresql 42.2.8: org.postgresql","shortDescription":{"text":"Direct Dependency: postgresql 42.2.8 (CVE-2020-13692 BDSA-2020-1318)"},"fullDescription":{"text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| postgresql 42.2.8  | 42.6.0  | 42.6.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ee6cfb7f-838c-43cc-8698-59bdd61fb7b5)\n\n\n## Description\nPgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-1318](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1318)([CVE-2020-13692](https://nvd.nist.gov/vuln/detail/CVE-2020-13692)) - PostgreSQL JDBC Driver PgJDBC Vulnerable to XML External Entities (XXE) Attacks via Insecure Default Configuration of XML Parser\n\n\n## Solution\nFixed in version [**42.2.13**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.2.13) by [this](https://github.com/pgjdbc/pgjdbc/commit/14b62aca4764d496813f55a43d050b017e01eb65) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-611](https://cwe.mitre.org/data/definitions/611.html)\n\n","text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-611"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-26520 postgresql 42.2.8: org.postgresql","shortDescription":{"text":"Direct Dependency: postgresql 42.2.8 (CVE-2022-26520 BDSA-2022-2080)"},"fullDescription":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| postgresql 42.2.8  | 42.6.0  | 42.6.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ee6cfb7f-838c-43cc-8698-59bdd61fb7b5)\n\n\n## Description\npgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-2080](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2080)([CVE-2022-26520](https://nvd.nist.gov/vuln/detail/CVE-2022-26520)) - pgjdbc Vulnerable to Remote Code Execution (RCE) via Arbitrary File Write in Connection Properties Settings\n\n\n## Solution\nFixed in [**42.3.3-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.3.3-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/12c7fb40f761d69d64ced158684af2ccef279b48) commit and [this](https://github.com/pgjdbc/pgjdbc/commit/f6d47034a4ce292e1a659fa00963f6f713117064) commit.\n\nThe latest stable releases can be found [here](https://github.com/pgjdbc/pgjdbc/releases).\n\n## Workaround\nThe vendor suggests sanitizing the inputs to the driver as a mitigation.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-94](https://cwe.mitre.org/data/definitions/94.html)\n\n","text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-94"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-31197 postgresql 42.2.8: org.postgresql","shortDescription":{"text":"Direct Dependency: postgresql 42.2.8 (CVE-2022-31197 BDSA-2022-2702)"},"fullDescription":{"text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| postgresql 42.2.8  | 42.6.0  | 42.6.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ee6cfb7f-838c-43cc-8698-59bdd61fb7b5)\n\n\n## Description\nThe PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2702](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2702)([CVE-2022-31197](https://nvd.nist.gov/vuln/detail/CVE-2022-31197)) - PostgreSQL JDBC Driver Vulnerable to SQL Injection via 'java.sql.ResultRow.refreshRow' Implementation\n\n\n## Solution\nFixed in:\n* [**42.2.26-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.2.26-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/b5ee575b7d6e0918a58fe533f6c50b0c7e9f73c0) commit,\n* [**42.3.7-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.3.7-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/0afaa71d5254804f8bab7caab96735c5f7d11aa1) commit,\n* [**42.4.1-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.4.1-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/739e599d52ad80f8dcd6efedc6157859b1a9d637) commit.\n\n## Workaround\nIf upgrading to a fixed version cannot be performed immediately, the vendor recommends the following workaround [here](https://github.com/pgjdbc/pgjdbc/security/advisories/GHSA-r38f-c4h4-hqq2):\n\u003e Check that you are not using the `ResultSet.refreshRow()` method.\n\u003e \n\u003e If you are, ensure that the code that executes that method does not connect to a database that is controlled by an unauthenticated or malicious user. If your application only connects to its own database with a fixed schema with no DDL permissions, then you will not be affected by this vulnerability as it requires a maliciously crafted schema.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-89](https://cwe.mitre.org/data/definitions/89.html)\n\n","text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-89"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-41946 postgresql 42.2.8: org.postgresql","shortDescription":{"text":"Direct Dependency: postgresql 42.2.8 (CVE-2022-41946 BDSA-2022-3347)"},"fullDescription":{"text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| postgresql 42.2.8  | 42.6.0  | 42.6.0 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=ee6cfb7f-838c-43cc-8698-59bdd61fb7b5)\n\n\n## Description\nPostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-3347](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3347)([CVE-2022-41946](https://nvd.nist.gov/vuln/detail/CVE-2022-41946)) - PostgreSQL JDBC Driver Vulnerable to Information Disclosure via TemporaryFolder Files\n\n\n## Solution\nFixed in versions:\n* [**42.5.1-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.5.1-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/9008dc9aade6dbfe4efafcd6872ebc55f4699cf5) commit.\n* [**42.4.3-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.4.3-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/34855cffb9079edf95cf77930f3e3b73f6a1b139) commit.\n* [**42.3.8-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.3.8-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/e73c6b6b53ff11bc0bd06c44130a880d3bf77c55) commit.\n* [**42.2.27-rc1**](https://github.com/pgjdbc/pgjdbc/releases/tag/REL42.2.27-rc1) by [this](https://github.com/pgjdbc/pgjdbc/commit/91b8c2ca600f82d2ec47c3fb54ca2036b000e320) commit.\n\nThe latest stable releases can be found [here](https://github.com/pgjdbc/pgjdbc/releases).\n\n## Workaround\nThe vendor has issued the following workaround for users running Java 1.6 and lower:\n\n\"Specifying the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-377](https://cwe.mitre.org/data/definitions/377.html)\n\n","text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-377"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3731 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Direct Dependency: spring-boot-starter-test 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=5399a99f-494a-4a0c-9d1c-917ee3a610d7)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27216 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-xml 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-xml 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=cc55249a-3ac1-4a00-a7e9-6181739b4cd9)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-webapp:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-xml:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-2976 guava 18.0: com.google.guava","shortDescription":{"text":"Direct Dependency: guava 18.0 (CVE-2023-2976 BDSA-2016-1748)"},"fullDescription":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 18.0  | Not available  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aa0c698a-23a9-471a-8d62-2688ff06eff8)\n\n\n## Description\nGuava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2016-1748](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-1748)([CVE-2023-2976](https://nvd.nist.gov/vuln/detail/CVE-2023-2976)) - Guava Vulnerable to Authorization Bypass via Insecure Temporary File Creation in 'FileBackedOutputStream' Class\n\n\n## Solution\nFixed in version [**32.0.0**](https://github.com/google/guava/releases/tag/v32.0.0) by [this](https://github.com/google/guava/commit/feb83a1c8fd2e7670b244d5afd23cba5aca43284) commit.\n\nIt should be noted that this patch broke the functionality of `FileBackedOutputStream` and `Files.createTempDir` on Windows. The vendor recommends upgrading to [**32.0.1**](https://github.com/google/guava/releases/tag/v32.0.1), which contains a patch that rectifies this.\n\nThe latest stable releases can be found [here](https://github.com/google/guava/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-378](https://cwe.mitre.org/data/definitions/378.html)\n\n","text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-378"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-8908 guava 18.0: com.google.guava","shortDescription":{"text":"Direct Dependency: guava 18.0 (CVE-2020-8908 BDSA-2020-3736)"},"fullDescription":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 18.0  | Not available  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aa0c698a-23a9-471a-8d62-2688ff06eff8)\n\n\n## Description\nGuava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3736](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3736)([CVE-2020-8908](https://nvd.nist.gov/vuln/detail/CVE-2020-8908)) - Guava Vulnerable to Local Information Disclosure via Insecure Permissions on Temporary Directory Creation\n\n\n## Solution\nFixed in **[30.0](https://github.com/google/guava/releases/tag/v30.0)** by [this](https://github.com/google/guava/commit/fec0dbc4634006a6162cfd4d0d09c962073ddf40) commit.\n\n## Workaround\nExplicitly change the permissions of the created temporary directory after its creation.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-10237 guava 18.0: com.google.guava","shortDescription":{"text":"Direct Dependency: guava 18.0 (CVE-2018-10237 BDSA-2018-1358)"},"fullDescription":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| guava 18.0  | Not available  | 32.1.3-jre |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=aa0c698a-23a9-471a-8d62-2688ff06eff8)\n\n\n## Description\nServers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2018-1358](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-1358)([CVE-2018-10237](https://nvd.nist.gov/vuln/detail/CVE-2018-10237)) - Google Guava Vulnerable to Denial-of-Service via Unbounded Memory Allocation\n\n\n## Solution\nFixed in:\n* [**23.6.1**](https://github.com/google/guava/releases/tag/v23.6.1)  by [this](https://github.com/google/guava/commit/a81698a0525b6bcdecef3930aeed4db5aa7ab469) commit,\n* [**24.1.1**](https://github.com/google/guava/releases/tag/v24.1.1) by [this](https://github.com/google/guava/commit/7ec8718f1e6e2814dabaa4b9f96b6b33a813101c) commit,\n* [**25.0**](https://github.com/google/guava/releases/tag/v25.0) by [this](https://github.com/google/guava/commit/f89ece5721b2f637fe754937ff1f3c86d80bb196) commit.\n\nThe latest stable releases are available [here](https://github.com/google/guava/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-17521 groovy 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","shortDescription":{"text":"Transitive Dependency: groovy 2.5.8 from rest-assured 3.3.0 (CVE-2020-17521 BDSA-2020-3660)"},"fullDescription":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| rest-assured 3.3.0  | Not available  | 5.3.2 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| groovy 2.5.8  | 2.5.23  | 3.0.19 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=7d865c6d-e4b7-4dcd-ad74-702f847c9a22)\n\n\n## Description\nApache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3660](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3660)([CVE-2020-17521](https://nvd.nist.gov/vuln/detail/CVE-2020-17521)) - Apache Groovy Vulnerable to Privilege Escalation and Information Exposure via Insecure 'createTempDir' Method\n\n\n## Solution\nFixed in:\n* [**2.4.21**](https://github.com/apache/groovy/releases/tag/GROOVY_2_4_21) by [this](https://github.com/apache/groovy/commit/4e418d4a34c973a7ec1e822552103043ac13780e) commit,\n* [**2.5.14**](https://github.com/apache/groovy/releases/tag/GROOVY_2_5_14) by [this](https://github.com/apache/groovy/commit/98dc5d713926cd81b006c510a1546ccd520fe17f) commit,\n* [**3.0.7**](https://github.com/apache/groovy/releases/tag/GROOVY_3_0_7) by [this](https://github.com/apache/groovy/commit/f069c35c4bbaf68547c76381509d59840a7ed32d) commit,\n* [**4.0.0-alpha-2**](https://github.com/apache/groovy/releases/tag/GROOVY_4_0_0_ALPHA_2) by [this](https://github.com/apache/groovy/commit/bcbe5c4c76db83736166530647c024ac1e47ef28) commit.\n\nNote: the vendor states that the fix for **2.4**, when Groovy is running on a pre-JDK7 version of the JDK, eliminates the risk of privilege escalation but still leaves the potential for sensitive information leakage. The vendor recommends applying the following mitigation for **2.4**/pre-JDK7 users:\n\u003e Set the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-integration-tests:v8.1.0:-maven\n    - io.rest-assured:rest-assured:3.3.0\n        - org.codehaus.groovy:groovy:2.5.8\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-3109)"},"fullDescription":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-3109](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-3109) - Spring Security Vulnerable to Privilege Escalation via Specially Crafted Request Causing OAuth2 Server Access Token Response With Empty Scope List\n\n\n\n## Solution\nFixed in versions [**5.7.5**](https://github.com/spring-projects/spring-security/releases/tag/5.7.5) and [**5.6.9**](https://github.com/spring-projects/spring-security/releases/tag/5.6.9) by [this](https://github.com/spring-projects/spring-security/commit/75004587a419a96d18909030b20c6b16b226ecbe) commit..\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-security/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\n\n","text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22978 BDSA-2022-1369)"},"fullDescription":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-1369](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1369)([CVE-2022-22978](https://nvd.nist.gov/vuln/detail/CVE-2022-22978)) - Spring Security Vulnerable to Authorization Bypass via Improper Request Validation in 'RegexRequestMatcher' Class\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-185](https://cwe.mitre.org/data/definitions/185.html)\n\n","text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-185"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2023-1825)"},"fullDescription":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-1825](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1825) - Spring Security Vulnerable to Security Mechanism Bypass in Spring WebFlux via Un-Prefixed Double Wildcard Pattern\n\n\n\n## Solution\nFixed in versions:\n- [**5.6.12**](https://github.com/spring-projects/spring-security/releases/tag/5.6.12) by [this](https://github.com/spring-projects/spring-security/commit/7813a9ba26e53fe54e4d2ec6eb076126e8550780) commit,\n- [**5.7.10**](https://github.com/spring-projects/spring-security/releases/tag/5.7.10) by [this](https://github.com/spring-projects/spring-security/commit/fe9bc26bdcfea2a40c93e3db98e649bfb0edaab2) commit,\n- [**5.8.5**](https://github.com/spring-projects/spring-security/releases/tag/5.8.5) by [this](https://github.com/spring-projects/spring-security/commit/a939f17890a9415604ecf81bc236d3e969e2d9b4) commit,\n- [**6.0.5**](https://github.com/spring-projects/spring-security/releases/tag/6.0.5) by [this](https://github.com/spring-projects/spring-security/commit/cbef118026e38005109158dd35e79038af2bb913) commit,\n- [**6.1.2**](https://github.com/spring-projects/spring-security/releases/tag/6.1.2) by [this](https://github.com/spring-projects/spring-security/commit/aaa31312bd74c637ce9549ed68cab33214008bf5) commit.\n\nThe above fixed versions require Spring Framework versions:\n- [**5.2.25**](https://github.com/spring-projects/spring-framework/releases/tag/5.2.25),\n- [**5.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/5.3.29),\n- [**6.0.11**](https://github.com/spring-projects/spring-framework/releases/tag/6.0.11).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-285](https://cwe.mitre.org/data/definitions/285.html)\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-285","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5407 BDSA-2020-1092)"},"fullDescription":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1092](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1092)([CVE-2020-5407](https://nvd.nist.gov/vuln/detail/CVE-2020-5407)) - Spring Security Vulnerable to Authentication Abuse via Signature Wrapping Attacks with SAML Responses\n\n\n## Solution\nFixed in **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/0db9cd075d621118cdff303f402d25425ec81bbc) commit and **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)** by [this](https://github.com/spring-projects/spring-security/commit/69b1bc62ffe7c1e1bbf508951efa1e0235954198) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5408 BDSA-2020-1094)"},"fullDescription":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1094](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1094)([CVE-2020-5408](https://nvd.nist.gov/vuln/detail/CVE-2020-5408)) - Spring Security Vulnerable to Information Exposure via Insecure Text Encryptor\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-security/commit/db155b30941536e6c33408a20f62e790b2c78a97) commit in:\n* **[5.3.2](https://github.com/spring-projects/spring-security/releases/tag/5.3.2.RELEASE)**\n* **[5.2.4](https://github.com/spring-projects/spring-security/releases/tag/5.2.4.RELEASE)**\n* **[5.1.10](https://github.com/spring-projects/spring-security/releases/tag/5.1.10.RELEASE)**\n* **[5.0.16](https://github.com/spring-projects/spring-security/releases/tag/5.0.16.RELEASE)**\n* **[4.2.16](https://github.com/spring-projects/spring-security/releases/tag/4.2.16.RELEASE)**\n\n## Workaround\nIf upgrading to a fixed version cannot be performed immediately, users should discontinue use of the function `Encryptors#queryableText(CharSequence, CharSequence)` and look to their data store for a secure mechanism to query encrypted data.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-329](https://cwe.mitre.org/data/definitions/329.html)\n\n","text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-329"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22119 BDSA-2021-2310)"},"fullDescription":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2310](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2310)([CVE-2021-22119](https://nvd.nist.gov/vuln/detail/CVE-2021-22119)) - Spring Security Vulnerable to Denial-of-Service (DoS) via Uncontrolled Resource Consumption in Authorization Request Functionality\n\n\n## Solution\nFixed in:\n* **[5.5.1](https://github.com/spring-projects/spring-security/releases/tag/5.5.1)**\n* **[5.4.7](https://github.com/spring-projects/spring-security/releases/tag/5.4.7)**\n* **[5.3.10](https://github.com/spring-projects/spring-security/releases/tag/5.3.10.RELEASE)**\n* **[5.2.11](https://github.com/spring-projects/spring-security/releases/tag/5.2.11.RELEASE)**\n\nThe latest stable releases are also available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22976 BDSA-2022-1370)"},"fullDescription":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1370](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1370)([CVE-2022-22976](https://nvd.nist.gov/vuln/detail/CVE-2022-22976)) - Spring Security Vulnerable to Weakened Bcrypt Hashing via Integer Overflow in 'BCryptPasswordEncoder' Component\n\n\n## Solution\nFixed in versions:\n* [**5.7.0**](https://github.com/spring-projects/spring-security/releases/tag/5.7.0)\n* [**5.6.4**](https://github.com/spring-projects/spring-security/releases/tag/5.6.4)\n* [**5.5.7**](https://github.com/spring-projects/spring-security/releases/tag/5.5.7)\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-security/releases).\n\n## Workaround\nThe vendor has stated [here](https://tanzu.vmware.com/security/cve-2022-22976) that the following workaround can be implemented:\n\n\u003e Update your BCryptPasswordEncoder to use a lower number of rounds.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\n\n","text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","shortDescription":{"text":"Transitive Dependency: spring-security-core 5.2.1.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22112 BDSA-2021-0417)"},"fullDescription":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-core 5.2.1.RELEASE  | 5.8.8  | 6.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=254f3218-2470-4fec-ba76-2fe5d837e044)\n\n\n## Description\nSpring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0417](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0417)([CVE-2021-22112](https://nvd.nist.gov/vuln/detail/CVE-2021-22112)) - Spring Security Vulnerable to Privilege Escalation via 'SecurityContext' State Mishandling\n\n\n## Solution\nFixed in:\n* [**5.4.4**](https://github.com/spring-projects/spring-security/releases/tag/5.4.4) by [this](https://github.com/spring-projects/spring-security/commit/c72a6fac04853912a4b7caad5f0500f2aace5a79) commit.\n* [**5.3.8**](https://github.com/spring-projects/spring-security/releases/tag/5.3.8.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/9a49a8695fd7fd6ab5e8d31ba1fae00dead1f643) commit.\n* [**5.2.9**](https://github.com/spring-projects/spring-security/releases/tag/5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-security/commit/7cab7b06c51ea885dd0d07ff26b135dd3afce1d1) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-security/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework.security:spring-security-core:5.2.1.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-265](https://cwe.mitre.org/data/definitions/265.html)\n\n","text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-265"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-11023 jquery 3.2.1: org.webjars","shortDescription":{"text":"Direct Dependency: jquery 3.2.1 (CVE-2020-11023 BDSA-2020-0964)"},"fullDescription":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jquery 3.2.1  | 3.7.1  | 3.7.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6df4cd5-86a9-4970-86ac-b6cf1cbeceb7)\n\n\n## Description\nIt was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0964](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0964)([CVE-2020-11023](https://nvd.nist.gov/vuln/detail/CVE-2020-11023)) - jQuery Vulnerable to Cross-Site Scripting (XSS) via '\u003coption\u003e' Elements in DOM Manipulation Methods\n\n\n## Solution\nFixed in [**3.5.0**](https://github.com/jquery/jquery/releases/tag/3.5.0) by [this](https://github.com/jquery/jquery/commit/966a70909019aa09632c87c0002c522fa4a1e30e) commit.\n\n## Workaround\nTo work around this issue the vendor suggests using `DOMPurify` plugin with its `SAFE_FOR_JQUERY` option to sanitize the HTML string before passing it to a jQuery method.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html)\n\n","text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-80"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-23064 jquery 3.2.1: org.webjars","shortDescription":{"text":"Direct Dependency: jquery 3.2.1 (CVE-2020-23064 BDSA-2020-4841)"},"fullDescription":{"text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jquery 3.2.1  | 3.7.1  | 3.7.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6df4cd5-86a9-4970-86ac-b6cf1cbeceb7)\n\n\n## Description\njQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-4841](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4841)([CVE-2020-23064](https://nvd.nist.gov/vuln/detail/CVE-2020-23064)) - jQuery Vulnerable to Cross-Site Scripting (XSS) via '\u003coption\u003e' Elements in DOM Manipulation Methods\n\n\n## Solution\nFixed in [**3.5.0**](https://github.com/jquery/jquery/releases/tag/3.5.0) by [this](https://github.com/jquery/jquery/commit/966a70909019aa09632c87c0002c522fa4a1e30e) commit.\n\nThe latest stable releases are available [here](https://github.com/jquery/jquery/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html)\n\n","text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-80"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-11022 jquery 3.2.1: org.webjars","shortDescription":{"text":"Direct Dependency: jquery 3.2.1 (CVE-2020-11022 BDSA-2020-0686)"},"fullDescription":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jquery 3.2.1  | 3.7.1  | 3.7.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6df4cd5-86a9-4970-86ac-b6cf1cbeceb7)\n\n\n## Description\nIt was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0686](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0686)([CVE-2020-11022](https://nvd.nist.gov/vuln/detail/CVE-2020-11022)) - jQuery Vulnerable to Cross-Site Scripting (XSS) via 'jQuery.htmlPrefilter' Method\n\n\n## Solution\nFixed in [**3.5.0**](https://github.com/jquery/jquery/releases/tag/3.5.0) by [this](https://github.com/jquery/jquery/commit/1d61fd9407e6fbe82fe55cb0b938307aa0791f77) commit.\n\nThe latest stable releases are available [here](https://jquery.com/download/).\n\n## Workaround\nIf the old behaviour of `jQuery.htmlPrefilter` in jQuery **3.5.0** is required nonetheless, the vendor advises using `jQuery.UNSAFE_restoreLegacyHtmlPrefilter` from `jQuery Migrate` **3.2.0**. Since this reverses the security fix, it is also recommended to use `DOMPurify` plugin's `sanitize` method with `SAFE_FOR_JQUERY` set to `True` to properly sanitize user's HTML input again.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-80](https://cwe.mitre.org/data/definitions/80.html)\n\n","text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-80"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-11358 jquery 3.2.1: org.webjars","shortDescription":{"text":"Direct Dependency: jquery 3.2.1 (CVE-2019-11358 BDSA-2019-1138)"},"fullDescription":{"text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jquery 3.2.1  | 3.7.1  | 3.7.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6df4cd5-86a9-4970-86ac-b6cf1cbeceb7)\n\n\n## Description\nAn improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2019-1138](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-1138)([CVE-2019-11358](https://nvd.nist.gov/vuln/detail/CVE-2019-11358)) - jQuery Vulnerable to Prototype Pollution Attack via Improper Input Validation in 'extend(true.. [])' Function\n\n\n## Solution\nFixed in jQuery version [**3.4.0**](https://github.com/jquery/jquery/releases/tag/3.4.0) by [this](https://github.com/jquery/jquery/commit/753d591aea698e57d6db58c9f722cd0808619b1b) commit.\n\n## Workaround\nThird party patches for previous jQuery versions can be found [here](https://github.com/DanielRuf/snyk-js-jquery-174006?files=1). Please be aware that these patches may not be fully tested.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3651 jquery 3.2.1: org.webjars","shortDescription":{"text":"Direct Dependency: jquery 3.2.1 (BDSA-2021-3651)"},"fullDescription":{"text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the source/non-minified versions of the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). References to this domain are not present in the minified files.\n\nUsers viewing the jQuery source code may attempt to follow links to the hijacked site without awareness of the domain's current status. This could expose them to attacks such as phishing, where they are tricked into supplying credentials or downloading malicious software. Users are not at risk if they do not manually follow links to the `blindsignals` domain."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jquery 3.2.1  | 3.7.1  | 3.7.1 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d6df4cd5-86a9-4970-86ac-b6cf1cbeceb7)\n\n\n## Description\njQuery contains commented references to the hijacked domain `blindsignals`, within the source/non-minified versions of the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). References to this domain are not present in the minified files.\n\nUsers viewing the jQuery source code may attempt to follow links to the hijacked site without awareness of the domain's current status. This could expose them to attacks such as phishing, where they are tricked into supplying credentials or downloading malicious software. Users are not at risk if they do not manually follow links to the `blindsignals` domain.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-3651](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3651) - jQuery Contains Hijacked Domain References in Codebase Comments\n\n\n\n## Solution\nFixed in **[3.6.1](https://github.com/jquery/jquery/releases/tag/3.6.1)** by [this](https://github.com/jquery/jquery/commit/4b0d8900) commit.\n\nThe latest stable releases are available [here](https://jquery.com/download/).\n\n## Workaround\nUsers should remove references to the `blindsignals` domain within `src/queue/delay.js` and `test/data/jquery-1.9.1.js`, to ensure anyone viewing these files does not try to follow links to the malicious domain.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-546](https://cwe.mitre.org/data/definitions/546.html)\n\n","text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the source/non-minified versions of the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). References to this domain are not present in the minified files.\n\nUsers viewing the jQuery source code may attempt to follow links to the hijacked site without awareness of the domain's current status. This could expose them to attacks such as phishing, where they are tricked into supplying credentials or downloading malicious software. Users are not at risk if they do not manually follow links to the `blindsignals` domain."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-546"]},"defaultConfiguration":{"level":"note"}},{"id":"BDSA-2021-3731 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3731)"},"fullDescription":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nApache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2021-3731](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3731) - Apache Log4j Vulnerable to Remote Code Execution (RCE) Through LDAP Access via JNDI and Specially Crafted Log Messages\n\n\n\n## Solution\nFixed in versions:\n*  [**2.16.0-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.16.0-rc1) by [this](https://github.com/apache/logging-log4j2/commit/27972043b76c9645476f561c5adc483dec6d3f5d) commit.\n*  [**2.12.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/f819c83804152cb6ed94cb408302e36b21b65053) commit and [this](https://github.com/apache/logging-log4j2/commit/70edc233343815d5efa043b54294a6fb065aa1c5) commit.\n*   [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/be848dacbac6df30c4f32b2852e24446033ecf79) commit and [this](https://github.com/apache/logging-log4j2/commit/f6564bb993d547d0a371b75d869042c334bf57f0) commit.\n\nThe latest releases can be found [here](https://github.com/apache/logging-log4j2/tags).\n\nNOTE: It is recommended to upgrade to version  [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/). This recommendation is due to related vulnerabilities (BDSA-2021-3779, CVE-2021-45046) affecting the version that this vulnerability is fixed in.\n\n## Workaround\nThe vendor states that:\n\n\u003e This issue can be mitigated in prior releases (\u003c**2.16.0**) by removing the JndiLookup class from the classpath (example: `zip -q -d log4j-core-*.jar org/apache/logging/log4j/core/lookup/JndiLookup.class`).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22965 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-20873 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2023-20873 BDSA-2023-0953)"},"fullDescription":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nSpring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-0953](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0953)([CVE-2023-20873](https://nvd.nist.gov/vuln/detail/CVE-2023-20873)) - Spring Boot Vulnerable to Security Bypass via Wildcard Pattern Matching on Cloud Foundry Component\n\n\n## Solution\nFixed in [**3.1.0-RC1**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0-RC1), [**3.0.6**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.6) and [**2.7.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.11)  by [this](https://github.com/spring-projects/spring-boot/commit/3522714c13b47af03bf42e7f2d5994af568cb1a7) commit.\n\nFixed in [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) and [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/307f3c339912466e78fcdac648fff95a4edea573) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has advised the following as a workaround:\n\u003eDisable Cloud Foundry actuator endpoints by setting `management.cloudfoundry.enabled` to `false`.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\nCommon Weakness Enumeration: [CWE-923](https://cwe.mitre.org/data/definitions/923.html)\n\n","text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284","external/cwe/cwe-923"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3887 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3887)"},"fullDescription":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nApache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3887](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3887) - Log4j Vulnerable to Remote Code Execution (RCE) via Malicious JDBC Appender Configuration\n\n\n\n## Solution\nFixed in versions:\n\n* [**2.3.2-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.2-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ae4dc0c1a6389ae895f60451cd87e97e7b9d85c1) commit.\n* [**2.12.4-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.4-rc1) by [this](https://github.com/apache/logging-log4j2/commit/b3879958cb3b75eb16bf27e970538b6e4e130f1c) commit.\n* [**2.17.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.17.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/05db5f9527254632b59aed2a1d78a32c5ab74f16) commit.\n\nThe latest stable releases can be found [here](https://logging.apache.org/log4j/2.x/download.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-3817 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (BDSA-2021-3817)"},"fullDescription":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nApache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3817](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3817) - Apache log4j Vulnerable to Denial-of-Service (DoS) via Infinite Loop\n\n\n\n## Solution\nFixed in version [**2.17.0**](https://downloads.apache.org/logging/log4j/2.17.0/)  by [this](https://github.com/apache/logging-log4j2/commit/806023265f8c905b2dd1d81fd2458f64b2ea0b5e) commit.\n\nFixed in [**2.12.3-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.12.3-rc1) by [this](https://github.com/apache/logging-log4j2/commit/bf7e916df6335713fe2219c7b3b523fb509deabc) commit.\n\nFixed in [**2.3.1-rc1**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.3.1-rc1) by [this](https://github.com/apache/logging-log4j2/commit/ce6b78d082aae89089cb3ad25cdd46e9ec70a70b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/apache/logging-log4j2/releases).\n\n## Workaround\nThe vendor advises that  this vulnerability can can be mitigated through one of the following:\n\n* In PatternLayout in the logging configuration, replace Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` with Thread Context Map patterns `(%X, %mdc, or %MDC)`.\n\n* Alternatively,  remove references in the configuration to Context Lookups like `${ctx:loginId}` or `$${ctx:loginId}` where they originate from sources external to the application such as HTTP headers or user input.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20883 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2023-20883 BDSA-2023-1225)"},"fullDescription":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nSpring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\"\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-1225](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-1225)([CVE-2023-20883](https://nvd.nist.gov/vuln/detail/CVE-2023-20883)) - Spring Boot Vulnerable to Denial-of-Service (DoS) via Spring Welcome Page and Reverse Proxy Cache\n\n\n## Solution\nFixed in versions\n- [**2.5.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.5.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.6.15**](https://github.com/spring-projects/spring-boot/releases/tag/v2.6.15) by [this](https://github.com/spring-projects/spring-boot/commit/d7ff379fb8bb2c33319afeb45a343116b59e0ee2) commit,\n- [**2.7.12**](https://github.com/spring-projects/spring-boot/releases/tag/v2.7.12) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.0.7**](https://github.com/spring-projects/spring-boot/releases/tag/v3.0.7) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit,\n- [**3.1.0**](https://github.com/spring-projects/spring-boot/releases/tag/v3.1.0) by [this](https://github.com/spring-projects/spring-boot/commit/418dd1ba5bdad79b55a043000164bfcbda2acd78) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nThe vendor has supplied the following workaround:\n\u003e \"configure the reverse proxy not to cache 404 responses and/or not to cache responses to requests to the root (`/`) of the application.\"\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-345](https://cwe.mitre.org/data/definitions/345.html)\n\n","text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-345"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-27772 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","shortDescription":{"text":"Transitive Dependency: spring-boot 2.2.2.RELEASE from spring-boot-devtools 2.2.2.RELEASE (CVE-2022-27772 BDSA-2022-0856)"},"fullDescription":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-devtools 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e1d31389-74a2-4977-a704-859381db2be6)\n\n\n## Description\nSpring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0856](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0856)([CVE-2022-27772](https://nvd.nist.gov/vuln/detail/CVE-2022-27772)) - Spring Boot Vulnerable to Privilege Escalation via Race Condition During Temporary Directory Creation\n\n\n## Solution\nFixed in [**2.2.11**](https://github.com/spring-projects/spring-boot/releases/tag/v2.2.11.RELEASE) by [this](https://github.com/spring-projects/spring-boot/commit/667ccdae84822072f9ea1a27ed5c77964c71002d) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-boot/releases).\n\n## Workaround\nAccording to the [Github Security Advisory](https://github.com/JLLeitschuh/security-research/security/advisories/GHSA-cm59-pr5q-cw85), setting the `java.io.tmpdir` system environment variable to a directory that is exclusively owned by the executing user will fix this vulnerability for all operating systems.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-server:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-devtools:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot:2.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\nCommon Weakness Enumeration: [CWE-379](https://cwe.mitre.org/data/definitions/379.html)\n\n","text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362","external/cwe/cwe-379"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2018-20677 bootstrap 3.3.7: org.webjars","shortDescription":{"text":"Direct Dependency: bootstrap 3.3.7 (CVE-2018-20677 BDSA-2018-4634)"},"fullDescription":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| bootstrap 3.3.7  | 3.4.1  | 5.3.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b444cf7e-0097-41bd-95c4-606c9d32aaac)\n\n\n## Description\nA stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-4634](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-4634)([CVE-2018-20677](https://nvd.nist.gov/vuln/detail/CVE-2018-20677)) - Bootstrap Vulnerable to Stored Cross-Site Scripting (XSS) via 'target' Attribute in Affix Plugin\n\n\n## Solution\nFixed in versions:\n\n* [**3.4.0**](https://github.com/twbs/bootstrap/releases/tag/v3.4.0) by [this](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d) commit\n* [**4.0.0 alpha**](https://github.com/twbs/bootstrap/releases/tag/v4.0.0-alpha) by [this](https://github.com/twbs/bootstrap/commit/1e9e3316b6718af09bfe473f5eb364e4f9475731) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html)\n\n","text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2018-20676 bootstrap 3.3.7: org.webjars","shortDescription":{"text":"Direct Dependency: bootstrap 3.3.7 (CVE-2018-20676 BDSA-2018-4636)"},"fullDescription":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| bootstrap 3.3.7  | 3.4.1  | 5.3.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b444cf7e-0097-41bd-95c4-606c9d32aaac)\n\n\n## Description\nA reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-4636](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-4636)([CVE-2018-20676](https://nvd.nist.gov/vuln/detail/CVE-2018-20676)) - Bootstrap Vulnerable to Reflected Cross-Site Scripting (XSS) via 'data-viewport' Attribute in Tooltip Component\n\n\n## Solution\nFixed in version [**3.4.0**](https://github.com/twbs/bootstrap/releases/tag/v3.4.0) by [this](https://github.com/twbs/bootstrap/commit/2a5ba23ce8f041f3548317acc992ed8a736b609d) commit.\nFixed in [**4.0.0-alpha**](https://github.com/twbs/bootstrap/releases/tag/v4.0.0-alpha) by [this](https://github.com/twbs/bootstrap/commit/3452e8dc8336c7a4151bcccdb9d3d4202f06f294) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html)\n\n","text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2016-10735 bootstrap 3.3.7: org.webjars","shortDescription":{"text":"Direct Dependency: bootstrap 3.3.7 (CVE-2016-10735 BDSA-2016-1585)"},"fullDescription":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| bootstrap 3.3.7  | 3.4.1  | 5.3.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b444cf7e-0097-41bd-95c4-606c9d32aaac)\n\n\n## Description\nBootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2016-1585](https://openhub.net/vulnerabilities/bdsa/BDSA-2016-1585)([CVE-2016-10735](https://nvd.nist.gov/vuln/detail/CVE-2016-10735)) - Bootstrap Vulnerable to Cross-Site Scripting (XSS) via 'data-target' Attribute\n\n\n## Solution\nFixed in version [**4.0.0-beta.2**](https://github.com/twbs/bootstrap/releases/tag/v4.0.0-beta.2) by [this](https://github.com/twbs/bootstrap/commit/bcad4bcb5f5a9ef079b2883a48a698b35261e083) commit.\n\nFixed in version [**3.4.0**](https://github.com/twbs/bootstrap/releases/tag/v3.4.0) by [this](https://github.com/twbs/bootstrap/commit/29f9237f735b90dbc89e003db0c62dec2db0b308) commit and [this](https://github.com/twbs/bootstrap/commit/13bf8aeae3db71e28af69782328c22215795c169) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html)\n\n","text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2019-8331 bootstrap 3.3.7: org.webjars","shortDescription":{"text":"Direct Dependency: bootstrap 3.3.7 (CVE-2019-8331 BDSA-2019-0423)"},"fullDescription":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| bootstrap 3.3.7  | 3.4.1  | 5.3.2 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=b444cf7e-0097-41bd-95c4-606c9d32aaac)\n\n\n## Description\nbootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2019-0423](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-0423)([CVE-2019-8331](https://nvd.nist.gov/vuln/detail/CVE-2019-8331)) - bootstrap Vulnerable to Cross-site Scripting (XSS) via 'data-template', 'data-content' and 'data-title' Properties of 'tooltip' and 'popover' Plugin Content\n\n\n## Solution\nFixed in [**4.3.1**](https://github.com/twbs/bootstrap/releases/tag/v4.3.1) by [this](https://github.com/twbs/bootstrap/commit/7bc4d2e0bc65151b6f60dccad50c9c8f50252bd6) commit and [this](https://github.com/twbs/bootstrap/commit/10b97f6ed94168c749caa7b5f6a6e1504f4e0629) commit.\nFixed in [**3.4.1**](https://github.com/twbs/bootstrap/releases/tag/v3.4.1) by [this](https://github.com/twbs/bootstrap/commit/d821de271297a74a8d6a309de1d4cd9113dd77ed) commit and [this](https://github.com/twbs/bootstrap/commit/2c8abb9a4393addc5ffb39e649e09391c2fee701) commit.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-79](https://cwe.mitre.org/data/definitions/79.html)\n\n","text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-79"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2021-3401 logback-core 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","shortDescription":{"text":"Transitive Dependency: logback-core 1.2.3 from spring-boot-starter-test 2.2.2.RELEASE (BDSA-2021-3401)"},"fullDescription":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| logback-core 1.2.3  | 1.4.11  | 1.4.11 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=faacbd38-fb20-477a-bdbf-194fc635fea5)\n\n\n## Description\nlogback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3401](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3401) - logback Vulnerable to Man-in-the-Middle (MitM) Attack via no SSL Hostname Verification\n\n\n\n## Solution\nFixed in [**1.2.7**](https://github.com/qos-ch/logback/releases/tag/v_1.2.7) by [this](https://github.com/qos-ch/logback/commit/626c7733c188) commit.\n\nThe latest releases can be found [here](https://github.com/qos-ch/logback/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n                - ch.qos.logback:logback-classic:1.2.3\n                    - ch.qos.logback:logback-core:1.2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-297](https://cwe.mitre.org/data/definitions/297.html)\n\n","text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-297"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-42550 logback-core 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","shortDescription":{"text":"Transitive Dependency: logback-core 1.2.3 from spring-boot-starter-test 2.2.2.RELEASE (CVE-2021-42550 BDSA-2021-3818)"},"fullDescription":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-test 2.2.2.RELEASE  | 2.7.13  | 3.1.1 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| logback-core 1.2.3  | 1.4.11  | 1.4.11 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=faacbd38-fb20-477a-bdbf-194fc635fea5)\n\n\n## Description\nLogback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3818](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3818)([CVE-2021-42550](https://nvd.nist.gov/vuln/detail/CVE-2021-42550)) - Logback Vulnerable to Remote Code Execution (RCE) via Unrestricted JNDI Location Namespaces in 'logback.xml'\n\n\n## Solution\nFixed in [**1.2.9**](https://github.com/qos-ch/logback/releases/tag/v_1.2.9) by the following commits:\n* [Commit 1](https://github.com/qos-ch/logback/commit/21d772f2bc2ed780b01b4fe108df7e29707763f1)\n* [Commit 2](https://github.com/qos-ch/logback/commit/54e81d74a9304a188c62a8110d4d393ccad5cbc5)\n* [Commit 3](https://github.com/qos-ch/logback/commit/3b9cd0efe0b3390026a04a6092aa03e433ddd330)\n\nFixed in [**1.3.0-alpha11**](https://github.com/qos-ch/logback/releases/tag/v_1.3.0-alpha11) by the following commits:\n* [Commit 1](https://github.com/qos-ch/logback/commit/ef4fc4186b74b45ce80d86833820106ff27edd42)\n* [Commit 2](https://github.com/qos-ch/logback/commit/87291079a1de9369ac67e20dc70a8fdc7cc4359c)\n* [Commit 3](https://github.com/qos-ch/logback/commit/8fb44ca67e6ab8d89bb15ec6cb75075921106f38)\n* [Commit 4](https://github.com/qos-ch/logback/commit/c43bd30e1092b89bb91f5fb6a28310956b3bac61)\n\n**Note**: As an extra precaution, in addition to upgrading to logback version **1.2.9**, the vendor also recommends users to set their logback configuration files as read-only.\n\nThe latest stable releases can be found [here](https://github.com/qos-ch/logback/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-test:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter:2.2.2.RELEASE\n            - org.springframework.boot:spring-boot-starter-logging:2.2.2.RELEASE\n                - ch.qos.logback:logback-classic:1.2.3\n                    - ch.qos.logback:logback-core:1.2.3\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2018-1836 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (BDSA-2018-1836)"},"fullDescription":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2018-1836](https://openhub.net/vulnerabilities/bdsa/BDSA-2018-1836) - Apache Ant Vulnerable to Arbtirary File Write due to Failure to Sanitize File Names\n\n\n\n## Solution\nFixed by [this](https://github.com/apache/ant/commit/e56e54565804991c62ec76dad385d2bdda8972a7#diff-32b057b8e95fa2b3f7d644552643010aR11) commit in.\n* **[1.9.12](https://github.com/apache/ant/releases/tag/rel%2F1.9.12)**\n* **[1.10.4](https://github.com/apache/ant/releases/tag/rel%2F1.10.4)**\n\n\n\n**Note:** To prevent this attack it is required to set `allowFilesToEscapeDest` to false as well as updating the component.\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2012-0078 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (BDSA-2012-0078)"},"fullDescription":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2012-0078](https://openhub.net/vulnerabilities/bdsa/BDSA-2012-0078) - Apache Common Compress and Apache Ant Vulnerable to Denial-of-Service (DoS) via bzip2 Resource Consumption\n\n\n\n## Solution\nFixed in Commons Compress version [**1.4.1**](https://github.com/apache/commons-compress/releases/tag/rel%2F1.4.1) by the following commits:\n* [Commit 1](https://github.com/apache/commons-compress/commit/b06f7b41c936ef1a79589d16ea5c1d8b93f71f66)\n* [Commit 2](https://github.com/apache/commons-compress/commit/6e95697e783767f3549f00d7d2e1b002eac4a3d4)\n* [Commit 3](https://github.com/apache/commons-compress/commit/1ce57d976c4f25fe99edcadf079840c278f3cb84)\n* [Commit 4](https://github.com/apache/commons-compress/commit/020c03d8ef579e80511023fb46ece30e9c3dd27d)\n* [Commit 5](https://github.com/apache/commons-compress/commit/ea31005111f0abede7e43e4ba0012e62e0808b22)\n* [Commit 6](https://github.com/apache/commons-compress/commit/cca0e6e5341aacddefd4c4d36cef7cbdbc2a8777)\n* [Commit 7](https://github.com/apache/commons-compress/commit/fdd7459bc5470e90024dbe762249166481cce769)\n* [Commit 8](https://github.com/apache/commons-compress/commit/0600296ab8f8a0bbdfedd483f51b38005eb8e34e)\n* [Commit 9](https://github.com/apache/commons-compress/commit/2ab2fcb356753927afaa731b9d2dcc47d3083408)\n* [Commit 10](https://github.com/apache/commons-compress/commit/6ced422bf5eca3aac05396367bafb33ec21bf74e)\n* [Commit 11](https://github.com/apache/commons-compress/commit/654222e628097763ee6ca561ae77be5c06666173)\n* [Commit 12](https://github.com/apache/commons-compress/commit/8f702469cbf4c451b6dea349290bc4af0f6f76c7)\n\nFixed by [this](https://github.com/apache/ant/commit/08284bc7aa7d066544b30974231240c9b73597eb) commit and [this](https://github.com/apache/ant/commit/8f2b4c5f4f8a977c4b07393e3156b1c02d1085fc) commit in the **master** branch of Ant. These fixes were applied in Ant version [**1.8.4**](https://github.com/apache/ant/tree/rel/1.8.4) by [this](https://github.com/apache/ant/commit/eb9c33f406f31e3705a963e051ff5004dbe8f0cd) commit.\n\nThe latest stable releases of Commons Compress are available [here](https://commons.apache.org/proper/commons-compress/download_compress.cgi), and the latest stable releases of Ant are available [here](https://ant.apache.org/).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2083 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (BDSA-2021-2083)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\".\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2083](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2083) - Apache Ant Vulnerable to Denial-of-Service (DoS) via Crafted TAR Archive\n\n\n\n## Solution\nFixed in [**1.9.16-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.9.16_RC1) and [**1.10.11-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.11_RC1) by [this](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/ant/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-1945 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (CVE-2020-1945 BDSA-2020-1128)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1128](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1128)([CVE-2020-1945](https://nvd.nist.gov/vuln/detail/CVE-2020-1945)) - Apache Ant Vulnerable to Information Disclosure via Default Temporary Directory Identified by 'java.io.tmpdir'\n\n\n## Solution\nFixed in [**1.10.9-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.9_RC1) by [this](https://github.com/apache/ant/commit/87ac51d3c22bcf7cfd0dc07cb0bd04a496e0d428) commit.\n\n## Workaround\nSteps were added to vulnerable versions to work around the issue. \n\nIn [**1.9.15-rc1**](https://github.com/apache/ant/releases/tag/rel%2F1.9.15) and [**1.10.8-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.8_RC1), the vendor has added [this](https://github.com/apache/ant/commit/9c1f4d905da59bf446570ac28df5b68a37281f35) commit and [this](https://github.com/apache/ant/commit/926f339ea30362bec8e53bf5924ce803938163b7) commit. \n\nThe changes introduce the `ant.tmpdir` property which holds the safe directory path for temporary files. It has to be set by the user. The directory itself should also be set up by the user since Ant may not have the correct permissions to do it automatically.\n\nIn [**1.10.8-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.8_RC1), [this](https://github.com/apache/ant/commit/a8645a151bc706259fb1789ef587d05482d98612) commit was also added. It attempts to set secure temporary file permissions, but does not protect the directory. \n\nTherefore it is strongly recommended that users set up a private secure temporary directory with appropriate permissions.\n\nThe official mitigation for versions from **1.1** to **1.9.14** and **1.10.0** to **1.10.7** is setting the `java.io.tmpdir` system property to point to a directory only readable and writable by the current user prior to running Ant.\n\nVersions **1.9.15** and **1.10.8** can be trusted to use the Ant property `ant.tmpfile`, but the vendor still highly recommends using a safer private temporary directory instead.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2021-2085 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (BDSA-2021-2085)"},"fullDescription":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2085](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2085) - Apache Ant Vulnerable to Denial-of-Service (DoS) via Crafted ZIP Archive\n\n\n\n## Solution\nFixed in [**1.9.16-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.9.16_RC1) and [**1.10.11-rc1**](https://github.com/apache/ant/releases/tag/ANT_1.10.11_RC1) by [this](https://github.com/apache/ant/commit/6594a2d66f7f060dafcbbf094dd60676db19a842) commit.\n\nThe latest stable releases are available [here](https://github.com/apache/ant/releases).\n\n\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2020-2577 ant-launcher 1.6.2: ant","shortDescription":{"text":"Direct Dependency: ant-launcher 1.6.2 (BDSA-2020-2577)"},"fullDescription":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n\n| **Affected Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| ant-launcher 1.6.2  | 1.6.5  | 1.6.5 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=0ba5c330-84a3-482f-b168-5044f7663f8d)\n\n\n## Description\nApache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2577](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2577) - Apache Ant Vulnerable to Information Disclosure via Insecure Temporary File Directory\n\n\n\n## Solution\nFixed in [**ANT_1.10.9_RC1**](https://github.com/apache/ant/releases/tag/ANT_1.10.9_RC1) by [this](https://github.com/apache/ant/commit/87ac51d3c22bcf7cfd0dc07cb0bd04a496e0d428) commit and [this](http://link-to-the-commit.com) commit.\n\n## Workaround\n**Note:** Per the vendor, The best mitigation still is to make Ant use a directory that is only readable and writable by the current user.\n\nThe official mitigation for versions from **1.1** to **1.9.14** and **1.10.0** to **1.10.7** is setting the `java.io.tmpdir` system property to point to a directory only readable and writable by the current user prior to running Ant.\n\nVersions **1.9.15** and **1.10.8** can be trusted to use the Ant property `ant.tmpfile`, but the vendor still highly recommends using a safer private temporary directory instead.\n\nAnt **1.10.9** will also try to create a temporary directory only accessible by the current user if neither of the properties above is set but may fail to create one if the underlying filesystem doesn't allow it.\n\nExplicitly setting up a directory to use and set the respective property is the only mitigation that will work on every platform.\n\n\n\n## References\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\nCommon Weakness Enumeration: [CWE-829](https://cwe.mitre.org/data/definitions/829.html)\n\n","text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","direct_dependency","patch_available","external/cwe/cwe-200","external/cwe/cwe-829"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22965 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-jdbc 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-jdbc 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=d50c2338-6941-4032-a3f7-64762cc69059)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.boot:spring-boot-starter-jdbc:2.2.2.RELEASE\n            - org.springframework:spring-jdbc:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-core 5.2.2.RELEASE from spring-security-test 4.1.3.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-security-test 4.1.3.RELEASE  | 4.2.20  | 6.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-core 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=39f2a928-d773-405a-8140-28079ea26a26)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:http-basics:v8.1.0:-maven\n    - org.springframework.security:spring-security-test:4.1.3.RELEASE\n        - org.springframework:spring-core:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-43466 thymeleaf-spring5 3.0.11.RELEASE: spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.thymeleaf","shortDescription":{"text":"Transitive Dependency: thymeleaf-spring5 3.0.11.RELEASE from spring-boot-starter-thymeleaf 2.2.2.RELEASE (CVE-2021-43466 BDSA-2021-4619)"},"fullDescription":{"text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-thymeleaf 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| thymeleaf-spring5 3.0.11.RELEASE  | 3.1.2.RELEASE  | 3.1.2.RELEASE |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=83ad4756-2415-43f3-bc13-bc8f13a28aac)\n\n\n## Description\nthymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-4619](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-4619)([CVE-2021-43466](https://nvd.nist.gov/vuln/detail/CVE-2021-43466)) - thymeleaf-spring Vulnerable to Template Injection Leading to Remote Code Execution (RCE) via Double Evaluation of Unsanitized Parameters\n\n\n## Solution\nFixed in version [ **thymeleaf-spring3-3.0.14.RELEASE**](https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring3), [**thymeleaf-spring4-3.0.14.RELEASE**](https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring4), and [**thymeleaf-spring5-3.0.14.RELEASE**](https://github.com/thymeleaf/thymeleaf-spring/releases/tag/thymeleaf-spring5-3.0.14.RELEASE) by [this](https://github.com/thymeleaf/thymeleaf-spring/commit/d75834ca34f4a8dca3ee626c9ce22060e90427bc) commit.\n\nThe latest stable releases can be found [here](https://mvnrepository.com/artifact/org.thymeleaf/thymeleaf-spring5).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-thymeleaf:2.2.2.RELEASE\n        - org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-95](https://cwe.mitre.org/data/definitions/95.html)\n\n","text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-95"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-27216 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-continuation 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-continuation 9.4.24.v20191120  | 9.4.53.20231009  | 9.4.53.20231009 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=de144bb2-1c7f-4fe7-8b40-34d69d870dcb)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-servlets:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-continuation:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-27216 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27216 BDSA-2020-2949)"},"fullDescription":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nJetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2949](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2949)([CVE-2020-27216](https://nvd.nist.gov/vuln/detail/CVE-2020-27216)) - Eclipse Jetty Vulnerable to Temporary Directory Hijacking via Race Condition\n\n\n## Solution\nFixed in:\n* [**11.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)\n* [**10.0.0.beta3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3) \n* [**9.4.33.v20201020**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.33.v20201020) by [this](https://github.com/eclipse/jetty.project/commit/53e0e0e9b25a6309bf24ee3b10984f4145701edb) commit and [this](https://github.com/eclipse/jetty.project/commit/9ad6beb80543b392c91653f6bfce233fc75b9d5f) commit.\n\n## Workaround\nSet a temporary directory, either for the server or the context, to one outside the shared temporary file system. For recent releases, a temporary directory by created by making a directory called work in the `${jetty.base}` directory (the parent directory of the webapps directory). Alternately the java temporary directory can be set with the System Property `java.io.tmpdir`. A more detailed description of how jetty selects a temporary directory is below.\n\nTo mitigate this vulnerability the directory must be set to one that is not writable by an attacker. To avoid information leakage, the directory should also not be readable by an attacker.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-362](https://cwe.mitre.org/data/definitions/362.html)\n\n","text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-362"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-44487 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-44487 BDSA-2023-2732)"},"fullDescription":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nThe HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2023-2732](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2732)([CVE-2023-44487](https://nvd.nist.gov/vuln/detail/CVE-2023-44487)) - HTTP/2 Protocol Vulnerable to Denial-of-Service (DoS) via Rapid Request Cancellations\n\n\n## Solution\nFixed in:\n* nghttp2 [**1.57.0**](https://github.com/nghttp2/nghttp2/releases/tag/v1.57.0) by [this](https://github.com/nghttp2/nghttp2/commit/72b4af6143681f528f1d237b21a9a7aee1738832) commit,\n* NGINX **default** branch with [this](https://hg.nginx.org/nginx/rev/cdda286c0f1b) revision,\n* Apache Tomcat \n\t* [**8.5.94**](https://github.com/apache/tomcat/releases/tag/8.5.94) by [this](https://github.com/apache/tomcat/commit/944332bb15bd2f3bf76ec2caeb1ff0a58a3bc628) commit,\n\t* [**9.0.81**](https://github.com/apache/tomcat/releases/tag/9.0.81) by [this](https://github.com/apache/tomcat/commit/6d1a9fd6642387969e4410b9989c85856b74917a) commit,\n\t* [**10.1.14**](https://github.com/apache/tomcat/releases/tag/10.1.14) by [this](https://github.com/apache/tomcat/commit/76bb4bfbfeae827dce896f650655bbf6e251ed49) commit,\n\t* [**11.0.0-M12**](https://github.com/apache/tomcat/releases/tag/11.0.0-M12) by [this](https://github.com/apache/tomcat/commit/9cdfe25bad707f34b3e5da2994f3f1952a163c3e) commit,\n* Apache Traffic Server\n\t* [**9.2.3**](https://github.com/apache/trafficserver/releases/tag/9.2.3) by [this](https://github.com/apache/trafficserver/commit/b28ad74f117307e8de206f1de70c3fa716f90682) commit,\n\t* [**8.1.9**](https://github.com/apache/trafficserver/releases/tag/8.1.9) by [this](https://github.com/apache/trafficserver/commit/d742d74039aaa548dda0148ab4ba207906abc620) commit,\n* Netty/Codec/HTTP2 [**4.1.100.Final**](https://mvnrepository.com/artifact/io.netty/netty-codec-http2/4.1.100.Final) by [this](https://github.com/netty/netty/commit/58f75f665aa81a8cbcf6ffa74820042a285c5e61) commit,\n* Eclipse Jetty\n\t* [**12.0.2**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.2), [**11.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.17), [**10.0.17**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.17) by [this](https://github.com/jetty/jetty.project/commit/dbb94514dc9d3fb21fe92080f57c314e7e06a148) commit,\n\t* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/0f246d12090fb15b7b21dee8429f459fd792de53) commit.\n* lighttpd **master** branch by [this](https://github.com/lighttpd/lighttpd1.4/commit/7b48f3c843e1113b27f5d278f4d10861cc499a06) commit.\n* grpc-go \n  * [**1.56.3**](https://github.com/grpc/grpc-go/releases/tag/v1.56.3) by [this](https://github.com/grpc/grpc-go/commit/5efd7bd7) commit,\n  * [**1.57.1**](https://github.com/grpc/grpc-go/releases/tag/v1.57.1) by [this](https://github.com/grpc/grpc-go/commit/6a1400d5) commit,\n  * [**1.58.3**](https://github.com/grpc/grpc-go/releases/tag/v1.58.3) by [this](https://github.com/grpc/grpc-go/commit/c40c9ba3) commit.\n\n## Workaround\nDepending on technologies use and their configuration, different mitigation strategies may be available.\n\nIn some cases, it may be possible to limit the amount of `RST_STREAM` frame frames that are processed within a given time by configuring the particular HTTP/2 implementation manually. Please refer to your software vendor's advisories for more information.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2023-26048 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26048 BDSA-2023-0887)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0887](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0887)([CVE-2023-26048](https://nvd.nist.gov/vuln/detail/CVE-2023-26048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Out-of-Memory Error caused by Parsing of a Large Multipart without a Filename\n\n\n## Solution\nFixed in [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/c3021592218da289563987e6f7fbe05f8704b285) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/622befbd0d52f61c1acd41b4ef12458311494f1a) commit in:\n* **[jetty-10.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)**\n* **[jetty-11.0.14](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)**\n* **[jetty-12.0.0.beta0](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)**\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nIt is recommended to set the multipart parameter `maxRequestSize` to a non-negative value in order to limit the whole multipart content. It has also been stated that limiting the multipart parameter `maxFileSize` will not be enough since the attacker can supply a large number of parts that, when summed up, will cause memory issues.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-26049 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-26049 BDSA-2023-0888)"},"fullDescription":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0888](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0888)([CVE-2023-26049](https://nvd.nist.gov/vuln/detail/CVE-2023-26049)) - Eclipse Jetty Vulnerable to Cookie Smuggling via Improper Parsing of Quoted Values in Cookies\n\n\n## Solution\nFixed in version [**jetty-9.4.51.v20230217**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.51.v20230217) by [this](https://github.com/eclipse/jetty.project/commit/1be1401bafb4c46fae3c234c8e93743a661dcf21) commit.\n\nFixed by [this](https://github.com/eclipse/jetty.project/commit/7b8c2c1bf081c7f408e5da3371c8c3c9802f09fd) commit in:\n* [**jetty-10.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.14)\n* [**jetty-11.0.14**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.14)\n* [**jetty-12.0.0.beta0**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta0)\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28169 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28169 BDSA-2021-1714)"},"fullDescription":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nJetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1714](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1714)([CVE-2021-28169](https://nvd.nist.gov/vuln/detail/CVE-2021-28169)) - Jetty Vulnerable to Information Disclosure via Double Encoding in Requests to 'ConcatServlet' and 'WelcomeFilter'\n\n\n## Solution\nFixed in [**9.4.41**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210512) by [this](https://github.com/eclipse/jetty.project/commit/1c05b0bcb1) commit.\n\nFixed in [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) and [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/f58dbedcd0) commit.\n\nThe latest stable releases are available [here](https://www.eclipse.org/jetty/download.php).\n\n## Workaround\nThe vendor provides the following workaround:\n\nIf you cannot update to the latest version of Jetty, you can instead deploy your own version of the `ConcatServlet` and/or the `WelcomeFilter` by using the code from the latest version of Jetty.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-22](https://cwe.mitre.org/data/definitions/22.html)\n\n","text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-22"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-28165 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-28165 BDSA-2021-0848)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0848](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0848)([CVE-2021-28165](https://nvd.nist.gov/vuln/detail/CVE-2021-28165)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Invalid TLS Frame\n\n\n## Solution\nFixed in [**10.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.2) and [**11.0.2**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.2) by [this](https://github.com/eclipse/jetty.project/commit/be22761a20a1685365c8e0356bf09b47e574cfd9) and [this](https://github.com/eclipse/jetty.project/commit/039c7386d0f3087d7c8aa19ea6001b24c95b9f16) commit.\nFixed in [**9.4.39.v20210325**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.39.v20210325) by [this](https://github.com/eclipse/jetty.project/commit/00d379c94ba865dced2025c2d1bc3e2e0e41e880) and [this](https://github.com/eclipse/jetty.project/commit/294b2ba02b667548617a94cd99592110ac230add) commit. \n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe problem can be worked around by compiling the following class:\n```\npackage org.eclipse.jetty.server.ssl.fix6072;\n\nimport java.nio.ByteBuffer;\nimport javax.net.ssl.SSLEngine;\nimport javax.net.ssl.SSLEngineResult;\nimport javax.net.ssl.SSLException;\nimport javax.net.ssl.SSLHandshakeException;\n\nimport org.eclipse.jetty.io.EndPoint;\nimport org.eclipse.jetty.io.ssl.SslConnection;\nimport org.eclipse.jetty.server.Connector;\nimport org.eclipse.jetty.server.SslConnectionFactory;\nimport org.eclipse.jetty.util.BufferUtil;\nimport org.eclipse.jetty.util.annotation.Name;\nimport org.eclipse.jetty.util.ssl.SslContextFactory;\n\npublic class SpaceCheckingSslConnectionFactory extends SslConnectionFactory\n{\n    public SpaceCheckingSslConnectionFactory(@Name(\"sslContextFactory\") SslContextFactory factory, @Name(\"next\") String nextProtocol)\n    {\n        super(factory, nextProtocol);\n    }\n\n    @Override\n    protected SslConnection newSslConnection(Connector connector, EndPoint endPoint, SSLEngine engine)\n    {\n        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine, isDirectBuffersForEncryption(), isDirectBuffersForDecryption())\n        {\n            @Override\n            protected SSLEngineResult unwrap(SSLEngine sslEngine, ByteBuffer input, ByteBuffer output) throws SSLException\n            {\n                SSLEngineResult results = super.unwrap(sslEngine, input, output);\n\n                if ((results.getStatus() == SSLEngineResult.Status.BUFFER_UNDERFLOW ||\n                    results.getStatus() == SSLEngineResult.Status.OK \u0026\u0026 results.bytesConsumed() == 0 \u0026\u0026 results.bytesProduced() == 0) \u0026\u0026\n                    BufferUtil.space(input) == 0)\n                {\n                    BufferUtil.clear(input);\n                    throw new SSLHandshakeException(\"Encrypted buffer max length exceeded\");\n                }\n                return results;\n            }\n        };\n    }\n}\n```\n\nThis class can be deployed by:\n* The resulting class file should be put into a jar file (eg `sslfix6072.jar`)\n* The jar file should be made available to the server. For a normal distribution this can be done by putting the file into `${jetty.base}/lib`\n* Copy the file `${jetty.home}/modules/ssl.mod` to `${jetty.base}/modules`\n* Edit the `${jetty.base}/modules/ssl.mod` file to have the following section:\n```\n[lib]\nlib/sslfix6072.jar\n```\n\n* Copy the file `${jetty.home}/etc/jetty-https.xml` and `${jetty.home}/etc/jetty-http2.xml` to `${jetty.base}/etc`\n* Edit files `${jetty.base}/etc/jetty-https.xml` and `${jetty.base}/etc/jetty-http2.xml`, changing any reference of `org.eclipse.jetty.server.SslConnectionFactory` to `org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory`. \n\nFor example:\n```\n  \u003cCall name=\"addIfAbsentConnectionFactory\"\u003e\n    \u003cArg\u003e\n      \u003cNew class=\"org.eclipse.jetty.server.ssl.fix6072.SpaceCheckingSslConnectionFactory\"\u003e\n        \u003cArg name=\"next\"\u003ehttp/1.1\u003c/Arg\u003e\n        \u003cArg name=\"sslContextFactory\"\u003e\u003cRef refid=\"sslContextFactory\"/\u003e\u003c/Arg\u003e\n      \u003c/New\u003e\n    \u003c/Arg\u003e\n  \u003c/Call\u003e\n```\nRestart Jetty\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2048 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2048 BDSA-2022-1887)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1887](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1887)([CVE-2022-2048](https://nvd.nist.gov/vuln/detail/CVE-2022-2048)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Incorrect Handling of Invalid HTTP/2 Requests\n\n\n## Solution\nFixed in:\n* **[9.4.47](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610)** by [this](https://github.com/eclipse/jetty.project/commit/be912d4315839405a8ae601f2e4ee0306867266e) commit,\n* **[10.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10)** and **[11.0.10](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10)** by [this](https://github.com/eclipse/jetty.project/commit/b705091afb9158b39590fa36b9b84795524a8f0b) commit.\n\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor recommends users to filter the requests before they are sent to Jetty. One way to filter them would be to use a proxy.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-410](https://cwe.mitre.org/data/definitions/410.html)\nCommon Weakness Enumeration: [CWE-664](https://cwe.mitre.org/data/definitions/664.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-410","external/cwe/cwe-664"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27218 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27218 BDSA-2020-3580)"},"fullDescription":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-3580](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-3580)([CVE-2020-27218](https://nvd.nist.gov/vuln/detail/CVE-2020-27218)) - Eclipse Jetty Vulnerable to HTTP Data Injection via  GZIP Request Body Inflation\n\n\n## Solution\nFixed in **[9.4.35.v20201120](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.35.v20201120)** by [this](https://github.com/eclipse/jetty.project/commit/850a0330ff25da42b1b1cbdbdca0fcc0c40e47e9) commit.\n\nFixed in **[10.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.0.beta3)** and in **[11.0.0.beta3](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.0.beta3)** by [this](https://github.com/eclipse/jetty.project/commit/34d27e85483c119b7dd1aa9beda735844d14b605) commit.\n\n## Workaround\nThe vendor states that any of the following will mitigate this vulnerability:\n\n\n\u003e * Disabling compressed request body inflation by GzipHandler.\n\u003e * By always fully consuming the request content before sending a response.\n\u003e * By adding a Connection: close to any response where the servlet does not fully consume request content.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-226](https://cwe.mitre.org/data/definitions/226.html)\n\n","text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-226"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27223 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2020-27223 BDSA-2020-4221)"},"fullDescription":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nJetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-4221](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-4221)([CVE-2020-27223](https://nvd.nist.gov/vuln/detail/CVE-2020-27223)) - Jetty Vulnerable to Denial-of-Service (DoS) via Unsafe Exponential Algorithm in 'sort()' Function\n\n\n## Solution\nFixed by [this](https://github.com/eclipse/jetty.project/commit/10e531756b972162eed402c44d0244f7f6b85131) commit in:\n* [**11.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.1)\n* [**10.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.1)\n* [**9.4.37.v20210219**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.37.v20210219)\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has stated that the following workarounds are effective:\n\n* Don't use the default error page or handler.\n* Don't deploy an instance of `StatisticsServlet` that is exposed to the network.\n* Don't call the `getLocale` API.\n* Don't enable precompressed static content in instances of `DefaultServlet`.\n* Deploy a rule that limits the number and size of `Accept-*` header fields.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-407](https://cwe.mitre.org/data/definitions/407.html)\n\n","text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-407"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-40167 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-40167 BDSA-2023-2470)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2470](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2470)([CVE-2023-40167](https://nvd.nist.gov/vuln/detail/CVE-2023-40167)) - Eclipse Jetty Vulnerable to HTTP Request Smuggling via '+' Character Prefix in Content-Length Value in HTTP/1 Header Field\n\n\n## Solution\nFixed in versions:\n* [**12.0.1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.1) by [this](https://github.com/eclipse/jetty.project/commit/13cf2dade746e5d3bb123fd7ecd9fdc28fc43082) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/003e46cae4d71e147d51fb8ea378e8989d381cc3) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/e4d596eafc887bcd813ae6e28295b5ce327def47) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-130](https://cwe.mitre.org/data/definitions/130.html)\n\n","text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-130"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-36478 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36478 BDSA-2023-2721)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2721](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2721)([CVE-2023-36478](https://nvd.nist.gov/vuln/detail/CVE-2023-36478)) - Eclipse Jetty Vulnerable to Denial-of-Service (DoS) via Integer Overflow in 'checkSize' Method\n\n\n## Solution\nFixed in:\n* [**9.4.53.v20231009**](https://github.com/jetty/jetty.project/releases/tag/jetty-9.4.53.v20231009) by [this](https://github.com/jetty/jetty.project/commit/c7a4b05fc735e73e7522cb617c079045b709957b) commit and [this](https://github.com/jetty/jetty.project/commit/a4d61e9eb026ec98c79107e840cabdf520482c56) commit,\n* [**10.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-10.0.16), [**11.0.16**](https://github.com/jetty/jetty.project/releases/tag/jetty-11.0.16) and [**12.0.0.beta2x**](https://github.com/jetty/jetty.project/releases/tag/jetty-12.0.0.beta2x) by [this](https://github.com/jetty/jetty.project/commit/a8c9eea75bffcb2b2557acefb75856707654a56f) commit and [this](https://github.com/jetty/jetty.project/commit/420ec7cc1db65b42693dc002aca0faa567f62f7e) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-190](https://cwe.mitre.org/data/definitions/190.html)\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-190","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2047 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2022-2047 BDSA-2022-1891)"},"fullDescription":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1891](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1891)([CVE-2022-2047](https://nvd.nist.gov/vuln/detail/CVE-2022-2047)) - Eclipse Jetty Vulnerable to Invalid 'HttpURI.authority' via Improper Input Validation of URIs\n\n\n## Solution\nFixed in versions:\n* [**9.4.47**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.47.v20220610) by [this](https://github.com/eclipse/jetty.project/commit/4ca8afbbd667c19a084d5ff14a4f08eb7049d1c7) commit.\n* [**10.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.10) and [**11.0.10**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.10) by [this](https://github.com/eclipse/jetty.project/commit/d1e64f469362bb9371d530cccded5ecb13fa1cb5) commit.\n\nThe latest stable releases can be found [here](https://github.com/eclipse/jetty.project/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-41900 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-41900 BDSA-2023-2461)"},"fullDescription":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2461](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2461)([CVE-2023-41900](https://nvd.nist.gov/vuln/detail/CVE-2023-41900)) - Eclipse Jetty Vulnerable to Improper Authentication via 'OpenIdAuthenticator' within 'LoginService'\n\n\n## Solution\nFixed in version [**11.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.15) and [**10.0.15**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.15) by [this](https://github.com/eclipse/jetty.project/commit/24b7d06fd5ce5468caa3eaa93688879fb2900fda) commit and in [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/5f48b4170f36b275e1576548b44bd5009feba669) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-287](https://cwe.mitre.org/data/definitions/287.html)\n\n","text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-287"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2021-34428 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2021-34428 BDSA-2021-1877)"},"fullDescription":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2021-1877](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1877)([CVE-2021-34428](https://nvd.nist.gov/vuln/detail/CVE-2021-34428)) - Eclipse Jetty Vulnerable to Insufficient Session Expiration via 'SessionListener#sessionDestroyed' Method\n\n\n## Solution\nFixed in:\n* [**9.4.41.v20210516**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.41.v20210516) by [this](https://github.com/eclipse/jetty.project/commit/087f486b4461746b4ded45833887b3ccb136ee85) commit, \n* [**10.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit, \n* [**11.0.3**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.3) by [this](https://github.com/eclipse/jetty.project/commit/cd6462a6252d083b3c9ea2684aab0b4c9669ed19) commit.\n\nThe latest stable releases are available [here](https://github.com/eclipse/jetty.project/releases).\n\n## Workaround\nThe vendor has [stated](https://github.com/eclipse/jetty.project/security/advisories/GHSA-m6cp-vxjx-65j6) that a workaround is to ensure that the application catches all Throwables within their `SessionListener#sessionDestroyed()` implementations.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-613](https://cwe.mitre.org/data/definitions/613.html)\n\n","text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-613"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2023-36479 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","shortDescription":{"text":"Transitive Dependency: jetty-http 9.4.24.v20191120 from wiremock 2.8.0 (CVE-2023-36479 BDSA-2023-2464)"},"fullDescription":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| wiremock 2.8.0  | Not available  | Not available |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| jetty-http 9.4.24.v20191120  | 9.4.53.20231009  | 12.0.3 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=e52856ea-7007-4915-aa2a-423e4cceb826)\n\n\n## Description\nEclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2023-2464](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2464)([CVE-2023-36479](https://nvd.nist.gov/vuln/detail/CVE-2023-36479)) - Eclipse Jetty Vulnerable to Improper Neutralization of Quoting Syntax via Errant Command in CGI Servlet\n\n\n## Solution\nFixed in versions:\n* [**12.0.0.beta1**](https://github.com/eclipse/jetty.project/releases/tag/jetty-12.0.0.beta1) by [this](https://github.com/eclipse/jetty.project/commit/6ce5a0fbcdf06ae647dfd304dd81a1f9b0691a5c) commit.\n* [**11.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-11.0.16) and [**10.0.16**](https://github.com/eclipse/jetty.project/releases/tag/jetty-10.0.16) by [this](https://github.com/eclipse/jetty.project/commit/c29491e5ac70c98e4d7d7dff2a6465ddecc45c0c) commit.\n* [**9.4.52.v20230823**](https://github.com/eclipse/jetty.project/releases/tag/jetty-9.4.52.v20230823) by [this](https://github.com/eclipse/jetty.project/commit/ec7e1fd173481e526db4092f558aa2b5aab57580) commit.\n\nThe latest stable releases can be found [here](https://eclipse.dev/jetty/download.php).\n\n## Workaround\nThe vendor has issued the following workaround:\n\n\u003e The` org.eclipse.jetty.servlets.CGI` Servlet should not be used. Fast CGI support is available instead.\n\n## Dependency tree\n- org.owasp.webgoat.lesson:xxe:v8.1.0:-maven\n    - com.github.tomakehurst:wiremock:2.8.0\n        - org.eclipse.jetty:jetty-server:9.4.24.v20191120\n            - org.eclipse.jetty:jetty-http:9.4.24.v20191120\n\n\n## References\nCommon Weakness Enumeration: [CWE-149](https://cwe.mitre.org/data/definitions/149.html)\n\n","text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-149"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2020-1745 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2020-1745 BDSA-2020-0483)"},"fullDescription":{"text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2020-0483](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0483)([CVE-2020-1745](https://nvd.nist.gov/vuln/detail/CVE-2020-1745)) - Undertow Vulnerable to Remote File Inclusion via Unauthenticated JavaServer Pages Upload\n\n\n## Solution\nFixed in [**2.0.30.Final**](https://github.com/undertow-io/undertow/releases/tag/2.0.30.Final) by [this](https://github.com/undertow-io/undertow/commit/e3f460b4d930960bde0f91acdb9815d03ccf6e1d) commit.\n\n## Workaround\nIf not using AJP, it can be disabled in your `standalone-\\*.xml` and/or `domain.xml` file by setting `\"enabled=false\"` on the following line:\n\n`\u003cajp-listener name=\"ajp\" socket-binding=\"ajp\" enabled=\"false\"/\u003e`\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-284](https://cwe.mitre.org/data/definitions/284.html)\n\n","text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-284"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-20220 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2021-20220 BDSA-2021-0444)"},"fullDescription":{"text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2021-0444](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0444)([CVE-2021-20220](https://nvd.nist.gov/vuln/detail/CVE-2021-20220)) - Undertow Vulnerable to HTTP Request Smuggling via CVE-2020-10687 Fix Regression\n\n\n## Solution\nFixed in:\n* **[2.0.34](https://github.com/undertow-io/undertow/releases/tag/2.0.34.Final)** by [this](https://github.com/undertow-io/undertow/commit/ce19d7d72) commit.\n* **[2.1.6](https://github.com/undertow-io/undertow/releases/tag/2.1.6.Final)** by [this](https://github.com/undertow-io/undertow/commit/2792ae69e) commit.\n* **[2.2.0](https://github.com/undertow-io/undertow/releases/tag/2.2.0.Final)** by [this](https://github.com/undertow-io/undertow/commit/b73042757) commit.\n\nThe latest stable releases are available [here](https://github.com/undertow-io/undertow/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n","text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-444"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-10687 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2020-10687 BDSA-2020-2102)"},"fullDescription":{"text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nIt was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-2102](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2102)([CVE-2020-10687](https://nvd.nist.gov/vuln/detail/CVE-2020-10687)) - Undertow Vulnerable to HTTP Request Smuggling via Permitted Invalid Characters\n\n\n## Solution\nFixed in:\n* **[2.0.34](https://github.com/undertow-io/undertow/releases/tag/2.0.34.Final)** by [this](https://github.com/undertow-io/undertow/commit/ce19d7d72) commit.\n* **[2.1.6](https://github.com/undertow-io/undertow/releases/tag/2.1.6.Final)** by [this](https://github.com/undertow-io/undertow/commit/2792ae69e) commit.\n* **[2.2.0](https://github.com/undertow-io/undertow/releases/tag/2.2.0.Final)** by [this](https://github.com/undertow-io/undertow/commit/b73042757) commit.\n\nThe latest stable releases are available [here](https://github.com/undertow-io/undertow/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-444](https://cwe.mitre.org/data/definitions/444.html)\n\n","text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-444"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2021-3859 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2021-3859 BDSA-2022-0318)"},"fullDescription":{"text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0318](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0318)([CVE-2021-3859](https://nvd.nist.gov/vuln/detail/CVE-2021-3859)) - Undertow Vulnerable to Denial-of-Service (DoS) via Invocation Timeout\n\n\n## Solution\nFixed in [**2.2.15**](https://github.com/undertow-io/undertow/releases/tag/2.2.15.Final) by [this](https://github.com/undertow-io/undertow/commit/e43f0ada3f4da6e8579e0020cec3cb1a81e487c2) commit.\n\nThe latest stable releases are available [here](https://undertow.io/downloads.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3629 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2021-3629 BDSA-2021-3463)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3463](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3463)([CVE-2021-3629](https://nvd.nist.gov/vuln/detail/CVE-2021-3629)) - Undertow Vulnerable to Denial-of-Service (DoS) via Improper HTTP/2 Flow Control\n\n\n## Solution\nFixed in versions [**2.2.18**](https://github.com/undertow-io/undertow/releases/tag/2.2.18.Final) by [this](https://github.com/undertow-io/undertow/commit/4d5f6e1d5eabe2fdc8f37814d710ea5c53199379) commit and [**2.3.0-alpha1**](https://github.com/undertow-io/undertow/releases/tag/2.3.0.Alpha1) by [this](https://github.com/undertow-io/undertow/commit/2aa5d35d096004ae2b22c6270dd1268bdceda8fc) commit.\n\nThe latest stable releases can be found [here](https://undertow.io/downloads.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-1259 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2022-1259 BDSA-2022-2100)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-2100](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2100)([CVE-2022-1259](https://nvd.nist.gov/vuln/detail/CVE-2022-1259)) - Undertow Vulnerable to Denial-of-Service (DoS) via Improper HTTP/2 Flow Control\n\n\n## Solution\nFixed in versions [**2.2.18**](https://github.com/undertow-io/undertow/releases/tag/2.2.18.Final) by [this](https://github.com/undertow-io/undertow/commit/4d5f6e1d5eabe2fdc8f37814d710ea5c53199379) commit and [**2.3.0-alpha1**](https://github.com/undertow-io/undertow/releases/tag/2.3.0.Alpha1) by [this](https://github.com/undertow-io/undertow/commit/2aa5d35d096004ae2b22c6270dd1268bdceda8fc) commit.\n\nThe latest stable releases can be found [here](https://undertow.io/downloads.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2019-14888 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2019-14888 BDSA-2020-0115)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-0115](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0115)([CVE-2019-14888](https://nvd.nist.gov/vuln/detail/CVE-2019-14888)) - Undertow Vulnerable to Denial-of-Service (DoS) via Buffer Overflow in HTTPS Functionality\n\n\n## Solution\nFixed in [**2.0.30**](https://github.com/undertow-io/undertow/releases/tag/2.0.30.Final) by [this](https://github.com/undertow-io/undertow/commit/869efc1339b63a4659df82b68ed8243c4cf90d10) commit and [this](https://github.com/undertow-io/undertow/commit/d76a02cd16f9d8ee0c948026758a02a7c7b6d218) commit.\n\nThe latest stable releases are available [here](https://github.com/undertow-io/undertow/releases/).\n\n## Workaround\nEnable HTTP2 (`enable-http2=\"true\"`) in Undertow's HTTPS settings.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3597 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2021-3597 BDSA-2021-2789)"},"fullDescription":{"text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2789](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2789)([CVE-2021-3597](https://nvd.nist.gov/vuln/detail/CVE-2021-3597)) - Undertow Vulnerable to Denial-of-Service (DoS) via 'HTTP2SourceChannel' Implementation\n\n\n## Solution\nFixed in [**2.2.9**](https://github.com/undertow-io/undertow/releases/tag/2.2.9.Final) and [**2.0.39**](https://github.com/undertow-io/undertow/releases/tag/2.0.39.Final) by [this](https://github.com/undertow-io/undertow/commit/b92904715c5f5857827cf4201b9bce5844919259) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-1757 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2020-1757 BDSA-2019-4367)"},"fullDescription":{"text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2019-4367](https://openhub.net/vulnerabilities/bdsa/BDSA-2019-4367)([CVE-2020-1757](https://nvd.nist.gov/vuln/detail/CVE-2020-1757)) - Undertow Vulnerable to URL-based Security Bypass via Improper servletPath Normalization\n\n\n## Solution\nFixed in version [**2.0.30**](https://github.com/undertow-io/undertow/releases/tag/2.0.30.Final).\n\n## Workaround\nThe issue can be mitigated by configuring `UrlPathHelper` to ignore the `servletPath` via setting \"alwaysUseFullPath\".\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\nCommon Weakness Enumeration: [CWE-200](https://cwe.mitre.org/data/definitions/200.html)\n\n","text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20","external/cwe/cwe-200"]},"defaultConfiguration":{"level":"warning"}},{"id":"BDSA-2022-4041 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (BDSA-2022-4041)"},"fullDescription":{"text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-4041](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-4041) - Undertow Vulnerable to Server Identity Spoofing via Missing Server Identity Validation in HTTPS Connections\n\n\n\n## Solution\nThis issue was fixed in version [**2.3.5**](https://github.com/undertow-io/undertow/releases/tag/2.3.5.Final) by [this](https://github.com/undertow-io/undertow/commit/e5071e52b72529a14d3ec436ae7102cea5d918c4) commit and [this](https://github.com/undertow-io/undertow/commit/cc2f99a2fea3d5cb57ba2e578588bdc5285e6429) commit.\n\nThe fix was cherry-picked and backported into [**2.2.24**](https://github.com/undertow-io/undertow/releases/tag/2.2.24.Final) by [this](https://github.com/undertow-io/undertow/commit/a4d3b167126a803cc4f7fb740dd9a6ecabf59342) commit and [this](https://github.com/undertow-io/undertow/commit/a511cb5cfc8e9b5653f1b796704e36575f471829) commit.\n\nThe latest stable releases can be found [here](https://github.com/undertow-io/undertow/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-295](https://cwe.mitre.org/data/definitions/295.html)\n\n","text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-295"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-1108 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2023-1108 BDSA-2023-0526)"},"fullDescription":{"text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0526](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0526)([CVE-2023-1108](https://nvd.nist.gov/vuln/detail/CVE-2023-1108)) - Undertow Vulnerable to Denial-of-Service (DoS) via Infinite Loop in 'SslConduit.java' File\n\n\n## Solution\nFixed in [**2.3.5**](https://github.com/undertow-io/undertow/releases/tag/2.3.5.Final) by [this](https://github.com/undertow-io/undertow/commit/ccc053b55f5de9872bc1a4999fd6aa85fc5e146d) commit.\n\nThe fix was cherry-picked and backported into [**2.2.24**](https://github.com/undertow-io/undertow/releases/tag/2.2.24.Final) by [this](https://github.com/undertow-io/undertow/commit/1302c8cf4476936802504efe0d36c58dcd954f78) commit.\n\nThe latest stable releases are available [here](https://github.com/undertow-io/undertow/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-835](https://cwe.mitre.org/data/definitions/835.html)\n\n","text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-835"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-3690 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2021-3690 BDSA-2021-2615)"},"fullDescription":{"text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nundertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-2615](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-2615)([CVE-2021-3690](https://nvd.nist.gov/vuln/detail/CVE-2021-3690)) - undertow Vulnerable to Denial-of-Service (DoS) via Memory Exhaustion with Incoming WebSocket PONG Messages\n\n\n## Solution\nFixed in [**2.2.10**](https://github.com/undertow-io/undertow/releases/tag/2.2.10.Final) by [this](https://github.com/undertow-io/undertow/commit/845881a7843a8bdb0ef1c66774237bd63061ea9e) commit.\n\nFixed in [**2.0.40**](https://github.com/undertow-io/undertow/releases/tag/2.0.40.Final) by [this](https://github.com/undertow-io/undertow/commit/97482a5d4114001d45f9b07f1d2893749cdcba8b) commit.\n\nThe latest stable releases can be found [here](https://undertow.io/downloads.html).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-3223 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2023-3223 BDSA-2023-2318)"},"fullDescription":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An unauthenticated attacker could exploit this by manipulating Servlet annotations to exhaust system resources and cause a system crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow contains a denial-of-service (DoS) vulnerability. An unauthenticated attacker could exploit this by manipulating Servlet annotations to exhaust system resources and cause a system crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-2318](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-2318)([CVE-2023-3223](https://nvd.nist.gov/vuln/detail/CVE-2023-3223)) - Undertow Vulnerable to Denial-of-Service (DoS) via Excessive Memory Allocation due to Improper 'fileSizeThreshold' Attribute Handling\n\n\n## Solution\nFixed in versions:\n* [**2.3.9**](https://github.com/undertow-io/undertow/releases/tag/2.3.9.Final) by [this](https://github.com/undertow-io/undertow/commit/22ab63b40d5e523538db2096160ee084ee04b9c0) commit and [this](https://github.com/undertow-io/undertow/commit/52cf6a779c4cf17dfc4cf159aaca986b567b2025) commit.\n* [**2.2.27**](https://github.com/undertow-io/undertow/releases/tag/2.2.27.Final) by [this](https://github.com/undertow-io/undertow/commit/86209e5dd84d06708957ead659b7ed8daa7fb912) commit and [this](https://github.com/undertow-io/undertow/commit/7094d86be5f81012ae09e06c897db0e8714d5243) commit.\n\nThe latest stable releases are available [here](https://mvnrepository.com/artifact/io.undertow/undertow-core).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-789](https://cwe.mitre.org/data/definitions/789.html)\n\n","text":"Undertow contains a denial-of-service (DoS) vulnerability. An unauthenticated attacker could exploit this by manipulating Servlet annotations to exhaust system resources and cause a system crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-789"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-10705 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2020-10705 BDSA-2020-1151)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-1151](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-1151)([CVE-2020-10705](https://nvd.nist.gov/vuln/detail/CVE-2020-10705)) - Undertow Vulnerable to Denial-of-Service (DoS) via Memory Leak in 'HttpReadListener' Component\n\n\n## Solution\nFixed in [**2.1.1**](https://github.com/undertow-io/undertow/releases/tag/2.1.1.Final) by [this](https://github.com/undertow-io/undertow/commit/c74b8ffa653adc442832c188171c2476b97cdbe6) commit.\n\nThe latest stable releases can be found [here](https://github.com/undertow-io/undertow/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-401](https://cwe.mitre.org/data/definitions/401.html)\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-401"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-27782 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2020-27782 BDSA-2021-0208)"},"fullDescription":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-0208](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-0208)([CVE-2020-27782](https://nvd.nist.gov/vuln/detail/CVE-2020-27782)) - Undertow Vulnerable to Denial-of-Service (DoS) via Improper Character Handling in AJP Connector Component\n\n\n\n\n## Workaround\nThe issue may be mitigated by using **HTTP/1.1** instead of AJP to proxy to the back-end.\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-2053 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2022-2053 BDSA-2022-2085)"},"fullDescription":{"text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS).\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-2085](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2085)([CVE-2022-2053](https://nvd.nist.gov/vuln/detail/CVE-2022-2053)) - Undertow Vulnerable to Denial-of-Service (DoS) via Uncaught 'RequestTooBigException'\n\n\n## Solution\nFixed in versions:\n* [**2.3.0.Alpha2**](https://github.com/undertow-io/undertow/releases/tag/2.3.0.Alpha2) by [this](https://github.com/undertow-io/undertow/commit/10ad8964162162ce6d441e951cb9efcdaa585916) commit.\n* [**2.2.19**](https://github.com/undertow-io/undertow/releases/tag/2.2.19.Final) by [this](https://github.com/undertow-io/undertow/commit/7d3a045da0fa4e4f3f6c4af145b87c7c15581748) commit.\n\nThe latest stable releases can be found [here](https://github.com/undertow-io/undertow/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-248](https://cwe.mitre.org/data/definitions/248.html)\n\n","text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-248"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-2764 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","shortDescription":{"text":"Transitive Dependency: undertow-core 2.0.28.Final from spring-boot-starter-undertow 2.2.2.RELEASE (CVE-2022-2764 BDSA-2022-2482)"},"fullDescription":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-undertow 2.2.2.RELEASE  | 2.7.10  | 3.0.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| undertow-core 2.0.28.Final  | 2.3.10.SP1-redhat-00001  | 2.3.10.SP1-redhat-00001 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=8d9859cf-7f8f-411d-9ee4-67bc42d7ba74)\n\n\n## Description\nUndertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-2482](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-2482)([CVE-2022-2764](https://nvd.nist.gov/vuln/detail/CVE-2022-2764)) - Undertow Vulnerable to Denial-of-Service (DoS) via 'LAST_CHUNK' in EJB Invocations\n\n\n## Solution\nFixed in [**2.3.0-final**](https://github.com/undertow-io/undertow/releases/tag/2.3.0.Final) by [this](https://github.com/undertow-io/undertow/commit/d9dcf4f996deb83e5453d60a74ff11b176b98757) commit.\nFixed in [**2.2.21.Final**](https://github.com/undertow-io/undertow/releases/tag/2.2.21.Final) by [this](https://github.com/undertow-io/undertow/commit/84d897850247564e1a25d2df7ce321bd5f49c340) commit.\n\nThe latest stable releases are available [here](https://mvnrepository.com/artifact/io.undertow/undertow-core).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-undertow:2.2.2.RELEASE\n        - io.undertow:undertow-core:2.0.28.Final\n\n\n## References\nCommon Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html)\n\n","text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-400"]},"defaultConfiguration":{"level":"note"}},{"id":"CVE-2022-22965 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22965 BDSA-2022-0858)"},"fullDescription":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog).\n\n## Vulnerabilities(BDSA,CVE)\n:red_circle: [BDSA-2022-0858](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0858)([CVE-2022-22965](https://nvd.nist.gov/vuln/detail/CVE-2022-22965)) - Spring Framework Vulnerable to Remote Code Execution (RCE) via 'ClassLoader' Access Control Bypass with Java9 'getModule()' Method\n\n\n## Solution\nFixed in [**5.3.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18) by [this](https://github.com/spring-projects/spring-framework/commit/002546b3e4b8d791ea6acccb81eb3168f51abb15) commit and  [**5.2.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/996f701a1916d10202c1d0d281f06ab1f2e1117e) commit .\n\nThe latest releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n## Workaround\nAn official workaround for the issue has been outlined [here](https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement).\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-184](https://cwe.mitre.org/data/definitions/184.html)\nCommon Weakness Enumeration: [CWE-749](https://cwe.mitre.org/data/definitions/749.html)\n\n","text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"properties":{"security-severity":"9.1","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-184","external/cwe/cwe-749"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5398 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5398 BDSA-2020-0069)"},"fullDescription":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0069](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0069)([CVE-2020-5398](https://nvd.nist.gov/vuln/detail/CVE-2020-5398)) - Spring Framework Vulnerable to Command Injection via Reflected File Download Attack\n\n\n## Solution\nFixed by [this](https://github.com/spring-projects/spring-framework/commit/956ffe68587c8d5f21135b5ce4650af0c2dea933) commit in:\n* [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE)\n* [**5.1.13**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.13.RELEASE) \n* [**5.0.16**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.16.RELEASE)\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2020-5397 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5397 BDSA-2020-0070)"},"fullDescription":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2020-0070](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-0070)([CVE-2020-5397](https://nvd.nist.gov/vuln/detail/CVE-2020-5397)) - Spring Framework Vulnerable to Cross-Site Request Forgery (CSRF) via CORS Preflight Requests\n\n\n## Solution\nFixed in [**5.2.3**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.3.RELEASE).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-352](https://cwe.mitre.org/data/definitions/352.html)\n\n","text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-352"]},"defaultConfiguration":{"level":"error"}},{"id":"BDSA-2022-0847 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (BDSA-2022-0847)"},"fullDescription":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSoftware systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization.\n\n## Vulnerabilities(BDSA,CVE)\n:orange_circle: [BDSA-2022-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0847) - Spring Framework Vulnerable to Unsafe Deserialization in 'SerializationUtils' Class\n\n\n\n## Solution\nFixed in **[6.0.0-M4](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.0-M4)** by [this](https://github.com/spring-projects/spring-framework/commit/7f7fb58dd0dae86d22268a4b59ac7c72a6c22529) commit.\n\nFixed in **[5.3.18](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.18)** and **[5.2.20](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.20.RELEASE)** by [this](https://github.com/spring-projects/spring-framework/commit/3811cd4c0a0be3aac6e842cf1890610ce986449d) commit.\n\n**Note**: These patches simply annotate the dangerous method as deprecated or documents the dangers. It is the responsibility of developers who call this method to ensure that it is not used with unsanitized untrusted input.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-502](https://cwe.mitre.org/data/definitions/502.html)\n\n","text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"properties":{"security-severity":"8.9","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-502"]},"defaultConfiguration":{"level":"error"}},{"id":"CVE-2022-22950 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22950 BDSA-2022-0820)"},"fullDescription":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0820](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0820)([CVE-2022-22950](https://nvd.nist.gov/vuln/detail/CVE-2022-22950)) - Spring-Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expression\n\n\n## Solution\nFixed in version [**5.3.17**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.17) by [this](https://github.com/spring-projects/spring-framework/commit/94af2ca06bf711de03286999b1c64a703d6de552) commit.\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/tags).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-770](https://cwe.mitre.org/data/definitions/770.html)\n\n","text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-770"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22118 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22118 BDSA-2021-1588)"},"fullDescription":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-1588](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-1588)([CVE-2021-22118](https://nvd.nist.gov/vuln/detail/CVE-2021-22118)) - Spring Framework Vulnerable to Privilege Escalation via Unsafe Directory Management in 'WebFlux' Component\n\n\n## Solution\nFixed in [**5.3.7**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.7)  by [this](https://github.com/spring-projects/spring-framework/commit/cce60c479c22101f24b2b4abebb6d79440b120d1) commit and [this](https://github.com/spring-projects/spring-framework/commit/0d0d75e25322d8161002d861fff3ec04ba8be5ac) commit, and in [**5.2.15**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.15.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/85ad63bd35f6f10fa5549ba9a11869144338bd8a) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases/).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-264](https://cwe.mitre.org/data/definitions/264.html)\nCommon Weakness Enumeration: [CWE-376](https://cwe.mitre.org/data/definitions/376.html)\n\n","text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-264","external/cwe/cwe-376"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22096 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22096 BDSA-2021-3236)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2021-3236](https://openhub.net/vulnerabilities/bdsa/BDSA-2021-3236)([CVE-2021-22096](https://nvd.nist.gov/vuln/detail/CVE-2021-22096)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22971 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22971 BDSA-2022-1330)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1330](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1330)([CVE-2022-22971](https://nvd.nist.gov/vuln/detail/CVE-2022-22971)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper WebSocket STOMP Protocol Handling\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20863 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20863 BDSA-2023-0847)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0847](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0847)([CVE-2023-20863](https://nvd.nist.gov/vuln/detail/CVE-2023-20863)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.24**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.24.RELEASE)\n* [**5.3.27**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.27)\n* [**6.0.8**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.8)\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2021-22060 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2021-22060 BDSA-2022-0011)"},"fullDescription":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-0011](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-0011)([CVE-2021-22060](https://nvd.nist.gov/vuln/detail/CVE-2021-22060)) - Spring Framework Vulnerable to Log File Injection via Insufficient Input Validation\n\n\n## Solution\nFixed in versions [**5.3.14**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.14) and [**5.2.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.19.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-74](https://cwe.mitre.org/data/definitions/74.html)\n\n","text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-74"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2023-20861 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2023-20861 BDSA-2023-0638)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2023-0638](https://openhub.net/vulnerabilities/bdsa/BDSA-2023-0638)([CVE-2023-20861](https://nvd.nist.gov/vuln/detail/CVE-2023-20861)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Crafted SpEL Expressions\n\n\n## Solution\nFixed in:\n* [**5.2.23**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.23.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/52c93b1c4b24d70de233a958e60e7c5822bd274f) commit,\n* [**5.3.26**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.26) by [this](https://github.com/spring-projects/spring-framework/commit/430fc25acad2e85cbdddcd52b64481691f03ebd1) commit,\n* [**6.0.7**](https://github.com/spring-projects/spring-framework/releases/tag/v6.0.7) by [this](https://github.com/spring-projects/spring-framework/commit/935c29e3ddba5b19951e54f6685c70ed45d9cbe5) commit.\n\nThe latest stable releases are available [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2020-5421 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2020-5421 BDSA-2020-2431)"},"fullDescription":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nIt was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2020-2431](https://openhub.net/vulnerabilities/bdsa/BDSA-2020-2431)([CVE-2020-5421](https://nvd.nist.gov/vuln/detail/CVE-2020-5421)) - Spring Framework Vulnerable to RFD Protection Bypass via jsessionid\n\n\n## Solution\nFixed in:\n* [**5.2.9**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.9.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/899761f0a8890353dc01f10d2af96ae192f3e655) commit,\n* [**5.1.18**](https://github.com/spring-projects/spring-framework/releases/tag/v5.1.18.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/a63c8886c00f30fea5b25f50ddf6f56c6eb957bd) commit,\n* [**5.0.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.0.19.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/aec3a4c69e02d87f87258b0ab5c1d6c83f4cb44f) commit,\n* [**4.3.29**](https://github.com/spring-projects/spring-framework/releases/tag/v4.3.29.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/2f75212eb667a30fe2fa9b5aca8f22d5e255821f) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22970 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22970 BDSA-2022-1329)"},"fullDescription":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality.\n\n## Vulnerabilities(BDSA,CVE)\n:yellow_circle: [BDSA-2022-1329](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1329)([CVE-2022-22970](https://nvd.nist.gov/vuln/detail/CVE-2022-22970)) - Spring Framework Vulnerable to Denial-of-Service (DoS) via Improper Data Binding Implementation\n\n\n## Solution\nFixed in version [**5.3.20**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.20) and in version [**5.2.22**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.22.RELEASE).\n\nThe latest stable releases can be found [here](https://github.com/spring-projects/spring-framework/releases).\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-684](https://cwe.mitre.org/data/definitions/684.html)\n\n","text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"properties":{"security-severity":"6.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-684"]},"defaultConfiguration":{"level":"warning"}},{"id":"CVE-2022-22968 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","shortDescription":{"text":"Transitive Dependency: spring-tx 5.2.2.RELEASE from spring-boot-starter-data-jpa 2.2.2.RELEASE (CVE-2022-22968 BDSA-2022-1040)"},"fullDescription":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"help":{"markdown":"\n## Upgrade Guidance\n\n\n### Upgrade Guidance for Direct dependency\n\n| **Affected Direct Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-boot-starter-data-jpa 2.2.2.RELEASE  | 2.7.17  | 3.1.5 |\n\n### Upgrade Guidance for Transitive dependency\n\n| **Affected Transitive Dependency**  | **Recommended short term version** | **Recommended long term version** |\n| :--- | :--- | :--- |\n| spring-tx 5.2.2.RELEASE  | 5.3.30  | 6.0.13 |\n\n\n[Click Here To See More Details in Black Duck](https://us03-qa-hub11.nprd.sig.synopsys.com/api/projects/61f17a4d-fafc-468c-8f06-921f7fc9af61/versions/22332adc-236e-4c60-9714-1d842976a404/vulnerability-bom?selectedComponent=56e76a03-555a-42c1-af9b-978c1ccc2b9c)\n\n\n## Description\nSpring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented.\n\n## Vulnerabilities(BDSA,CVE)\n:large_blue_circle: [BDSA-2022-1040](https://openhub.net/vulnerabilities/bdsa/BDSA-2022-1040)([CVE-2022-22968](https://nvd.nist.gov/vuln/detail/CVE-2022-22968)) - Spring Framework Vulnerable to Data Binding Protection Bypass via 'disallowedFields' Patterns\n\n\n## Solution\nFixed  in [**5.3.19**](https://github.com/spring-projects/spring-framework/releases/tag/v5.3.19) by [this](https://github.com/spring-projects/spring-framework/commit/a7cf19cec5ebd270f97a194d749e2d5701ad2ab7) commit and [**5.2.21**](https://github.com/spring-projects/spring-framework/releases/tag/v5.2.21.RELEASE) by [this](https://github.com/spring-projects/spring-framework/commit/833e750175349ab4fd502109a8b41af77e25cdea) commit.\n\n\n\n## Dependency tree\n- org.owasp.webgoat:webgoat-container:v8.1.0:-maven\n    - org.springframework.boot:spring-boot-starter-data-jpa:2.2.2.RELEASE\n        - org.springframework.data:spring-data-jpa:2.2.3.RELEASE\n            - org.springframework:spring-tx:5.2.2.RELEASE\n\n\n## References\nCommon Weakness Enumeration: [CWE-20](https://cwe.mitre.org/data/definitions/20.html)\n\n","text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"properties":{"security-severity":"3.8","tags":["security","open_source_analysis","transitive_dependency","patch_available","external/cwe/cwe-20"]},"defaultConfiguration":{"level":"note"}}]}},"results":[{"message":{"text":"Jsoup has a cross-site scripting (XSS) vulnerability due to an absence of correct parameter input validation. A remote attacker could insert JavaScript code into dynamically generated content in order to steal a victim's session tokens, cookies, or other sensitive information.\n\n**Note** This vulnerability applies to installations where the non-default `SafeList.preserveRelativeLinks` option is enabled and the HTML site does not have a Content Security Policy is in place."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/cross-site-scripting/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-36033 jsoup 1.11.3: org.jsoup","partialFingerprints":{"primaryLocationLineHash":"81843735fa91dc2fdef15fbe2067fa316c969cdae10aca600a351c3f19c89cbd"}},{"message":{"text":"jsoup is vulnerable to denial-of-service (DoS) due to flaws in its parsing component. A remote attacker could impact the performance of the application, or cause it to crash, by sending maliciously crafted HTML or XML documents to a vulnerable endpoint."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/cross-site-scripting/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-37714 jsoup 1.11.3: org.jsoup","partialFingerprints":{"primaryLocationLineHash":"039d5e82115a1d5ede90792532486e66f648ab74695c8e0cb9440e1901401973"}},{"message":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-17521 groovy-json 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","partialFingerprints":{"primaryLocationLineHash":"f947e1d1c5f16a47cd54ed50830de9f76a7623aebce8e6633ce0002182222301"}},{"message":{"text":"A vulnerability was found in netplex json-smart **V1** and **V2** due to an uncaught exception in parser. Successful exploitation of this issue could result in a denial-of-service (DoS) or potential sensitive data exposure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-27568 json-smart 2.3: spring-boot-starter-test 2.2.2.RELEASE: net.minidev","partialFingerprints":{"primaryLocationLineHash":"4a22441c959ca126edda931e724037794e15348e95f85a11e4a680282dc25e21"}},{"message":{"text":"json-smart is vulnerable to denial-of-service (DoS) due to not having any depth limits of nested arrays or objects. Parsing large nested elements could result in stack exhaustion and an application crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-1370 json-smart 2.3: spring-boot-starter-test 2.2.2.RELEASE: net.minidev","partialFingerprints":{"primaryLocationLineHash":"f7e0f33a2d35e0b571fb0322674defd64826718a305eb02fd10965315b7db9e2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"41945eac3da34535277c03ea8149feea52e7e94acfc1801ddd06f5bfc05189d2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fb6356ed4583c1f70f2b7e3748d952a70758a5ed49ef119b3906aefe5af75c96"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f14420b6143d1d1ac55eaed195159853af70dc7af2117cc003f89fb0728ef4b6"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2eb01c3d75535f7b466b453349a23047a89b3eb844910c06712b15cc15206904"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c654075b93a5531aa1f7c7ef8be0f2687bba6d76a17f62bd431dfa1d2cac94ec"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"708679676fa5448d9abbed1e8479c7240eae255ba8dc1198b5b3e9f0cf832645"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"70b04c20b036808b6a042f22957865a8ef61ff9f40859997f457c1bf4549fd0a"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"697dc70dc5e65f7c6e0ebf9ab4049dbc5e0f41ef8cd52c72b7cedfbb19cafb32"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cc581c8a236c481107d07903b6d40acb95bcbd4c7a231761aa4e72f8bac06463"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5376e02928d56d14cc4cd2ef54bc7df89127b2b7bf688640c7f840c5fb399255"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1a6ba4a91b8f29ab26da9c23594135c73b6231c349782dcdaa28f256fd54e8a3"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"69f186560121e34c16f63bee9519d77d891280860d350de41f86a9ec7dfd2e9e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a69a4ee5b229213a37c7da7ead891d23955e0037c9270c3baa6e2f5a70f8593b"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"053d59cc853b44c98ba1480d23ebfe55d79c801e1408384b46db12e6dab7f9c4"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"23024805d4c8959c3a3d24dd6f1da8aa29508f1aa5a918749358979b77740337"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"108d6c23136fcde65c6eca408a026db397d9a96d07cb7a23b4fa93615038ef59"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5f487be0fa91296c6e43e034d68be053c6a4805983e0da76fd34bfa1977d2ee4"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7d85a648093aebbb5fd7c768a7d5ececa5adfbce7cc73f6b0381fc9e52a84ca5"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e96cde4584ec64921feb5f09ffdcd92d480ef86af1530fbea6223356ea0cc5a2"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6b44495d39396ee8028183124be73b9b69b48885ddd7924ac5b5d8b4f57e8fad"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"838c2599f7d5af3a9d1e0dc26f5830885b3dd765b7cb71c2177e29f2363c5d00"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"55bad253097deba4e7dd55ab987bd4bed651e8b9691a2527a130167267974403"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b00057e61597411b99a3cc7dccb666462fad06e63f1e19265996705acdccbd34"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"72608424974f801de7a534edbdf48faf99ec344b7dc8eceeecfff27333bfe396"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"caf24422bfbef417d94d90dc43ea38b004c8b484247681146507ad245ed90082"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c31f97a958212ff25f3f27660b5d229485793a9fb63ea42257ba69ead59fc9b1"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9f34ff00d81ee40ab3db66896bef828ba6e134397eb887b7145f194cea1a3b53"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b5364a1843a7577542042cb516782505e1debf1dcf3dbc72ea4428c8b04f38fd"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b4977e33ae21856c9ea7278a33de1545952b25d6b99d0696e21b2d478263d3fe"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"66650b8db9ab33beea41c1870527ce5fc026b777f504a48c3ce600761bf9b82a"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"127278b4a2011b1a5732b09ac5d160c0f703ddace9a1f5a246f177018f25ad83"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"edb24eb51f4dd2b2633eeee0732734c87aa2b1c5bde2556c96deafd0733da4fe"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"402ccfe4a9fc9988eba7d56d2adacfcac33e608f1292918cc9e332367cca6fad"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f9df06c7e4a4f1f9308a71abe5da4c3287a533b02b657f9cd13a9661bda7d0fa"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"558dc9230f2c126dcc82f4d59057dc7e3d3bb68aeee758adcf7dfa9e86879b43"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eec3e3817cfddfcca9889b3d1ff21279703d6b18218ff19f754cc978a52fb286"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"16461d5c065cc90177cf1f0a18591a51d2942746c7ce335b38cf317d42d7cee1"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e431361acf8cda706104614f6a355d7bd65696c30298d5c770934ee48aa0b7e4"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"54b04fe861bd149dcac2c6e9ca4af68540a322cdc0322103b6b22b04451e9235"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cd144290165e09ccae1ef23cf38e632b38ebd6d454279bf240f94a5211a83c9f"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ce39be086af087a0ba6e3a5a0f2169faa063af0fd6ff5c94661cbbc4e503ee9f"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b9db8a401c075b533fc64247eeaaf49d23bc744620d42eb016572a57d72326cc"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d494ac830632dcbf9c94a4e6d2892093f23b90db45990c9e08d295865fbdbd3f"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7595fd201fe91a8594ad89806500ee864868710c4ce2895dba9484f2031f1b15"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dd8b8e95a57dbe775b72a19b3e7894a797f3682c0b070b9d0abe4630fa162075"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e0159a6c1299a861866d1a4e520e7b5abb8af081f6c4b8886eb55c726ac055ef"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"18e685f0a4959ac8d219c83f92ccfdc301873f2ce51f154d8916de771bba429e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7c71f7c3bd82fbfb44d291b9493d513da416b03f7f5864910de6c327246c3fbc"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0a720d4208146c71e4dbfb094e356540bc2af20286f29d7000e6dd30a4137025"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c70d4586d9af01d8a2d9123b5b6696d6f26d7f4dcee8e02a0b947bc79fa8dc6b"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6fd80dafc7c3a92fd0a787e19e6db22e81ee8bf62a06e7c6279287bd19801951"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eca346eef2443d3a30692bd6daa85af02ae360c55543de6564b0b4bf00b35cc4"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d8003088180768485390f8eca640c3ec057b68e9b9b9baa164cc74cb663bc946"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2426a3b250932cad5af8d37f522aee1b0647add5da5eec613b1e373bd7959c2d"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0ff70d2fe63d37995047898b7a977be1764ade6599637e1b682c3729f77c30de"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a70d7f11e34ffa2e0dc1a211d7262314e281e754796e6ce82a4cfd0fed54b178"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a48b27d17e05a6e1c82bb61436cd6285fff25f29cdd28b68ca407649b7e895d4"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ac5b3ba99b218c4d9d5864571681e0e67313be88b82afaf8508a9d22d796108e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"58a3443a3131c1f975b769c66e6ae41085a0a30a5afb21888331856add1808e8"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4f82eb8c6b14c2f47fb9a69ea1cdcb07b23a474f5e2d84ae974e1307c1e65e92"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9ca385d373a2e15a8446caae9e22c23572aaccb0963613e3502f8331f5643db7"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9827354454a2fe987cf48cb5cbcf4bf69b1b710294a5e4eedc042a91202497af"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"40a488361cc61f63ccd1d0f3fd4f1e758ac877250ac3c09d6fc66c50e76fd56a"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"edde665b2923ad8782484e6ce0636e06caa043ba18f6810ed8bde862f3725894"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"83983333b0faefeb63b21dd31d032f5de46b2d8c4279ec9a4b79a79ac44eada5"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d672bfc8b512efa80d8d8509cbf6e38b858275adb9144926dee030d4c4c40c7f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d5d98f27fc3792c4a18790964a008f6082e3f6b04a96c4104acc9fdda8b4ff36"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"97930b1bce898ef61b5f0fc0d4f1bed398acdbf1543d5fb1ede0b679524d39aa"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"16bf5f97d46ce0bf90e5f97acf8bd8b8a430d4009e00f4b9bce95d63c6c180a9"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9800d7010bc6601020347026ad8916b75166afadb8f9627ea7e16df73bc13d1f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a9fb687b6989d74389d0ab59a51cb5287b9c5eb7ac4344f3685d0ef28f04f10f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8e69cf8596c1079422735c1160a18d1555bd28e4cded48c4989a3ebb0e4da874"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"775cee1a0d014b1096d0129bc63716b8b0fd1fc5c687086488d461731447ab41"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ab4cff30a03d36a8c4ef740a3709bc4eec83f0a2ea81f3f962064c8a45bb4430"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5400776419a2af20e06e6f2b984f7c1957cc48d5378ce028ccba21336868ee0b"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b117bc4f0c47dbc6bc091dff42a4d4e88282376acbb26f95d779e5d738e7ade6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"47e45fe41d4de857965b5ba171950a1dff7928a8a3cde14c12846ee97c0b1434"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"408de0593ac3bbf75a7df8f8e344d1a04cc9f749e03b7ed9ba492a312f85af2b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2395a42f491d6294997f2129fdbf168d206768511052dc323e1f9d609e55d8a8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"71caf30e811bd6a0addbd332addbeb66f4eb0829038a62429480e0e0fc8bdecc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8b150e3474d592b2573797282c058beb3ebfaac8814bced1d5032c69b94305c7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5b146c1a6307b01cd4b1f79adea97872695eff5e8fc734857262d94bac108ead"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e3737014c5616932d83adf65c2f1b666c42e0d09af8b322cc762f2a03a608787"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3e4d57ee69439c4dbfac9721f4d323f1eb9116d9d6860db9ab73e3ec2af52975"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e9c9f5968b61b60948957fc129134043bf0ef9dcc75bf9909dbabbb6f3f30a53"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"213017dc7dd76af3342f1f2fe39b0c6b2bad6abccd4736252961f3b49b9bb5af"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7b58991fc0fc5cb6cfa4c4a13ed368aec272c833f624cc01d07349a3c397823e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"69d71c23167c6bc732348a81d1933822febf5318e06134b25f97dacc399efe7f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d5c257abfe915c2f3f00791f2912f2602b56f6170f24220bf3725f11399e5203"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c307a8be95426697810258d89c1053c61de1fc64aef2bb70d5ee3a62ed481495"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1b74d91b881411fe0fa1fa82e9d9670cbad1c81f16be466d62c977f676a991a0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"22d1c9640ce820ad9e2aaead71ff61995b29560746fdf585a177b08a132e4028"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"46c39369515ffafb8d4231e76228fcce5a2b895694e9c701c649226efb2848b5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"86307c92d53054ecca3bebd6878b2a4d8a5916515e7bb7bba2b2afbbcf93aa57"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2aa16bed9bc81343356c21d1c468f802877e598f79c0002072d18495c6450c77"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6ee8532581a7d0c0c093c2ef231963a0b1c83eea6d5ba87deafedc52a74dca66"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"05b8d2e0638fb5eb9a1dc39d22c55a87192f5257fffcf0d7216e4f240685405a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"72ebc74bb5483ada6c065c86ab9b46a4b6c200a7d5965afe3b43228a63bef42a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1e5f23c1156c369a81de9b093a3efa33971483fb2fadb2ff3256c454efde6c7b"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5d3405e70a6f4f46fbad457070589d36dbe6d32255d2394dee50e3241824ba0d"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8a94a8e5b860c1dafbda7d5bdf9a20264c1be24245bc909ea04233f174c06c0e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1a17c54754467acd5cb2659e9b1b5d7b6708fbac5b96f1647d7ede64f7b7f220"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f249aec6a27749437d264adef65e3ed8b119e0070afa393beee94213ed22b316"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"654863a01b140aa0f1714d3bfab1a17680207b2e9e4556b8128ece3cf2c3bb61"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d3797fce99b840cdb4347363dc487945167cbbfa8b9cb89cdcd4d4eb0585e27d"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"abe929dcecfaf47db5047aec63cfbafda0298eff51a4a9bc12a9584cb8371234"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"09f156c9945486b6f1b0568bb209e446b3f511e49ff1b19d83d8ce459bc405c5"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"121f6aef92b791b03c963d33ca60cabf71774a42889a4d0b0c63b600089ea906"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"12d4b85195874e7c0b75628dc90244b70905a43c8f8834b36cc98ee75a50df0a"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"67bdbe33e0a6b656d5d97241c32b361d13068093def20f11bdb06fec9418e5e6"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6557bbd5bd51f98feda73d5505042b10b428508da097dcffb35427c7d4efc8dc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d740b3a7f2d4cd59a3b56aab826c935cb97b8833196f424d463f82f4f0e0a58a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"844438c613bca12a15a9c9b80b950533950aef7def5b8a3cd9b05d9b47623585"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6b3fd40ac58087a3b10167b0aaeee52e786618a7aaf3d98804c0e7d4b5680e73"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6ec6ecf70431056bac26a96439e6d9725a56902785b467e671b9b2afb7c7eee1"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"120c50be02b37abd5aa1a17d6ee6a4c2b52b0bf8b13f81e96963f71ba3752b4e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f81ab46d29713406fa0a082eb37794ec808345bef177ddef0536312dd64cdcb4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"527a83c6f2badab0d9169e348f9bc00b7835267b9277f3baea0ad71d5ef5516c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e8a55625d3d8c8fff05ec90062709c10a773876335d49c4f764c53a19a7ab59"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c086250476c1c0fb3b51cfc5289939e81b682ae0107dab6eef729112f474105f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"200d84f3bdaac219352ec592c3a311a501491fb83a34f48a2d6b22e249c73dee"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a2ec315ac15f4246dd4af6af599c609faa9a9fda89ae6763b0c884de99761724"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"52985f1affbeeba9a8b023f62833fc965b4a58d8de718aa2b500efa34d497c40"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2c1fe358a6e285f66a6cae347237ba85c5b1b6f472361dcd47ef318870ffd1c6"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"885b9d7b6d4a223b55c060a37d0678ff9776a3ce96d4b876ac74bf4a14395d82"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e7b84efbaac69d51a360624b16ad94f83acc890f62b2c6d89223e26220eae15d"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"926220cbbca563ed9fbde9e40aabe41f48233aef2208b12d04b3b28d0702ea23"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e62dc1ab02aacf9be02bfb628a7fcd9bbbc57863a6b19d70886227ddaa6bcd8"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c4e959e093949069eb8329b826c62123a0fbd8f56dc34f67ca846b8f960cae1c"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f3048d05a0f6f7adfc41f6a3c663d525977b4d18ab75d10c2ee07029bb86c3c9"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a738d4b056f9abdf725b343881d08828448980bbca48bc76e48b8728939f7cd2"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"66b4b7940158abf39695bbeb98973f0497babb320336861b0470059f40193a4a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d9514b52776cba4542cb7efc0f2d50dba2d5c5f8cda31ca6d7006def1f86906f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e543a8d30b439ec3dfe90f4b330fbd52fc5d57b70c84bcfa13bc869243e36cba"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"48b167cce14ead24f8623d490dba895b91880812a25e2a1552ee98687b65981f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"49f342a67abea1c7088d42158a5005319e7e449f008233bfd734a24fd0716926"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"347f78dc5520cfadfbd90051efa574138398858ddca01216870276f142f93522"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ded2b1600149e0782529b01d7fefa3a67eff985f9771eff928fcfaa18add7f8f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b92491affe1650161cb34f13967873532c5db5521f215212ba0761b12dfdbc1d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0767c7f897c93d67f83ec6390d68825e1572e1e40723a2141618f535480a6288"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"179def4ce0221c3956e460f9abdb239cc2f813fb98499422e6d5b028ac92dc40"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"100cddcf3a1ccc1ac2f97cad3599365b3212bedfcec7e9961d1a1c1614bb4d90"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"91cb842f784e51c297e54baf78720ec471929c79a2dee9a3927e41fc465b14a7"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"795b71cc90cc107e7f42a0ae18251e1046d4d4bb2a6e6d38ca97768ef14b87a2"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"27e648d551d071d08f727b49f2f3965a22afbca8303500d564a3afec218fa77d"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8705b4903c61a4e399a656b210c9886072d329094588b9c78105088e21b6ccc9"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2aea2fde8a37b8c7fcdf5d2c57842f7817a51f56e71f2919f9f870996c142523"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d5c535144ee70b8e1b2066d84e8f170e337ac48ed025d91e12741e2e183d8a98"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"11b0ef3ec753e68c1dd2ff9a930bf73f8a32512f898461ff0690944c7c50ce95"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"78a010352de71a89b48b3275f4cbe9c175c17a5ee0646067a104b9f43d26a056"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"38589001cb8043cfd0c1fe146e66f0394acdb0789c301eccdc3e4f4e98d34c7f"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"00c335a5d575395c4b9f9a6a63ec2fee6f1653017846729bc24e81b440e1c818"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2928cc60fa1817720d24b05b3f3e9d1b19f7f9a0940f57b9c4801d5d2d9b58ec"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-beans 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6dff85f1fdd11b0afc5bd0d8fc322cda973fab52e88c39e74dad3026f1f3af9c"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"3ada8e1953686764c0d589b9726926b5c2ee6b5039a3fb11502777b87d001906"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e32e34c45df458b5d64b3f137c4c3906eb302e4bf23def1b8b3b327e89ba28bd"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1d592e1a2def7a0eecfc6d34e8382ba69d87c23e1ac558afe3814ecfe6adb235"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"8a7443dbb02b22278e2c8ceadf13d5596bb002b9b4c19e5511f655c883e83045"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9b59e2213a8e8416bd8c7b95867fdc3adc569a971ae9468e85f75d4b4f240eb9"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"ad53371cb3162af3676a4bfc54dff8ac5fd3288954d613f062636daaccae8a33"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"52ab5dcbff25e6fc9a04b13bd15b5e62137a0fb3954ee599cb4cbc49619494f2"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f1ffba79d30af66f8a5d6b7c791614001b4400b027a0a9927a7de2f72c07fc1b"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"199f5e933720c4224e05d6ec71217d64323b2aa04fd8ee51a5e549f95a12fdfb"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e1d86fc10c10ae05d926b2d71459d5404c518f595a910e8ec30608cbf191d30a"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f804f83b226910ebb4d21f3d7f048afef718ccabc358ce1f8cd3a429efc8d301"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f765e2e9c86ae9eb9c35e70fe2d9434a41a43f3086271459f3341dba8d77552f"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"acdad6d0f8c038bd275e4888bb56e9a7358bf4860f9108818971a377ff8ae760"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"bae5d8be61014d3187665025a4acb4fe91f743918b55049d8d95ad415a3bdf2a"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-server 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b291d7e5b2d896146a44ec6e45be12676147a15b1dce05aa512cec00f0af06f7"}},{"message":{"text":"JUnit4 is vulnerable to information disclosure via the `TemporaryFolder` directory. A local user could exploit this vulnerability in order to read files and directories stored within this directory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":130}}}],"ruleId":"CVE-2020-15250 junit 4.12: junit","partialFingerprints":{"primaryLocationLineHash":"6c71a4caa71fe79548e6d7b7d829d04ef7e2b1b5335348337c68f71b8d31aacf"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"50604fb96479c3b985073bb84a33e97d93a4457342ffed414219427371c52763"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a279e796ab46ef13930cf83d6250566d6a5b426c88e9905b0b5a182929387401"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e1b8e731ae4a972c6fcc87538f6dd03e3b4b33d5a2242b59eb7132aca14d3f2f"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"fbb2a12bd47ea761ec5c7d986f5f6f8ad804ba0f629a4a134c0a1be5b8890cd0"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"79d79b3a20a40898d00691475a75b56b3cb34c7f44f8ff2d2d2f703d0a8642de"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"cb62f1ea18c119e08049998c8872eaf819a869af6ed8a5150e8bec68d31c4264"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"4df9e70d0e5ca81b1370fb53b8840aac7587df3a9682b0234957f63a44f54447"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e18cfd938eebb73865730af18f7f4f14a906ff7a340aa7e2e3839d79c200157e"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"2c0f5fc8d964d943e52001b4b69e624e3813f4b97a395eedb820aca64fe853bd"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"53bcf884097313b14ee58069ec992f1d9b13a68eec00939e3288eee74ce0a972"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"dc77399fd713a8cf3bc883fd4a44b287f52c5bb46f55b41b7bd0767a3f860019"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a558e94b6afe6e9a696097d1856849def7c9368a8eb60930bea74438b36956a3"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f99bfb9c71f94635336683751168ac12337a7fc426c4046500d3f9e96d3e4644"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"59a68844bb6ab420bcd4d3e9e1c4246d623aa5cadf03b0e98d7c3018d8de0ce4"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-webapp 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"29713b2baef6d6bdbe1e8e5a396fbe5143f1765c3450e2ac00a582e27fbd438e"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9d86c1e4ca67a73d01c43f5191fe6e559a423df8665b4961ee7a7d927afb7b63"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"968e93c43c70518b0e5ed09f605e227191840929d8a44a61b1d86afae8924d17"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"4bccf3070ee9e0ea4638ca6f3c33f5999db8bc2812ca0df47e2a6a96429530f4"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"641fa2886a2f02d957c35efbffb82e806a8bf8ae943a0b5e25429a13a7f0d9a3"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b5c2e9b9d3e46ec0d114958d427ee7b5268761f6f294335f5996264d388f3f05"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"ff70449ccdf58803c3fd5fb50adfc8f54e9ddbee93d21474676567dc4959a766"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"d7a13cf7dd6a5ad1e699b6fb4717f24c0632662477b76561533ce87ea21f18e9"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a19c5336b8065f845c9d5b678e9055cb588d729deca2efafae8263bd162d8a1e"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"125ceeab28ec742e02109ffe36d96e082a3f7a65ccc314084b19816fbf034853"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9fcd14728b91051b46ed0c98ee29e974e73e749684e8a672591bd30a88c0390d"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9f8994f8ba4acd00a5e84f67d70cda9572b126e8f71f63df58386bb0e73159fb"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"66b6e4b8767ea65ccf80fc7da361a5872d9c44f2058761419911a10d87087a9f"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"3643e1209b50a44bafd44412497189b5d2c4458d0ab52333b33c93ea78d89b59"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"7cb1903aa66ebd5902d44a7418695d21923fe713f07fb39c71f229fead1e4888"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-security 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"bc1f16f3694a1dc6c2e643c2f867ee8524bec015b987c7a6b535a61b459c00ec"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"87ce49bc4d97cbe3c9fb9ae8fa30d6e2911e626525bd3ceff523f3bb3cb645f2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"46935cab8f60a8bc20be45a1ed1481202f5247f7970dd9d33109223c4968ff68"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"db6c9325cb448782f9165465d0e4ec50aed8c3f763d6780b742a8d89e29a8cf8"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"ac5acb31385f763c2d1006491dd6fa2ccf1becb09de0b0ccccc8a7c739c158c7"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"d85ee956e71cfa86f158775698b007016d3237f2db082dec2f0831d157e2639d"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"a5d071b9a7290cd38f7f4e35f4fb13fd1994dec579db6c922e54b4019168de33"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-jdbc 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"bfc3f2867c73fd9e992fd000fb17890bb7e39b2e26d22705ac0eb7aac7addc05"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"9aba86d8682a9651b1840cc6127954355bcc742ba5162fdf428005888a4196c2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"aa7e097165a4c6faba200841ffa6cb3fce01a559573e146a3e3830410145cad7"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"b3c3c456a88e5123717f7a7acf75bef77e41e304e1c6377689302a07fa0ec5a8"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"8d57874fc6edf8eda297764ad33a322594530a0b9a4750d84a223fb7d837f938"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"3a56bd18c2a12c7d22a114e68740285cf2ecb3844b35bb3dd08be68c529c1eb2"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"a4b7af3704a2bfa681b84358f5d07486fa724691d3509dadc7926069d9839557"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-aop 2.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"5e586af61eb57ec0dbcff03776231082ee0a2937545e608456178deeda588149"}},{"message":{"text":"Wiremock is vulnerable to XML external entity (XXE) attacks due to weak configuration of XML parsing. An attacker can retrieve files outside the web root, execute arbitrary code or cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-9116 wiremock 2.8.0: com.github.tomakehurst","partialFingerprints":{"primaryLocationLineHash":"761707d383fff3f3e6b3997a76d6352b312c4731605a3c54ecc66c713a7b0538"}},{"message":{"text":"WireMock is vulnerable to a server-side request forgery (SSRF) due to improper restrictive configuration of the DNS resolver within the processing of webhooks. Successful exploitation of this issue could allow an unauthenticated attacker to trick a user into initiating a POST request via an arbitrary webhook to an outbound network, in order to obtain access to internal resources."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41327 wiremock 2.8.0: com.github.tomakehurst","partialFingerprints":{"primaryLocationLineHash":"62d388ad1310abf73d4d8f49197805b3d30154ac9fb4685971f327bc66142b9c"}},{"message":{"text":"WireMock contains an absolute path traversal vulnerability where an attacker is able to access local files and potentially disclose sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-9117 wiremock 2.8.0: com.github.tomakehurst","partialFingerprints":{"primaryLocationLineHash":"962a1dfd3b483dcb04f1257ccc718aa80f706bc325ca9f5dbcf22fd39a469528"}},{"message":{"text":"WireMock contains a domain restriction bypass vulnerability due to insufficient validation of allowed address rules. Successful exploitation of this issue enables a highly privileged attacker that has control over a DNS service to bypass domain restriction and gain unauthorized access."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41329 wiremock 2.8.0: com.github.tomakehurst","partialFingerprints":{"primaryLocationLineHash":"8460b07536d26a749f20da0c4c4b6944dd9cb1262b40b1f26629ea095289859c"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"58760dfa9f98db9a9719624a2e1d28e0191f1f452d4d16363dd348f479025805"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"808e2289a17987a42bcba1450cc5e81f51de9bd4c67969901a9f8b9f4ca54f53"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"bb9459b1701bf2cdd3065c9da5f66e08447a02cdc6cb91b95d42be54464f5f06"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"2aca773f0ed1d517fa78511470e2d437021eb8febbec430433fa8cff2187f892"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"4b514085fea5cdc7f21f7674518cdfc1c82f861db3b48dbd509b3f45eb6ee7cd"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"db01aa8e54f9f54b3b600b9782d6b2cb101fe11183afbf8df211197a8360a257"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-autoconfigure 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"b4245ad858314591c53fd090fa80136647e76c964851e6c8aee05ce258e60f0b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7a361fe5abcc907f2be750aea6370079836c3a0a8d2fec2ce90e7082852ebdeb"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e0e2f05e12fd0251e8213738e27643fe0a6de037f73f97cce00f767e1a632138"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c6aba2068d531cd6a30a61ca3ba245374d99feeeecefe5be5a2508dd16d987dc"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6bd74533c0fb2ca957cd3e67b180f8f65e8ee04408fbf2f6d4b8e8b21b2d739d"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d89406cd00a5c2e220505c0f2f345bab5da1fa39b6a4f2760728524f5e8f382e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"efd70b784c69e7ca0054afe5259555ee7079582c5a38a15a4f3ded3fcf3bc6e5"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2faca02988e66518aeaa1feab162047fcedb37101d454ccb8cbdceb4078885cb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f1b2f140a4ac7705b4ad9e1116ea11ed0c04f902e738f6d990e0b1a0705344ba"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"83caea54768607d0940366907f5f94f0a27ba255793f4a1ec17b52be249b9016"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1fe9916febffbe12fca8041056b2e7681b08aa8d9e542c2599b0b0b30c0d26db"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9467bcfbc8554e1690577a9eaa77dfeec3a4b914eba027393e12fc94a309548b"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9f61c9153a601ffd246f5fc0a9aeca3fe062d160e05e9d1fb42bc66b2d3a2d62"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"40fd6b335295cf07d19284a78ab91c9b09334d13fbbaaf5d742f4b7f111e19f6"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-web 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7142abf8807a82131a341e84038e6c065864dd4524f9aa2daa30aabe3c331614"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-3109 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"33544207c5fcf83ed6cd8ee8ef7dfdc470c31cfe67ab9c25d3b62dfefd7151ea"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22978 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c6438d697db26067acaebe270460c24dfec1093c02c6918dbc1528fbd00d9735"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2023-1825 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1969f347c9a886111f39831265927d40cd7cd3ce6ddb4dc3e11701f89eee7798"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5407 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3195056c875bec8120df1f7c4be2eb523c56331b7b6e0c5c5c355ca26dc0f50b"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5408 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a84bd5cd72e791da316741b788a7c4a8409dfcf1ce7ccbada3c95f252b1f759b"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22119 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"736578840716c211e0f3afea28664f9559152f6cc56971a6616eb0836300c304"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22976 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cf4a354482bac1a7da574efe1cac09668a57aa35fa566d99dc810713dc6aefdb"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22112 spring-security-config 5.2.1.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ebe0c076041f0bb9eebe67bcc44182416744061cee2e371a26bbf0bebf16f2da"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ff202c533c55d05d3641dce7f0f0df775f09dba094943688322e77cd47bbc78c"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0092b6d168846579c3efcb19e236018a47c81a34ce54fb9d38df36214442e6ec"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6314c8bae7f6deebc4c45448b85991dd3c7d64f44281afebb6b2527cc8275efc"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f908a949d4aac8b543ca969928bde4cad13968d156e10392f68a17d0d79046bc"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"849c80df886960b838038137f43fb75afb2806291d12c1cbdfb0cc4a5c0e9b5e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ba498282a804855b8ce3c597d418188be09af053bf9eec6c0b20329c36674452"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"823af99b5cd5126107008153995a0e3eb14e8c755bbfa28b7fcc02e910356683"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c08159d5bb95e25112fb575d4522c18f6755c1b90e45e6714b6d9e272c4d4684"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8afd0f6e9b5dc301b024ea34858a2d2ed5b93ad10b9e1b74c5806975ce6fe7b6"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b1220e929a54da23e0712814fe66ada17840613ef1f0b7ecc107b5829103fdfa"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"19eefcfbe471c52f4908d99ce307c31b55ae01ad018816c8d08d7dfec917a8b2"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"335544a33fb02947dea45043e4fea4fc6fae55356484486ec9a7feb3e95141c7"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e09da30d588b661d5361d28492450f0ebdfefea813e44c8423da2db6b8fb1e2e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"43146d0b36029f060ea8bc38cc7a21be741b05011b2a2ff052306555e8db6960"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8c4431033728650503aa19794ade713b6c4566363125a0eb471434d049373b21"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"54310eabc7cdc92e4215293b6954a11d33fabf941116760fc0f0af646c6e719a"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"20f125651f26e3a2855f010f9897b07472222fd6ba1e3ba803cd4b9b3794fabd"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"77ba5fe6ab794bc0bf2b0d5f72ce7aa04f8d9099719e05c073395ae83185ccf9"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e730ed169cacd423c21e2abbc8b99835d5fbe70bea56a0235370d7ee1c9fdef2"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c0a67cfdaabb1598c5bdf7ef7c0c46704ecd1a83d872f76edd9873bbf942f124"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dd5064e8ef4532e4bbc6eed1e63eb7f232a7f8164b8929f3814d0f7cd2de4322"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1d367b5bbd3d7f918ecbacff21ea8adc74d9522a82c611a4893b785d0368c587"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"41d9378c64ff1f3c1c95afdb9b7a80434110b25c34aeb9853e301c37fc1f092c"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e1f251b8580e4a1b08cb7a9febdda32a648b687a1efadbedb58e7158a0a00689"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e41d05dba4b5ebcd43649de7c80f93d9e1cd083d107e3597694d23aecf0636f2"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ac3d02fea62e9e631f81f0a300ede2798cc30e96a7fb981a390c36e080392bb9"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cc1eecb027e17dfe96d1266c483585b46c11662bc76421b27d4ae1599559a9cc"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7411bd35d66693bc6a79b1deb07502b2e0056c360788a3df69f191569a784fe9"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f9819f165be7b936edb60f9851a9c455b763b3ecfd8e3f4898e4f58dd11b5b53"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c6a7107c76dec8e3ed254e1fc5d73d67e517bab5eb101926579993b4d70e5f12"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3044bab2eca3d4f804379ea637824e1b4fe5ffd73bb75d78893adfe961563efd"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5ff9f8901f0b18f8652add8d436e6a07ba81e79938b166dc48cb6624b601c7aa"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dedb6543484ad27ac5bb07eaaa74d503b3c79833a85a9290e78f538cf612eb7b"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"59344bda66ac36637e5552a3f9d42d63763bb5af2b1092b42aa35ed7cac178cd"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fea2fed1529fba65fe368169a53eca99c234ff9c95899bcc82e5f7e46ae59627"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bde10700dd301d272ab8dc4e35acd3e696ce6096b1422f9d6eb58a09e6c2198e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"64f24ab20dba0046d49992e93651130fbe7a76db9e5b84b450faf68decc24fa4"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ebf53e098b41218ac49b485189c288f383f09031549d6fada3666f3186cc2c0c"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f3dd7d40f4ab5a7aa2bf11a570022d2e10de62aa6ddc799ae9c008f31ec961ec"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"534a288757fdc47b8eba2d2f12358b633142aba1369d133541c627db199d73ec"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5c9226f71a09ffaf704529b29be48321bb4aea44508e6c647983497922bbf005"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"09a7666f383c8243c9ffe6f405a12ff99991a85217f331ca000a07b01ccd30c5"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"74557dc77e4c998b24c521c57c0c59a85584d5cf5b55d4d2f7f0d0c1a3f9966d"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ca1670a7e68bc6bb106787cd1098dd7b8c13fd3bfff163b0b9956a1c7ab206f3"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"72a82f2a7728223044870149e82a947a3cc18d94610a7d41d2cd4d237ac8c589"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d2acb321e1f576e84cba258140846049b9059456bd8a7fc6860feaed26931442"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2d31b3bb9e5bf87824a25150beb794ad4487a051368d916c2bb29a2ab8eda562"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8bee40f10ac4762b6a59bb66a576dc49447fea185ef03d5ea3ca4f795f29ecad"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"77976363775f6dc2a432ad0f173baa5c84c974f9a338acfd15a244ec0ab53c44"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dee5b7890ecad81e288d883297d57c4e6b5241e89467d8bbb6fd585d53ff4af4"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"046106fc236a1505bb65b8afad34baa668266b28a0489dd3326a071c533e2405"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"48397a17d0f51d1f2f078344b61c37cc6b7dac40acf564c02500adbfb68424ab"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"afb66d746e31f6cd6c63911c25970aa767b3b89a9d82ee49fc3c834c40f52419"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4742e002340c556f4fe8e56b267811925a92e4767c98fe3a0799255184738a99"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c87cd0fb960dd53c0d4ffa3e062e81038e112d0dfe181d9ab3af11d40a353a28"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9cbadae48f2199c0846654857355438b54566f120dcd76585fd5974e1498f1c4"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"652e1c7bf377cd1382db8b9915e43adf38b8a61ecf38b0bec5c0c8316371d556"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d5b57a2573d157c3cecffeb47207f7d569aed6aa2f9e48f0275bd03536e58e5a"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"285cd80bc01e05c620a8876ce493e12beca972bd5af13473134caaa1f779fd30"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"652c7137d1adfaf34066e11eee29b30605cf84c1d17b80c4b47f29784d69b279"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f191429a3163bc3fe0df3ab829c7e59f203a32f839bc28715d990865396c9570"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"798a32cf23c9e1b57d8a88e99664df953ba80b3fb0397c6c8fa94c62371169de"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3b420b0231b8e2511fcc88cf5b70e0662d66d11d54d62a65ccef010626dba6d1"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0a50be54d61e1bc9febf3f0af58514c65e06d2c7ba137b0d25fba29ba04fcedc"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3c30607618a8e0e3f56ff8fc294e7a79e430028e7aef609f4554b3eba1025f9d"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3587c58c3fc4b8a1ebda177ea5dda78bdc38800d60c612d587375a207d240256"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"043303d713b93e78d6ca82aa1bb9e73215a95e8fc9ba764f8d635236d2aa8a1c"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5ccc269cbeee582400364bf8518b6043f66b75336953cf9566de32c69a510368"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0539fcb1d954eb38660b4fb51068b9676facbf4b8ead91f93b953ca6f4e7791f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fca4f87097ac2762d074ba48a05bcd22f969eba38bd60c35b02c68c68a4e4afb"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0d33d1d54a53503b51aff1f49fbe0791fd940f332187b4f0eff60d4e24bb5364"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3390ef55abd0e5f457aa7f6ca3e636911dc7d2dbfe6dae53312ce59e784e78f4"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bfd4474335f46bf773eb61b97c135b04aa576475d762a232dd966639126106de"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6b9b6c31968d7fc5319ca1f4a878750f611d3cc901a8d370a9ec81313c60d2e8"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b7122434e439a89a44a5ff5b9602476b1df06a1cc50548faf41a6210c8402b76"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b28e9554ae23c788c023bd4544a5ca43c64c80882e3b8dbda7353bf04089fe11"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c4cd99c1e10b20db5d56e14a4034e5b686529355582c60b75338c5a811b77489"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e3d4bb2a353dac122b810966f474c2de155ba67b514eec21934c0cb8b9020fa"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"04c0ca95b4a48ab2475610d9a739d0c716cc7b1505ced08575a834789b0bfdca"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0d927d50c1d6fc270551f95b11897fcc1d02fd34a47b16460d0fb5d433ea0216"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"df271b4959d00ad8ec57cce60f0a13a12aa7f5496294f27d41f2f7743bb1bf96"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90f97bf297000d49367268f8f3626951f9de81ea6d6e7641342b8ef4de3106c5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8f5d55a6bc7603dc95283f16177e8aa84b66331d9dc7aa8f2439edbbd6019630"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f17766275729fdfe35d06f8b0846f5b546db5860dace28ff851efe44922459fa"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"05945076388a4917a80563a0d961992583dee8dd698db9663a551a058ddc3aab"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"106b1b244c6cef1c40a89fe51bfd4e22f5de9c2e916ddb134a34ca839840352d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7f1a625f042bc776b9aa79c0bdaa574f6d68387227a39049102406d9b504d909"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a183bb1839374c1dd65b98f3aa4d45c21a4d25f64c6ddc11e4b78b0e5b6c4ea6"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fafc62258251047ba20c9a64d591934b64f5eac62d909a3fb377d877b271725a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"190873f88c2c891823688a2b921f78b02ca1121efca94ee24e39347712b8d1f4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"061b1ad8a6566fea847a14b4f2d4f146fd98ae50b591b8cd8efda29fd66110b8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3891ecbe79878dc04a40b42bf95072067cd4c9fc72168d4aa654d6266f400427"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f3d6a12edb8b48db90409875e216d2acc21b725ac74a82105f8106856c2fa80c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"463492b21631e9947fed76a1f102c17ef2638e2926462d20bccdb80864aec359"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b0e2ef2865407141dded44a31ce79ad6b8b376f53c0c835b90395f59d27f39f8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"980cad6a0436e1f31e027aa3e613e97457d1622480b1bd1d001e9505ac738122"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3dc755de4cf9701130cceb18b931d4fee0a4d11ee0e0ec23e1222ed9660a1be4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ba6446ae90981cf5b5da90c25f9f4b85c234de1f1d4b0b77601874122265d7c2"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1a0ca21a4cbb7cc6e42c13d6b70bf5569b7abb8986a342fe531aad073ee6d4d3"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6749975daea3b2b34ce9b36f4e3d3ba24cdbf97a54afa5a3c8ce800ee749ec12"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"15328657c0e29f2cf2329b230ea70156419ba89012bc9059e5ebfbb17e322bb7"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"63bd8f21e8f5c7038c1cdb5238c00341318f9acdf3284f25b21066baffa7da3b"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cf59b4e758ecd15a4e46f7f455ed01c81084b6599384f04c49811a340bed22c9"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a58bc0d68f3026333cb581ca7338d7e592985ebedbf47d915b63e59958009a8e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"514a52d075f03df2666b3070661382cd893298d2b2ee00217a39de0c18f80773"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"76256e94c7e4efd4c158370594fdb677b389f7974a0de3618434ab601f6f013b"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dd091530013dbfb0962cccb0ffdde2dc76c85cf7dc12a6d63b53c53874f1ccc0"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8f6110183d76f7193ac5112955d04d96909424705fa537dd5bbd05c9011b58eb"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"89f01e0a079ddf4953a0b7654bd325c1e401c68b0cb75f0a6217e99f6abfafd2"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"438640c1e91d7f936f4c83f08e7505895c05f07d438df8755651e8acb5c813eb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c2d78f6898a831e5b7a58cf76a188e027a425b909194b4a2838028428a11a338"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"587ad6f16e8b60a033c54b0a0ef63d46d62053bd456d8342f6002e682e0ad976"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b77f0a6b0a4308e3a93878a5c762eb1bf0d7a32a764b7fd055b4dc46a64115fc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90e708facf8712b3c84b103e856cb43bdceee9b87dfcd3505f5908a82fb71bb2"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e5fc2f8639871509010522317835372da41f81ce51a4151ec33ef2547913cae4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"81631663236452a4417bd68f9c5a346e67a1fae7abe68dc23d7710d4ed99d676"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"696f205df21371a430184d68b790029f7f9fbb782e4e2bb56726a99c6520132b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"47043c291613af103d9eb888bb6ca4a3176a5b932e628d02cc64ae6e3b7f70ef"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6bd3245a8ffc51c6cce15b06fa093e137a9cb25b43dabfcd2f705d397d678782"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b57fa231ec55703cdeb9768b228978c08b27b6e2def15fbd6258b300ce0fde69"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cafd76e3cb5905a6a7047e4895c97db51ce8110997bdb61b9b055a1125589fdf"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bca753a23dc6383c53b53ad5c729f89d85a061a397b94c7f7a637a50b3718789"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a79c339c9eea902392ec7d19cb770fd6430abf53f8c3b5499e9016a981aa8c4b"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"95ed4c96f82e47bdfcd8b34c80d0bc6d8ab3065c54f226607a88cbadb28a41ba"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c7c4a85c78bfefc92f8155a7a292e92e483f03540262227a25527250b139095e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2a637dce2ad1d19d9485e411c6b04475124e9e590c68ba91b1e0c2d420aba94e"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"feabcec96763f335f9baafd7509bbb9726162a85f812d971b1fa9b0400b97c37"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"12455b2a0c0b0d0d750fea0ff10bf77301fb903c449248f21999a43b99124fc3"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c13d793a9ab40c4688ab8cdcccd8a5a450ffaea6f63ba2f0d73c41d0159971f1"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"67c3f74c94c9bbdaf727b308d1965856b9920787af038428d819a2c3994c7d69"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"17c254121d831c39c7e91e9459d066267670d6c08d4856389d0a88a5688bbb8d"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3cc1748c831a2d9f9aeecf112ea328bdd74244526ff8e24fa8aa1f630f544587"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9d79d5fe3f032c3dc5fd64a29e1220ec3254fe673b762d03ce237adf90975950"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5c6db745ed2716336ddca12f7db923ea6e6b7095ee384dfc55efb70fa0acee01"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1c81465cddcd074712aaf0dbc13676a46ed5d1a7946c03770363f3e30a2bc4d7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5f23e316747f8974a9c86b571d0360dc6348ed226b1daff994cbcc98ccbd7527"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"868f2ea6d79effccd05960230cfff9011885f2e688cdb6658bdf085780446735"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"507ffed8afca15481fa8d37b56884658de9010f8b336da75183b6273c81a802d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"921a8372da19a0cbce799758f93b7bab91ebe4464fd22690849284060957b442"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ef932eb24bd482bce5d93aaa2177abaa22999cb4c761499385d9acac667c8bf0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8d800eea0d3cd5fc288d96b9128c5e712514c98f44d8611cf260a68c69f341c7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cd43cf9a6b7a36e19190d9ac367883ae30f7fd35bad30065c04f02d0ecda69a6"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"59b54ac1c6f5b1b8a3a4a7de657364dc4b70777cedb47d35671ad021ff03a27d"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"12d6d2cf31c83d245ea55b5d715bd42226a5682e0536279194d6245d4d61d6f7"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"34011b42a51ba3c2c7576173b36c8d4f22b03d5a33459373b7b099e845ab653a"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5f07f66a54a7f9973480c8e7c7a7f6bdc3c283f9277080e5ed5287f20264927b"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eb3037039183c716e80633b853bdd9706decab06484c59608a21c41c3b6c6b21"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ff89b23d00eef17f0703c94b029c5aebf2d4f50974e5f435d8b51a0842c2b80f"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"40a165dd73ad46388ad7146dfe7fb591070d11f1f4b38b390ce3ad428e75f56c"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"93628c253cbb03dcd90ab7baf998d786082f21666523cc4df7c437a01e60b09d"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a08ba30a2add42f59ea0f9bf3e2ff2db035668d90fd0a230ed4636c17ac75840"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8405b58cf7933f16c4805c7cba589e8c78ed82a683874fc48752978a38556aaf"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"15f04466163767c2e40228d0252624adbc15860e1e9726b3ebc7f0075f86d66a"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-context 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d42c64b29fdb1a67b95970283dd2179c4df60692d0e03ec7daff3c3d4c6356ef"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"b442fd4f5daab87ee5186b08415bb0188bf00c233264400269af93071a9d6f1f"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"4b1ef403937121028601f6bb001e43a0e4075541a9e3f2724cd0f0468fef796e"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"d6eea5860c389cbaf4a0054dc8b23c670835a5d9b1565628cbb604a7e217fb1c"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"73dce46618cc4bf279d202be13d41e7974c1fdfdde520eee40d9871b271d18e9"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"f14393ee377e330056efe56d52cef2d82c017f1edd47b34fc9ac60ae03201597"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"0265387b53758d7b3c06555e52612e558b2167500ab3d6b4bcd0b77f15a684d3"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-security 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"bf037c3f9b55bab0bfef2f0829b22c7384558f88735a9741a94f6f38d522fa35"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"01b2a109d18322e8f5797e6581a584d6a0a60dc2c2f5f2ec5a10f9d8167565a4"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"31be4448e8f458ecb21cf21c8f84c3ba31eeddb44b0e16e35a49812057dc17ad"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"59e2bedf7faad285b8830689d1c48ba494ea78c6be2e6912864b7bd7441e48c8"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"3397ccc648f2a3230f0fb960a5f2b42bf3d29e7850ea540fea62db1c2a854751"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"21471b5a7840a4c455c9b53926085e22d49ab97f414c7b026101bac57e053baf"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"5c4a71434649d94140f58dbb43c76926286e2f31673a5dd1ae385c4184df14f1"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"c3658a51a3adcacb0d12116013095475d18daca2ae86793684cbca755d4801c1"}},{"message":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-17521 groovy-xml 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","partialFingerprints":{"primaryLocationLineHash":"79677de8e576d1af5e1096e168887340320a3bc6659106d2fe503c6d16e7be10"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"80eaeb7554ad08185c72ab459ba850def9cae74643f2e433baa904cc7fad027c"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f497e33d6221bba458b2ed1f13ac40d49100bd6f4057b645a7fa1bf452b73006"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"895cd271084581e67b73d937d9be1357baf6244495e9899d713d4a1884e7f4c3"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9916637ffaca25c03104078a63079de057cd3671d1d8d94d56ad9632a4d5a83a"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1cf0ab07cc44fdd0d42ce0e7114ab316e37f15a8c1a9a8c45cc65f2cc47845a2"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"956630083942f13ccadfa3f94009ff472f3cab6124ebca49a7783cc3cc0243dd"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"bff287741ceb57612616d7ff3106a627ce4bda424270fd75d800dd0e28d750d4"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"71ab6b705b43a895c3fa1e1ff5357c6028903432f197f4e61f26b9bdf98c4e67"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"bc3e8290b052c09e760f8a91b687e76ed2915cef7101358c54ac5e2caf66f00a"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"efcf19d7d1ac8f8cb401b8189b1f2918f0bb40b4479a1a5e5336aa7407681a70"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"047bfe318a0cfd0165522284af9cb15191635d16623b6f8585b758300f811b55"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"0728615e296058074c42946070ae91eb625ff61b60a89b1dff2ab7756cebd31b"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"ec04c979f39ddde34b8b98960abebabbb57e87c99db9ff761f5686cb4a86d3f4"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e8764c9f275dc8aef47fa808ccc4306211dc330ae3b136223fbdc0430ed72991"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-servlet 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9b5f6935d1b10933dc6c2ad18f17413bfe51445c580794512b67d2d9d1857011"}},{"message":{"text":"Jakarta Expression Language is vulnerable to remote code execution (RCE) due to a bug that enables invalid expressions to be evaluated as if they were valid. Applications that evaluate user-supplied expressions in error messages are vulnerable to arbitrary code execution."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-2110 jakarta.el 3.0.3: spring-boot-starter-undertow 2.2.2.RELEASE: org.glassfish","partialFingerprints":{"primaryLocationLineHash":"d16185b24f63c5ae6d054b7de7e2df04c3b5335449c8169a39465c40a8cbbfbf"}},{"message":{"text":"Hibernate ORM is vulnerable to SQL injection due to the unsafe implementation of comments that are intended for debugging purposes. A remote attacker could potentially recover, modify or delete sensitive information that resides in back-end databases by submitting crafted requests that abuse these comments. It should be noted that only instances of Hibernate ORM that use a non-default configuration are affected."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-25638 hibernate-core 5.4.9.Final: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.hibernate","partialFingerprints":{"primaryLocationLineHash":"47491357013fa910fcbfed4a764b614c5bd697d3418f222271a603386b6be8cb"}},{"message":{"text":"Hibernate ORM is vulnerable to SQL injection (SQLi) due to insufficient validation of user-controlled input. An attacker may be able to obtain unauthorized information from the database by executing arbitrary SQL commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2019-14900 hibernate-core 5.4.9.Final: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.hibernate","partialFingerprints":{"primaryLocationLineHash":"734650544f98d6f71155b30ca0ceeff643a7b1629db9febe3af645c09fe22540"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"fc18151c73c80a10ae89ba3b73a178d0eb39007874622c4bdf4b588c4472fd0f"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"0f818ea3569960c866548a96380b0cfe788a457ae2af0cebdb30f135c3ab8af7"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"beda2dd474ef4a78b2b2d31db610982c7d2de1390a3471052b92a1ea2c8f23f3"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"f2e28628f7f748b203c6ba695d844d3fb28411d9ff336564cbba22b522e67ac1"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"185ccf6309b885f35bf86189c3bfddcda4e8f8f7dfc3cd9c4993569760dd15a1"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"aad787b840f7be6cc81e3148bb823330abad68de8e1f9c715bfdae53b5ce6ab6"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"55ac59d589d6a9750c0912a88e31a1a81514076e297b47d4c603eb482dc95ffe"}},{"message":{"text":"Jackson Databind is vulnerable to XML external entities (XXE) due to insecure entity expansion in the `DOMDeserializer` component.  An attacker could exploit this vulnerability via a crafted request in order to execute an XML external entities (XXE) attack against the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-25649 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","partialFingerprints":{"primaryLocationLineHash":"2cde3e528be3d0ffcacbcdb2effb475b757028aa921bcd665a6f379fff981dc1"}},{"message":{"text":"jackson-databind contains a flaw in it's handling of JsonNode JDK Serialization where excessive heap memory can be consumed. An attacker that is able to supply specially crafted data for JDK deserialization may be able to exhaust the application of available memory, resulting in a denial-of-service (DoS) of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-46877 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","partialFingerprints":{"primaryLocationLineHash":"d2aefae88ed304040ec6bd9e934df15d6176b078ade31b8bd88a50ac7d45cd6c"}},{"message":{"text":"jackson-databind is vulnerable to a Java `StackOverflow` exception within its implementation of `UntypedObjectDeserializer` due to how deeply nested objects are handled. An attacker could exploit this in order to cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-36518 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","partialFingerprints":{"primaryLocationLineHash":"d39e9aa388ee5d0236476f928423d331d708db94d7daf632f995407de17030f6"}},{"message":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its primitive value deserialization functionality. A remote attacker could leverage this issue in order to cause a vulnerable system to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-42003 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","partialFingerprints":{"primaryLocationLineHash":"11aee7e5bc7aad208c1d8db357f364f0e861bb3334345a1ebf34b1d64252643f"}},{"message":{"text":"Jackson Databind is vulnerable to denial-of-service (DoS) due to the improper management of system resources within its `BeanDeserializer` component. A remote attacker could cause a vulnerable server to crash by causing that server to process a maliciously crafted serialized object.\n\n**Note:** As per discussion [here](https://github.com/FasterXML/jackson-databind/issues/3582#issuecomment-1242153562), this vulnerability is not applicable in the default setting of `ObjectMapper`, only in specific `DeserializationFeature` configurations."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-42004 jackson-databind 2.10.1: wiremock 2.8.0: com.fasterxml.jackson.core","partialFingerprints":{"primaryLocationLineHash":"eec84fe42bc9ee39a37749e5e1e55f7957ff866339761547a273ca89d29079ec"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bae6b06564c5b241175f3bd2173783157ccaa84c34c1e2f316999d7a08d4e30d"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7b86e0ad2d1561718ba12ec0e3ad2b550af80be4e786e582e7b8070c1b1a90dc"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f94015487260bfc7d064594cee50d2770b071dbde9360c2a338d0f16a876aedf"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"351c51024c7febf15f27662e4e29c4ccd6a5493d8103bfdce3788defc3c1d106"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3566e7e399ce26bc3c0505f6ca745b61805208095b1ca9dce8586c4aa1ff6bd2"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4366d0fc3cc0c3813ccaf3bf2f255ac6f7f2ca910524e659d794995642ffb589"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"079f0a2352575da2ea044c9e95249d90ee48621471511fe72e4b26938bc2ccda"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e089ff5de7963a151fae957a324371bdfc006ce01b5c51f5243db10af37f39e4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"65666fc2f7aad043451ca4543cc304d26b012f2a84ff1d3794c922a9ce535f85"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d63f6a9016c64e2c8f8900c725c13f4745007b25c1560ffee20a09f518264702"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fb16d19f05f5393b281151a2bdebe595a13ae2dd7fa163387ecbbe8d6f3e70e8"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1a3c3ebf99a8715d031a6ebb56facb7874be68b4d6ac8121da011b2d9166c380"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5efda6175d57380aac811ce093cf0957109f2cb40f5606088469a226670a8b03"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-webmvc 5.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fe7cfdf807dc526e266b9f85d66e37547ea887ea7814d2ccd1c788187de97ba7"}},{"message":{"text":"** DISPUTED ** An issue in dom4.j org.dom4.io.SAXReader v.2.1.4 and before allows a remote attacker to obtain sensitive information via the setFeature function. NOTE: the vendor and original reporter indicate that this is not a vulnerability because setFeature only sets features, which \"can be safe in one case and unsafe in another.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-45960 dom4j 2.1.1: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.dom4j","partialFingerprints":{"primaryLocationLineHash":"2168373c667317e502aa3e182b4d0e0b22dfea561746a75fc613571887505a14"}},{"message":{"text":"Dom4j is vulnerable to XML external entities (XXE) attacks.  This is due to the XML parser expanding XML entities by default.  A remote attacker that is able to supply input to Dom4j may be able to send crafted XML input that can be used to obtain file, upload content, or cause an impact on the availability of a system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10683 dom4j 2.1.1: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.dom4j","partialFingerprints":{"primaryLocationLineHash":"996e1e83105ffebaf1c86515b2a002d6bd6b41d585438fa3c9187842cda1ccd4"}},{"message":{"text":"HyperSQL DataBase is vulnerable to remote code execution (RCE) due to improper input validation thus allowing unsafe reflection. An authenticated attacker could exploit this by supplying a crafted input to potentially execute code on the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41853 hsqldb 2.5.0: org.hsqldb","partialFingerprints":{"primaryLocationLineHash":"75e2746871846366b23bd7cf7cafaa52219d7cbe8ab47129d9e5309b40c493f3"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"7751da243866a846098f77a508d177cb6f363b08f8bf259495bf308e6379777e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"4bc15578396537d82f50b17c0512c93a5f077825ae0146f1e7594cd4a035ce68"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"a8239acc7498bbea4bc41e40702a7a42e219e837b75ba5bd7610505bfe081698"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"69c8184c4baf89befab37924a9b27988e63ebb347df0ee4f92ed035ac5a5ea0b"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"9d02cfffafb5f07eeb0f30cd1f023b2b593ef2aaef6703f7ee613a7dcf7e575f"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"03deecb71cfa83aaa9f8e366abba22df239f4b2f176e554bd094c20990898d28"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"7ad771d53e15d94556d041458cb2430f32435dbea11f9ffe1ef74717a992bbbe"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"47e0e55f0b5387404c3ddcfc71884dd7984a60c394085e19cf326f57c355abbc"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"bc2fc81cafe094aef3085458feea35329a9d384b9e77717df882a804fdb9455c"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"93b79a3040e19c994232aefbf897c3318c732e24ba7a1ca31381a508f4520041"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5b85da364723270078c1fd127d9a91c04840985032f44f7d621e972d04d649af"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"50145b3823d19a10cf483d42109a3f563313632b7c95fac142ea0e696c940a7b"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"8bbd33ab2a06d9572f45e8b4636ed78d1efaf204029e136110b35446eb3eac25"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a35ed99ec802400a110ee28c386059090ad645bc5b6bbd384a71194cc49cf77a"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"7907963ee8c801070d4835ecd4e733f42a7c5a0750327ba416eb26c191902ee2"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"0702df16076d3c7edb7c1f24574d76af953bb4221cf48e1501c3ae0c6d49e7d8"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"eb0611a86c6d8235fb204d6096301f42a31c137276948fc00da57963f47645f9"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"8f08378c38bbe39015761ae445986583e5b9a25a0cc80db38c057613e9094303"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"58c17a522797d802a32d27445d9208297d5b86cd96f74bd36c251b31dddeb95a"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b0efd1b388239024e449e16efd3cb7bdb22a83012a4f161cea1c95aba5cf520f"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"19335b845b775807dded92f2f9243ac64f22f8a28a60c75d84338b0de04e3c18"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-util 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"297f9dd1e10868e145bacccf9e077b64e0262a38e82e2a4ac4dd8003d3bae02e"}},{"message":{"text":"Apache HttpClient is vulnerable to the disclosure and modification of data due to the mishandling of malformed URIs. An attacker could pass a maliciously crafted request to a vulnerable application, which will then be executed on an incorrect host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-13956 httpclient 4.5.10: wiremock 2.8.0: org.apache.httpcomponents","partialFingerprints":{"primaryLocationLineHash":"db389453fc77eee3b594b71f1f2056cb3801cbdc240e8c85f4f6edc816bbbe0f"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"03128bec7e5a567d5f8ec9eb1c93f23bbe3862cf8e84f3222bd190cd73a48a28"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"f5f55dde55b6870e3893578490e1716378dedc495b6ad4d2e41777985f3c0bc5"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"91749166c18f4701331a8b99a325fb72046d85545172cba65e3c4ec5552322c6"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"7bd4a626c52e5b42d27c2996ba26798eadb85e8cff1d42bd159a2360a6fcfe29"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"d8f00b8f3c582db339c896e8e986da8e979f98fe7983c75791b280d0f23331ba"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"f297bf619dbaa9646feb3babf9ee52c5366c19b0a82d715e388bd24b701bd555"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-validation 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"f6b4d302efc838080d050fb6ef31300168da53291918e6a63ffccb261b8a375b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"89c4a83413e5867c488a1bd8f96a66dc6be56dd781f9cb0ed547867c29b651ef"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1e4c733a82a85395473821f09be8244bf13eb3370eb24a3bb0a8ae9d02dd4757"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dc8d1f0a09aa9c4dabf907b6e55d3fdcd3aab7f466715128b84852bf01620179"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"16f6f926f2e243d76fe2623a0b15b2bcfb1b07e19dda062397ef1292cf72a60c"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e121d9b8c11cb1b123f35178fa078a8d32d11b0790b507c901c7f52742684f76"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"49a9ad12e0efa19a7f6107566db7c1169e128b6eabd61162d5616c590aee9392"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c2d9dbcefee562919dfa3b318fe73a68becee266e062573bee4c72732d537853"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d17dad34d1180e5d02ff7d50b86322effa07ac71f4ec03107ba059e3f99268a3"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4524ca927a62e6ad5118be4bcacab83f4e8525e6cd1c285771bc4792dabc870c"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d23c35bc5ae60254b642fe5fb2a69a1e3af7ad0cdd961327789c20771dcef222"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"51a08f347281d22cea1f5c5aa57a9c1dfbd032bd1f23eea8a31d15050012a427"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d40f49411732a363292f778d4e75791653b99778741521b2c0bdde87eff4319d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"850eed5dd9c91920909c6bd60142cee4fce88fcfdb50e7bd9d303f5ba68c1968"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-aspects 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"22cb5e87f25d97625729abcddbb1b702c8416745c9b9013243ee0ab116c3735b"}},{"message":{"text":"SnakeYAML is vulnerable to remote code execution (RCE) when used in an application to parse untrusted user-supplied YAML files. A remote attacker could craft a malicious YAML file that when deserialized allows arbitrary command execution on the target system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-1471 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"ea96b8af206c772f816a5f203546eb93c7e72b14dd3ddc2747161e963c9fea5a"}},{"message":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38749 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"3e2fb6e7258be00fd07eed3d2c92f8a30e152e7149bd0b4a410ff05b57fb307f"}},{"message":{"text":"SnakeYAML is vulnerable to a stack-based buffer overflow issue when parsing untrusted YAML files. An attacker could exploit this by providing crafted input in order to cause a denial-of-service (DoS) condition. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38750 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"f102a15dfa036e4664bc2e92ee8c8a21c779a2501a526d79524f2266a3a20a5b"}},{"message":{"text":"SnakeYAML is vulnerable to a billion laughs attack. An attacker able to supply specially crafted input to the application could cause excessive memory consumption, resulting in a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2017-18640 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"33d7e995023a673cccf41b24e84091ec5d506f050ebb79cfd254a4d3d0e68b53"}},{"message":{"text":"Snakeyaml contains a vulnerability that can lead to an uncaught exception in its `java.util.AbstractSet.hashCode` component. This can subsequently cause a stack-based buffer overflow. An attacker could exploit this flaw by supplying a crafted YAML file."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41854 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"908efde133fde95b5096b35f838043ca9244c89f0dedd599137a499b8ef183c5"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a failure to parse regular expressions that contain large values. A remote attacker could cause a vulnerable application to crash by passing a maliciously crafted regular expression to that application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38751 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"3d4dc66edb1f707b9f43e86e299329615daadf8661756f5062dea3ffee2d50d1"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a lack of nested depth limitation for collections. An attacker could exploit this by providing crafted input in order to cause a crash. \n\n**Note**: The vendor disputes the validity of this issue and other similar recently reported issues and have released an [advisory](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md) in response."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-25857 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"d1333b0c1f6b16feb0a91ae15fe268d5a1fd8053e7814ea9a48373a71642f010"}},{"message":{"text":"SnakeYAML is vulnerable to denial-of-service (DoS) due to a stack overflow which can be triggered by parsing a crafted file. [According to the vendor](https://bitbucket.org/snakeyaml/snakeyaml/wiki/CVE%20\u0026%20NIST.md), such vulnerabilities pose low risks unless the parser input is designed to come from untrusted sources on the internet."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-38752 snakeyaml 1.25: spring-boot-starter-test 2.2.2.RELEASE: org.yaml","partialFingerprints":{"primaryLocationLineHash":"18c89f1070a4681c8293c7740f949159d60696a14875df9ac049d1c41a4b35a7"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"792137726177f1a8fd6e91d424e9a3c01b3529f38cb800a360ad75773c6efb3c"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"0ae6a80649b086e2a97c8dfc3daddee765c95a711073600189d5b64b83eb62cf"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"0ce0d67923e3d919eaf0b7c2f6261d6d9711155a513e4945858632f700201afa"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1be114b2598d2c42fe09e36dc355312e6574a183f616a331d4698d77f067b7f1"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a7607656562b33f22a7d99e2b6d81386924f8992fc1772ab15442cf9d63b0f55"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a4749d7a073e919da4f1aa66f2467b68971ec7bfe147b17573f521ab8001b7cb"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"8d9282a09bd6de730dfe64840d7ff189f8473eaa267a5af1c8522ea7ea0913cc"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"696b46f7a6bf35b349bb85529ba631908b4005ea3e821ad006888532d519e2bc"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"a4930517c6d009a421cedb9ba211dbeaa0be63898d01c90d423f1317a72f708d"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5d73a7879509c9e60abaf55e4cdfa25eec811efb261649ae1dbb8383684f4f07"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1bb45eae9009ca2f678225dbfa2cac410c42dd74cd2ccee192cf331c20264e29"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"271448b49741a555bafb652676734a5726e1c6a33875e0fc234f5ce1a5172fa8"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"4839c98ef8b26a2bf3c2ab2f33381acd5f4d64c977a01fac74ec1dc9db52eff5"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f7f70e48f33bea287b657d7da62626f8a4f749ec125d33f6b3a5b0f005c1eb04"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-io 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"56217aaa5812a449b62b81fbcbf803815aeea9beda70f781a8e2f8480f350026"}},{"message":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2018-1836 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"e88d5a45bd967ef47e413a8ad839652c9ea07a81f089f96e9cc816b692736a20"}},{"message":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"BDSA-2018-1836 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"fc30529c31cd530a306a2796dd38f6b9b4ff5135fd18dd4d12f5802b8fec0944"}},{"message":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2012-0078 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"87c50c5660536f6e9dba5c1d401c83c6faedb7f9032a6412a482b5ddc1fff5fd"}},{"message":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"BDSA-2012-0078 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"bc7c408d268da828ffd05efe6c00a8dc65d243ddba199d895bc1aeaa4f45187a"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2021-2083 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"1e0d23f3a5cc4ea8c0c27bdf9064d94368bb55f2a722bb5b70948c14381a393e"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"BDSA-2021-2083 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"333d11d9a658cfd51497652ee8484fa6f3e0706ef407643567b9885f34344016"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"CVE-2020-1945 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"31b3826a05f83dd3a5dd0cb05ead34972c7897fe45873460a80ed9410834eb95"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"CVE-2020-1945 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"24661483318bfa1d420e149f66e8ae33f3147775f5fab2ee5c4c7d00089765aa"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2021-2085 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"150c20d301c0261727a64df2388b3731a82d77d660639faf8d8768072cb9cc77"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"BDSA-2021-2085 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"ab0fa98335eb8f1a16858c3611df042d0f486b6776dbdc7c979ce40f39f3829d"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":25}}}],"ruleId":"BDSA-2020-2577 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"1c1662168814a2cb944692d4c6a569a89af5da907897698085b2ce4c7020bb0e"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":30}}}],"ruleId":"BDSA-2020-2577 ant 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"ab8034477cdf2f295b95e1439c4795efaa76b7c7652bec1106f64933f194a57b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2104348e58e1f6134bcf306fd742b656ee8a6498abc6f397ea2584ac7a386d05"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6a58cfbc8d16c29103c5ee276214c20407a571c523ba06c304d85ab96ae7724e"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5bc0e8410605cdd921c766ab25f8119b74406bad2617abaaf46a0a83b6357d0b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"679d1a2ef3ff8ac2359170c1a956778adbbb977f348aa1c95f0c85faf736b8ab"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e8da27f9b295902e25651b6d430c29aefd291efd1e5fb3871042b5cc595358e5"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ab8efa69271eefb03410fa6f8d9368f7bcc0e1fce0e73c1ef6f8daaffe9ef8be"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3fab30ace5fc9d9475c7844dd5b930f578fba3a1a4dd32c44b90ce60861c0f93"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2fe6ef91616611221b66d29c6f200f15d854d768ce83fc7f936a34a22e164944"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b0aee0e8ec656258f2b5362e86424c99861e3af025cf8780a23ef70b73612aae"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e74037a1c5cf9502673a496172c611ba621314c6e2b8e008754e359cfdee9d7d"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e48aeae63d3106f99ca951a8f971874a6048dcf6686aee4c857f140d7f8d2885"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c91eedeffe9e8784eb0a74138ef12a72dca094418b879f2efe7df7398dcbc914"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f91857a00b3883d1e8b41408b28fc8da3f83af6d5fb8cdd738435f18b87004c4"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"defda34c90c0599de5364b1d048f52c844fe87e8072db6c1de9af4dab08d7b3d"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"85f7129d841ec69b991af7e639aa42910f2e406559933a242e1e118fae4c7f8a"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2abc4403ba945f3560eb3751afbaa23c715bdf60d1240ab6b25014d1546e9d02"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1f31dbf516754207baa50a14eba0eabf6133283aaaf2203f65561a323e5e8f76"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1b4c76d1f293363b073f4cd139b9b4307d3c643cdd92623ad93c06ad04eab0af"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"50ef039c5f1c3c302f7fcddcf47f2ca13e3a6e73778a18d7ef9c71a9f14a092e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"118e040eb4e997f378009219398d56ef770ddb9b1523cdc4e626e1c8b6dd6f7e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ae210ff83526f7672bdfb1f3243559c78a9e37457e5e13ff28b78ca990dda237"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a1fe694de95637d84ec0966cc7cd01b1e5031a039c28cd11ea766387da123e88"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"490ec39f8c60b10d365c60e63a605fdf3ccb7d6ded1f2a06fac40bea21692516"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7d83771a998a06101f99255517769428341e132606413cacc4f07902dcb36247"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"17779983da9bcd134ba804900b3926d6487591f1731de6802b8fde3cc969a522"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e8d7e357c403fff01e6e8ef3a4234269b4d064f3713fe35b4e04b5571fb8fc30"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2cc231f421ca710e557d3921e586c1c3c6910d0bdd7c81629c1473c43acf7a9f"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7abbb046161910911ba507a011db08ab75feea9ebec0654ee0686e462ce63361"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1ce8cf1d5049caa6457efd67ef53e0b9123e748823c86a1bdf2694f39945ef81"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e95006bcf2035bf8447d8e68e28201238b891a17e9e4be1d8721f3a3b45230b7"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ce16f3a254f742c28f3cb985a16913400e948955c413f9ebd06eb88c230de2e0"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"96223986b3b9746fce7e5718d9d036f05c1d147cf1d8de2db3bab7080a1dfe30"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5a4299dbb1669797310b8d1ff29a354e996206c5e52e8b374e50f9180a753858"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c2aa27f51af8f9148ce42428c24d0f76b526835687b4c7a3597452cc640f7307"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bf1c42bc3a8a35871f8a7bd01f48ed3527efcf5e61218cea5fa3308fa06358ad"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"87e00527afd8ac7756c6775db70d43d94e1feca19d74063765e41042c4e1fe09"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"aa8b0c7fc4c08cd26f2bf68fd8fd100e4c8c4ff39a40b58ffbfb7ceec2d3c639"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e21d5462bce283c99cbccc89f844705bb29ab36b217d5d278a3fcdc1a5da8d4b"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"52b32fa1ae73fb5460c24d0747465e02228d71b8fb2da5bcf257f97a76d384d6"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8361571113b4b171fd84939b14267085c8752c04416ee31757d25ddee3d35f24"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d953b20dae199585a4c7b4da8dfc31930cb1131959d0c499954940cc2ee9e6e4"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3b3e243e064b8695a3336d45f93135774c36c6feacce7e4b7fdffcdb01f1a8e6"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c99c232230b43ffeb33f3ecc0bacbf93ff68ec24e70eaa020b5dacef590dd788"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eaaba7c449e58e4a6611c14ace32d43ecc6ab35567eda5c904c8f25fda7d4bac"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"85be5f3a532150f6279480b0d3bb64061ba1257ee94e023f0020e5103f37a8f0"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9adc90516ea82afd0caba9a756f3652956be9900c5e129e7aacc21277feabee0"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d6dfe12b83d8e42a88beb1442b9f1b9ed53c54261e6e152ed558929570f0095c"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90f3e29a70fcf9125f35afbb0d2f5e1b4abaab6eb8b09c9b91f6f70d2e97d80e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"aa5ccfe7415857eb9ee6e2178673f762a2741dfba1de534ac242bbe78cc9490e"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b8926c50966e87f3596bcd87eb60708a95cc8fd231e064a225569c93201281fd"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e09cdf22ddf845b05f77e64a0a71008a7d145e20187bf518b07f02d3573170d"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"84bb0c9a0eccc6651ee0c59a66922ecd9d1538e2ee395f784ac33c4ea9d9ce84"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3c81f70847910d89c3a0766d9b9cbbfb2a50c63ec09ef841741b95c8c9ba53d9"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d046bee37aeb36cdc54a5fbf6dfa1374106629e67cf27bef56145954ed9abeed"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2fd2764332efbac21b7f8b2f6c70ff4a6f978274c7b7450d8c302030cda6704c"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"12082a650935f74d5fb1b882dae96e41468938be3c052057b821b89c0e6d8b22"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"204933bd84a734a6d810555d56d665e4a27d3c8c31b7739fb421f29e99abd4ab"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"608e32669f32857a32493a9599a6bdf13ffa8533497686b970a4a9ce03e05955"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9e47caae8c0c385a41b1435bfeaa1fd9b5bfcea98683b693c30b1cd03281a944"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d89ebbe64d8d0738b3101826feb18b551ecc2c35204e7e662137fcb324179009"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c6b9cf41bbbcdce6863f6cd0857f570302554297623784c8d54025a153d7493e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d0b3d925a650e598ae180e8c159d6e36b75f9cd078040272e6dfdc162de5c26d"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7c304c54bad356c829b16b232e95d874e82537d8bc16afc79a0e66f01c465652"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"83dc76e13c47dd95a1acd9c72602ae16e97ba93e6fe6ebf7fcf1a40d10e81cd9"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ee6b7495249d961a80bb6335489ca59ac5356bcff79f530d810022e6c4e5aad0"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5dcde81e86ed8ceb2fdfcf1588e396ecc6bb092afa6063ef3eb62e03c456ee09"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1fd19561fe587e40afebc5aa8fc4710403f2d04b9e2d37a3ee5f9877eb649704"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9501cfaa63b4e4d05b25c326980e6dcb44ee5a63c218e461d557f920a1ce8af5"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4c7225e5b751f91598788cde0ee3e92515d0a6fbf120b2c3344f1d51b184a556"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"002ef6f28f1249ce404fc8820f9874241b66036973bd6a5ade549f8cd9f38c21"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"71f37a39bf8815cd0dc0ef153f21c68a395084f43cd62cd43edab2c7b36e4039"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2b7fe6a81f66e8e35c9103255b63289e19353d17825349bdeb2853ccfd6047e8"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"315c6ce6a238ae2b4a4ca4977bf188f36a672f6aaea15c0159dd7f2910549b99"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6904e04fcc4534c368dad040a4b2e2ebcedc89120ceeff7754f6d3f12473f0c7"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5e9540bc2f9283a2ef3b84bd92a5ea3394ef86ccbdc978e1ff1be299e4fbe637"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"de30cad77011df1ad2581c7a47e5d100fffac827ff47142b74d49cc50e46c898"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"679731d159d5d85a5be3282c8be540633056e663a0eaaef5a5c2a0f0c7cc2743"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ff0461886cd3fdd8cea2bdb7ef137319002575e19fffedc0eb398176c101549a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1448d4980887d886e08bb620c8c54d3877835a8fac3ef87c3af7b2993bdd4268"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3c47ad82bd8b68b64fa3ae099348032f2113ee890983e4e1fc6d116db7e384cb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0e106c8641de5eec859e619bd94eaae1a33acb204fcb7fcb383c220b1e5c5248"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a70b6023553a86dc09b1b4473a46055412be636e2917b2f300dd97568357abfe"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"815a3c7b53a25ff49a067be371aaef50514ce22314f7c3efd18ec212f6148af9"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f329e1b9fa821dcdcce1f7b48048db78c3d1ac71da1eea942140999894c25823"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"549dcd43e4b53c316a08514f622797ab16dece2bf0cc1f01620ae426cd562f9f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1a166dd8d555e144a5ca6dc4f8bf78c372c15c45c451e7918d382783ffb91f60"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bd946d96cc030ee43d358aeca2d0e7e8fb338bbcb5068d5503975c98805f602a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c1d7591fa3a4f53dbb7cb1ef7a6eab77049cb98647f0c85f4071754ae6ca7043"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"893751076804c75a7f4a8899728fdf31790d3096d06db1e0cc35a8bf0c701e2b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"07d16df2a39054fb930a567f88216633f8ce5b7c895fd138ab249532eb08a6d3"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8e753854631a2b9bff5ced32f242562f8e34e183fb4f765cdcf1c19a1059184c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"934fa41c087da8bf52e0a96a0c1e71efdeee38c2c71c334529d72224e4a120da"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"075cca004166c6cc76fe85f7f04aa19e4af08e177e3b43c82e55e38278354f4d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f463c74765c13aa458d8f163145cf6c91e9aa43b2779bdabdded88cdaf3a5a0d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f1f3c911017a3d0e41504ba54f4e03984b4c87c3fd823ac47bc00de71619831b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ea2800e9ec070f53e7e34c4e78e7897c4cce0353828489583ad4f372a643af89"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a58b7c63e3def8b9ae88a7b52641bb6befaf6a3eae1345e1c1ba235c815e522d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"58912b3759eebb43bf00b6701968d108f0bc31c705ff2baff1785ca2ce292c4e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4143dee9eaf5c9dcc6976efc02efb6d97a68f9e4a7387ef9fd8077ef6530ea58"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7091bbcf145c8058140f0c991efa11776987c87a58487fe9b53fbd987239020e"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0826888de6a12c20f2d219233970eeb1fc69a68b862f147ab68b5cead357ec79"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8869c87ed6f69d471d289afeb229e8433cb15a94703e1e4e51377c20897a3dd8"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eb5a226d6fae628796e80365b1a3b087eac3df6ef6c6b3d2119c76e004cdde43"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7368b86af2ffc2c53f3ee7b8a9409a76d0b7758174c585c0608284ba754b6579"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f86df071dbfc05759506d6573a646afa265fcc353b18dd31cd83185e2a6c9bc6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"36d98a37972ac16543f3ab9ab69de96e9ef7243b1acd8f045e1881c739c2f4a6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"df8e8fb66ed1485ea6f34bb75514514451d321ed21d7ece6783da630df1310bb"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"83c123057da82b525e2bbdeb530a8b9f3ac2afb418b64a92f613685553dda537"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"37b7ae16b7e32b751dc36c42c48860eac75e5c21aff2cdbf3a912d98a0aa3f32"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8d4ec442b1469838637a272c64db9216c5c18a8352c36678eb6ed6dbd3fe81df"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"755a7ccf44e2ab1589359756102bd47c8739687918adcb05cbb96a6b8a577d19"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b68ae2073ea2139173e1bea98167e5aed55ae7145a9d99eaafdd4ee0495ce806"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"123d6910998877643700b52313cb4441ce5167c6d8d8d517e0f5cb4e526185ff"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"82050a7e0c49e0ea3291563f647462603ae1a6ae308be87dca226a1afc26dd81"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4ce04d81264a910a06338d7beb4c4dc4ecd97556bbbab19de1bd73f6e2d2ab4d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"11a8980692b27c6e5c17d559d4ab1b12630972147e2fb948940c75d34a55d697"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"216c1e6a7ab26bcd9606334e8f506b166e7815316f83f1ca27326e063726c11d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b496e3745585b240faa459063938bdc31e45b620d057c6eb044b25c88f4abe8e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fd1675e92cb5d8c9b1bf59d429013966dca5b35ef40c7d9c4dc11ba412fdc01f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9990e153d46c8dbbd61c85e5140df4b98c5e2cf0cdbc704d2aed8d1bf588b849"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ea840afc3145c04c8c68eadcbd93d854d63218c138ea57b7ac3bb736e04906be"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9f2d4048ee1b21cd657738c7c94048ee7eff6e3b098f7c8ceea1ef1c64b51cff"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"79edf63eb7e91fa6df03d5bee8d64a62074786e1e5dec7d2b91fc309f8031bc0"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3b6f783dd51c0b0654f9b439e20fdb982399aeaf30368fd5ed308fe8a3db287b"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a2423b41950f7876cb1bf3195e8b67f03ca25c0cebd512b382e1c9965d1b9921"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2005102d9e5aaec80a8eeff2a53b851c45e416d8950b6b9b320c6972a75e8233"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6cf05ffe6b395964ccf440b12254dcfbe8f7a44cd656b9e54ec3ef4e229a532f"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"05a18a8ce58f6664e674733fc139c97580a1e68df91235792f519416de7bf8ab"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"88c84f7614fe67939d7b42bdb090b691ec45201fadb84028ab0b49f104d67500"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6accfc30cfba403d184d84faca54d0a838e358ba350655cf38a88878d1acfad4"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"94cc1689127a5e11b2162b7b0bb5a6b420b246d068ebf32b7fe630ae095801af"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9dfe8d18609c062527df48c4b97e7b7b7f5a0b9e24b52de9098af39f0cfb57ae"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"33c15bde7203e58ba034a6d0574b33e4b5762a9d7cd5727afa334955bdcad2fa"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8dd149679959c3473919ff740a2cb8242a36888eb4a6b1066b7f80bc22a575e7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"260580cbe93f9e3ba4894a5a9bcd4ba97074b5886628b85be4d388b67fdb0c40"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b1fdff6700c007339d9cb766dcdd99eaeccc3a72498a0291a783214037e07135"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dcc426725de52d0a18dc0956ffd007d547fcf038e4b1ec5472bff78751675c9c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6fbd885b04af108b36039340c90a4e3d7d40358e664109ca09be34729a8f85cb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9d2dd349935d24706b60771398159442fb7a603f5c9c33a67017c78ad0a31d5b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"046c684339e7174b88eb81ef6b4c70e887fb63dca432d822a6918e03872068a5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2122669f14a82046667e42f1d87480259c1c2da60eb2f299fc5ceb567820d7cf"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c0df605705ffe3e0f8d214bc2a14055d314e057f989d87ff7dd1e5e550ef71e8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"91889f9ce03eef0f232cfe3377a7f965cbe986fa219d6c871118781f7cf4cce0"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"360bf2a91e0a0d5745a95f9ac2336be3dd16c0d3a2dd0d65f35748d9fa46dc06"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e1b6ff17e13b7546270b3b158afe45c754aca65a98c370130588fcaadbf1a771"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"14fd1871b69e189eba9755b523c63ecb9dd50c665c00ecbf527e309618dfff8a"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"330ac919850276f1d1015b12ae672ebd5d2b9d22616f0bfd470d8994aaaab672"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"98356c76ac8e28406817e7b74c4b54b5d55fbe4ce9a5e63550f12ebe557490f4"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b59ab29a3a26296d3166af2b9f6fbdaf50411e5e1e0b1a08d3fddff0a66e0456"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0cd68a58252e77f224f56d83d898e20b5bcc31d78e1e003c4455bc92a5a9b6a5"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5319cf4937bbe07d87314ad6cb0f6eea390eb2ed090a6838aedcd1b99d13c5af"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7061affd53279fc69601193248c5bb10a934de6321618356cefc2302412481a1"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5257a3dcf5ebf1a03293cf2e45f8d3aa187d8756f9cde5c0d5998f47db9304ab"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-expression 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6e0db7a4c40ed7737969ce321144298904f3568a861c108e7bc25fff20f93a86"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-3109 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"24cba30428d1f9bc78cb7b728b7869919e07e35c66352f674b5dc7aa8f57d962"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22978 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"78db80019ff8908631a8a96f89d453e49aa0a35347d14564abd56181639d5451"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2023-1825 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b96f405c9988beae9241e620681d2c92466bf28d5e4aef220262e84ae103568c"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5407 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0f5a81b79c21715c80d089a442ba587c693540bea78fb75747da686289c167c4"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5408 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9e0580e4324cd15a40e27b6e1b0d2d9fb183634c095807fa46ffc8c687b80736"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22119 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5d2b1ff3739ae048cd86edde31a531a8c2bca3b45e118f6143bde417f17d17cc"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22976 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"04a7d9d4d37ee8eb62d919c494a8550bc4222f5d9b44f5b636b3cdfe08b8699b"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22112 spring-security-test 5.2.1.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3969081f84cc7e348fb188452123ca13a4b78fb5a8fcc9b70237bfa7c0da4b3a"}},{"message":{"text":"Hibernate Validator is vulnerable to incorrectly validating certain expression language (EL) expressions. A remote attacker could leverage this to bypass input sanitization"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10693 hibernate-validator 6.0.18.Final: spring-boot-starter-web 2.2.2.RELEASE: org.hibernate.validator","partialFingerprints":{"primaryLocationLineHash":"6a44c63045ddb1c6f98525d6b595e3882cc70bdcb35ebe6d907c713ec60e3756"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fe88d9e9a432f86aba6d9b4dca5e0b061b1600c5dabe2d2b56f5692ca3f441a7"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6fc35e476cc9e95b2c53cf6fae12f6448b3a0833cc5524a8006820ca36d9a676"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8d3de7689e15ac46bde2fa25066528554f3320d5051aa5526ae7362d80b214aa"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"598280c7fd7b3c29714ea9c09d6954ad46ac503150a49f92a0d02d8f1a2c14d2"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bea7729001bdf3ee65df96f3843c5d9c40bb3bc5f453fd73924bab7aab983aa8"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5e36dea8df836ba9100f47ee0b7172b21d36c4e752050c1133e415b7d69970de"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6bd2b58ba75ea592c6aaf3ba4e9b242afbc2deadcee624531c68c0d99315d4d2"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"576b1c9dea9f2c0e2b38a8f00768212e5928edfad2d0c41114115417990f4efb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"65ba8a7f5cbc90fb9f266ff0c1d2061967acf3c1be507f7fb8a964d19dd076f0"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b0f9b1b0b62047acc693adadede16c6b114eda8a0fd26ff743c7d0a616281f00"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2e64211728250710b4f30979be784ee48b1e420aac761126ca5f06f4dc7db3f2"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a9e423f45170819d029ec17f9b9219f3678aab9242d60e6821062b80c5d9d371"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dd23a9738679201574aad98aa5a4b70f8d3727a8621ddc7a9ca9c731af3150f9"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-aop 5.2.2.RELEASE: spring-boot-starter-security 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0486f6be6af18d964893e85a0442483f85a5d7d6a458544c9f21877ddaabcd14"}},{"message":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3401 logback-classic 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","partialFingerprints":{"primaryLocationLineHash":"7a5c6f45ad362351d63d30d0b9a06ba32a427e5a33b909792aef13843c85a712"}},{"message":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-42550 logback-classic 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","partialFingerprints":{"primaryLocationLineHash":"be1c54b8eea9a53bbb895f712ce5e32b4f729fb6d57049c591904ca09c62d2de"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"212db83e6e02b626717f01280560d66847617a9866d747f188c27b8845f20521"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"CVE-2022-22965 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"a3f6c538f4b0ac0e1c6d18a890c941c801824fd340e0658a94265997e07f2f4d"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"CVE-2023-20873 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"948ec6e094824269c7f11f6bcb1b586ef7d238bb5d14e989e524750b9b22009b"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"32e10f0c414edfc0502d0d7293098a4030962187c30bc582dd8e43ba39cac7e4"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"001008313a2b8de49c1bc7b9eebfa2971a43b4f62016ebd2f71820fda6e48077"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"CVE-2023-20883 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"c067722b72182b45362868ec0bd571a1c1944e05a51999b7cf4fa3c27b8a55a9"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":24}}}],"ruleId":"CVE-2022-27772 spring-boot-starter 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"500c4b6ed39f2130c190149b4b6025c8265d1c0b7bc460526dd4259df86f8b5e"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"d15810a10469826390fb56b0c2646782d5c30739ee70927eddc8289bbb863d24"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"89231250013a1f0332cf539fe48348897dfdaa528be351aa05fb667f851e6014"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"39304de2d110bf503daa5f6fd89b928b5410be7d27e54ffb1497415e736ab9a2"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"6eae532541cff198e289ba51ea19df7cb4f0302f8d97f1117dbf2460914fc038"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"9e4eed8c3b5c70224ab629bf94d22ba82235aeb882894e209cfbf65d46c65c0c"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"65f8b2223cccf3158f780d179781adfc94f639b56fc7608e89956c36169ecc5e"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-json 2.2.2.RELEASE: spring-boot-starter-web 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"930da9f852f8a77dc8dc7df0d62fbf6ffd3656034aa442e71757882ded0e6d30"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d89324da3d0d411c5b51b3a38f28146d8871216adbcf56dd74b579615a2e7b22"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"44e1a1fb219fe4910a37106bdcffbbd6ca1f04d5efe557acafd04fac8bbe54e1"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8d7289d530e3442f87ee8559a673343953bcd3d2502fe3586e53f697941cd43c"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c0f1a1ee57eadcd2a25f8af8b4edd0b36316985595cd8587feb56406aaac1c84"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"579eb18d87cf91b1187a2b07e5a6ba5507423a8445c5377d34d3e027801b3e3f"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f84df67c0ff8e1bc7a35219d63db606476af56935a42d504d7e4bd54de76fd64"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d6d6394f0ef8f944adf706e2513e38487ff555dc2303ed4ac0836f349d1d075d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c35019c479836a02d5c3bb12b986d486c9caf845ff4cac8fb2865da1a3a5fe47"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f5124297548d143ceceb450c94790b475b03d31c009666dfb2f0803cfbc3bfa0"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"36e91d51e7b3a76b8f496d91a093fbe9a1ae3ed7e8d6744ae4717762b59ada63"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c1010c91c769a57e654e658877a06818b39c89ab74cf95bcff358f7832a4a2c5"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"485d23e22694367af635b13e9d9389f008c2949cfbbe838aef59b4057cdb4c9d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"97ec0125a4bca4247cca1fe430e7dd5d73381010126f06ef996177a1617bdc08"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-orm 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4d81cddbd23197baada2e90ae72d1d740ad8fd46d8d444c95be77b2528e18fc5"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"be30f076c2de1512c656e0dff90215d63b97f5ab0ab33c7196d48c0578c5dce4"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a5e3abc68c7b167cc823f79347ce243b3c1bd8e96bd7412884b431d882617a48"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4b231efa6691df4a8890930c94091816fec121690d78d1ecc837f301f29d296b"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7509b7f4a6010243126da340caa424e36a6bd625db00762aea34bf9d0da1614b"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c37cc708b06ede129ec7206072a82c1ba41a833df337171baec72d60ae36bd87"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6b32e112c8c93dfb77da059beb086323ec862e0e50004d9754a6a07901337a6d"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cb07eea5caa1be498468cc4bac16e51b66b222c572b4f97f705fe47552d30723"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3adf86a796888c2ec8a711f13d25b94591cc50025ebc78b5be9b81a0b4a2288b"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1f886d1006118a14888c8fc00af8d69cb1d02f66eaaaffe0aee10d7e8d650ad2"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0b68dae5357ef32aa327b2df4ec34f3983967880a99d69c6992d858af311d214"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3f5e56aed0677dd77edcae0ae4d8c22affdfa2d1753d162c052c8939b68f8018"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2ab4479c3d91b215b48160ed1d3cf3ea0fb9be52731a833a46ffade13f8d7256"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"674ee79a328adba4b1192d2f90f50a2f9c0479687d41bbb9b2b544c348021045"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f352bb7a5f053a682348eaf7b937c111c8c89aa126ad42172a5fea6e3160d3ea"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e28576153aa489eee611b43d36bed3670cb286589de8109cae2beec3a03d1605"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a18ad6d0d6fc93bf55f869001a998b6f67a198fa9dff7dfbe8e8516c0fe1c33a"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6501bf6cbbc79186d64e2ca32bce7ad522406511f2b1b9e88b2646b2ddf49ce6"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5fc05cc99dae23f49bae71e4497c561c64cbac1f5960890e7e88281a0aa13b48"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"fc41539239ef84d7c27fc5d6d0208f8d611f9c31792b415e53311f1e1a851335"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"81ed98e992d009c5874fa84fcab458d277be2ced33e2b6092478f9e383a135ef"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"bed4dcff47b31b346be415be5940d577726fbfd21a6818f0ea96a2d7ba77dd57"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cabb75178eeac0ad0123f92f177fc80c27e089feae3576fe92ff2a19e26b3d88"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"bd4d6780ee8448ae65db77025ad24916a6928205fb40bbd85957550dfbca6b33"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4ee04401ba73dd6ec800de815fde72abf1de1b4528a50fb39b3664f27e15dd06"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"70b12667c1323c667c436ae76ecf00e27c4e29bd7340b732ff0e2adddbd3be22"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d69137943133533f25705c3daaf38b5e43707e0057373d5cdeac14a2930a690b"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c0ee635aa9dca4391c8b599e33a74da040616ff71ca9e4e5858f0f8d9ca7d1ab"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1a34371eb61e32afa6a91348d213f1ce62f37c8276397ec2a9954cf456ac74ef"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a042e32e94fd52fe41857fc210540c738dd5996081790b55d11a6402db04fab2"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0bf176f8758f4390d4ff250801571383340ddcbc63a04fdbd86a7e61f3a8996b"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5ff1eea54d158397c97399946b547f9e35f468189bf576df47e54ec780149e02"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d7a0d9c337df7843006e91347dcae6adcf134b9377bc622d2473ee4a0da35d3c"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"67cbcf1b88ab00ffac37bca56b8c8945c39aff96d6b767b2d95abeeb508bcfc8"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"88b3b5ffd761ccc97ac038c044b45001916b1641f057ebe5f2b8230c92e60ee3"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"44bcede20a2c1ed75322adb40bd22c9aeb30fe62ad6f8a6fda597d9493717083"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5459ea7d6c2489d112863d1ca92a0b9c171ce8eb59ecb7d35c74cc54f484f8d3"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7446273f40fafc0cae8a6e55f7b2bee8886a6a0c423bf625afdbc18be020dbca"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6e0330adecc74d7ba235a18128e7ce6d7f839218126dd6eb5aff0bdd410320da"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2f44bcb9a265d2cd641468e398a3fb58989747371d3c86de061ab3dfc6a1f6d3"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"37b1c060264d73fbfd8f9b55fc593a004a3b31617d14b5271d5cffba84f3420c"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8464b87fa903524e0b192b15ef18ae846d33de516c74ba060711c6a3e3b8620d"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9b00f37a1aa7a725a53cf0d626ee7ea6a4885cd3accc8588500ab0e6a0befa23"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3e961e10ff7b03650f4bbe33658ebd83b8de27a3fc970de91a8fb76682bd520e"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"afff527fedbf011c33c8046096419b8a33bed9e37b7db405a88fd275d08e8304"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"676da2a88fd36bd2a7d42ee4a74786a0a6fee5429786ca458c144f8092cfb76d"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"280131da45568eea6c4972e6356e7d3d40b6b73dbad3e6d4b00e7ab83f524689"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"683b2f325c51c63f7805d6332c426efe0ff949ad7b10b2f207de4b19825f8ff5"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"57f46bdbad40198d3bdc00635b58bd2ddb7f3e883d0fec16ba824e39a29f23ae"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f072b127a3fc6501500ca96a53244d07f2ae00707fbd3de869138d6aa1d51ad0"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9526a1df55e9faa875ede62a64da4980db8e5f03670bf2d5bd9e2f345de16188"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b3b62905a77d7930eb9cd184410c6e2435219bdb1b772b388e006ca3c9557dd5"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1f5f5aee8f93140d53c52d4813305778837085039a16934abe86043976de558e"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"86b620af158f20838b1065712deaaf8eac78e931965b41c739f8be2a909f4c2d"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9a09fe4bc5ca49a04444349b5e7e81043908a346f0e8316a3e886c74e0ab6d98"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ed9b87d02dd6b618b7cf34930f90b4adb5cdd9de7c34f8671bebf15397bc9306"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0e4d3df0fdbe668a4ed709c7617c9d125709c82005cad942dc851720f48ce901"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4a8181446ad6e9920def790a6285ac6bec45b3e8356f445d5b83804f4df7853b"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f22580d2dfb48410e45fb483024fa578fc8c11988efdd76a35f022fd4b9be93c"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"980dfc4a95ca39a52a03045037ecab2e7bc6f6deaa04a3cc5992e497917b76f6"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0fbdccb560a3e7d1882d419b06b7f24c621d0da44e8d74e0a5b2f38b1e57b4af"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"dfbac9babcbc30645957086874fc24aa7c0853a634507ebaa7355ab662f9c650"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"13553218fcc0eb8eee4de1cf5ff3400b1c1503af6bec5bf18d92558bf572d923"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5386020d929b2ea19572a84e77f2f1ca47356e5bccb264102317888b6fee919f"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b3171547091c54825ab2905354581d0bc2fb9105e21a5f7da2684d8f7d5e2ea9"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"af35f0e48f86a8c1f76eeae9272e088dd8b93a758551c5407ed4ac424a8239b2"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"623a44ebd2631614e1804858b1f59e64ca7a381e9a78f706964e6622e929d947"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"fb4b0ca8ddef37bd671a29b00c045b44cd1f6808e9407983011384d60019611e"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c1342230d0ee619e5410744f57db8245bf64827090f9c9c61f491a990b7a6af3"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ef6fc924fc58615289f222295a836d57c37e3e98149f83458378f3c89c6e3d03"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"948c13c64f0d43e43fd40355f52192263b7622d48a85c1563cd9d53f51633333"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e2f8362217caa32eced488dfcbaae6cff5dafac91a0319c9cd84547244184b4e"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"af8b1e62be04f582d0018b0bba7756a66b9cb03485e3f30e5a918212247ea42b"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e98d254f325bbbfdd8f72798b1773792ff01ddf6214fad2e88cd0907afb1bbe5"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8a6517ff22c323e84b188ab68ca552b06c59725b3113ca109890462cde37e399"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c3a5f8f5f2f53bd93dd50738a199a46f89d9d6783956cafd2caeeec1cd8e65b7"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"11d061706d3c243ac7ac0afb391ed73fb514e983de0ee77783d2d1f94d060b1c"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ff888019585c4f712f1cba73b97831df651a56d0d7cc741b712470b870706051"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"790cb21ea77de82b8a26d204e7e63867804ebc3eea9e0885a5e76bcc55556476"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4f6d1ecb6e81e9d16d701f423026322a3be58da92f65c6ee5e70f01d329dd979"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e62717b55a4832207011791cf9bee7d71b6693e68ecdcc285b9f17c006ca060b"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6654fa9b8f910b23891f1b54be19c453a438a545382af14220a02aeb403a3c57"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"66f0619c780fca260246fa8e8cf2316c630383a9143818bede335b7c45d7dacb"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5ebe127ad4a28d35b8a9d706cea21292828b2577b7b53a6b2ca626920a08e018"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2bfc1ac526c18a38127edd8d841fff197467b409b3fb12b22ee05ac0f79425eb"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"de7c1ea138bbe127e8259c7e7d20f42aceec894d614720cee6f73a9a3cde1fa5"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e6e505e3637fa6f5cb7f512e308f16b81b20472d75f8ab64e9f401ae835be4db"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3d0411b2ad3603c3a1e2d70d88297bf153be3e6e650471ba46a0d3ef32b5568d"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-web 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4b4b6769ef6ad8e2dee6aafac40c04bea8cbb7f98a1cb764c616718a9896d1be"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4837fd7f265428982c20cf00b880c3d7f19942db99dbc3df50a9e2a30ce35079"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"30bb831324ab0e487d49a2874b29370b8567504c2076abe02df9a29be7d76c6c"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e4fdeadaa29352019f45e0e2ced519bbd9e2e4ddf0bb68e398ca60320007212"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"043980e23e155191dd04eeb854fd71d1227a9db04769fa13767dce9730f899c0"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3d44b426963c1a732215ab17688b17756a21ffd35896996db6ec66b14dcd7e4b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"56583f47e13859434f0a2fdfd715c8f9af3ad9fc501f2e93b2b5dbbeabbd3ddb"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f75084cea6dfed80b6fc0fd9b7a703f0ce82420fb1db1ff03b70709ffbdef663"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1c06799984042b7dbbee2eb249b43a2ff5e9fbdca7873f965216d5d7d3ba8d35"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"79b6fe069fb2df1ecf6abbfe47f814f8b92b37cf4430261e1bbd2a307fcafb96"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8488d0a1bcd301b952d05ec201ab7cc28dd7af53e07e8be107223364894656f2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b3418dd4852e6f6743cbf3d8ebca473f427e01f296faebfa8d63d172511d0c46"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1f02e07de2cb94dd3407a45ff5b49cd048c44a3f298c3c763bbc9f2e4d559193"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bd5c9932fba79537b63324276d481e069c77bbe0e0dd4a5497449ffe3ef8e2cc"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"072f6b20d2709072984092747c90416f1e88b3705365e0e2c1cc3647d9fe1ac1"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"518ad9bef5c5c60454b2dc32bf1e6c0415bf32e8bbb6d1cbfd559ea776f857ca"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"aa825a1a10ee77ae8908ba6863cae09cbc370e21c932657087ce0253aec4de88"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2acc281af97dfde387e58a187f60e43a70b79f1a43d6956febdef5a7ac7235fd"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0ab2281a7f2e4c218046c591169fdc69c823627a593bc1fe8ee54429f51d4eb6"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7ab64ed898c97c78fb05fdd0ba814e33d1c7a976f7197d43c154822048152fdf"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"69610bc99cdfde9cfa427bc634aaccd630f4c98b5feb3242d25d4e16ac778e22"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fc7a3af0ef36435487ee6367a08cc3b1ac60914bd2a681f24a0fb59051a21d3a"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"64ea120e275464cee2ccd862063be73dfc965df6819316311329e71912f6a66a"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"02b590e6ab61699becaa31d963c43a2103046f042068f125deb5137aeca5f9f0"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e27b067136ab1ac9c5215d301bb815e2f51d0602466470a7e0a043be7e8110c8"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"05dc31a21b89a1f9d7358db5c5fddbb3a70bcae3e7dfecd558e46e7f5e0de05d"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8c66a6bb5e4444c914835adf93c2967f4519ad9f652194a7e059753102344d59"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"55b6e46863057912296cb6ee4fc5d09d1091b6d92773d7d2505331f389a0c731"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f7cc9c641382ae691eff9eaff2493360950e2cc3fae7fc6982e81051834ccd9d"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"757ddd38f7fab40991c69812b3aa73bd37c7dc145dda34d141fb9f5230590b08"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4209f9f684ed371dbac5adbd8365c70caf21c6b726392fc52f98bbaf9e4633b5"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b899a447f0797754e8daa0408327f517ccedb38dad82a772c82fd7d3fb36586f"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b3e733f2f3eb5e632d0a6f752780cd60d65e7a1f633f8479466aba890ed08efc"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"59560941642be66c77378fa13158c3abd4ebecfd90047dfeaa5add33ccfcad93"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"421ccb019468b81fd47ec028d44496bc51e1a90f49f74f2a465fa3ebdb48b52f"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e6abce1f45155c180fd9f0b655db565925a861f8ac552744bd850a3a03bc359d"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3437ee9967676cae8a6276d22fd1be89d3ddf1eae8ebe8db34d4a84de48d24e0"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"63a16af47223becda58eae33247cf77754e3e16b721667ec30e5330566a4bd7c"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e3db16094935a16f8a35bf22a9bf1479fb75202b90c73ddf0fbbf35b61ea7106"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"228412672a56765766f4ef36ca1ddc1615a0334d7f85df5195e2b4ce24a6939e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"56e792083499e6f5a9ead34259df4ef49d2554e5115b9c2f521cbc340fe7e4b2"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2443be19d35be3c930c8be7de1fb3ebe3003f3f6b5ee902affcb046879b13e1e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dc9ae4b6d65156d4ed4fecc766ed7e3446d28209f0fd8dab3a06e49827331635"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"869b8e4fe53145f2c9d585fe62551bd928c1196f6235e50a0de5dc55069bce03"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"38c3481612831948b0a1b6a2c3d1ae4b9998f3b1cc3659bb623ee8ce4ebeedea"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2a7233cd3a4e9edfb1e2a3d65d317834362ac442d93111c5add87ff9c9543a65"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8cb5379ed5730512ffb81df5f4d6c906a24f0c3fc8dde0128cfe215bf65fc729"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1da153e72c3de6120a063cfca74730f746b68dd8afc8f5f63c5aea3508fff7fb"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a5570879fc718c8c28051321a914610dcd8d71c0ec7b8b98066b3b84abca92ac"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9985ae7af80af7997c08e78ab89a6b2327c5c5c6cc5a023f793499b3390c714b"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0ef525f13e56bdd2b9cb6f9a8774cb099a4a3e06ac34e6aeed167d716279b168"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b6b4b6cb3264849b912e1090f3473c706a18efac17a8d191c538bacbb74307b9"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b1874cfbc93073c2fe8a80f70ea866dca4a70b7756f95458405e07f82d6c5a71"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c344d18ce1b507cd298e0920747e3105f1fc08320b849e1cc36b992d736424e9"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9c044f502a1df91d18bb02a1595824f59b9e9a495647d56ca964fdb70fd29491"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bb1135bdd6b85a9a9ad36c3bb8284a0e3f1f4a4e2e6e6c3e45b8554dec2cccdc"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f2dacde48ba85d9ff05068c36bcdc45ce765e513f588609f6678090b10ff2f71"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8a2cb0f2d601710b8bdf7b552383c27e4d94e3fbc17fc6095d260b9e7e6036e8"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"29815546139d656d20d4e80bf2117105f46e0fd9cd7bcac8b11bac9ea1e2313e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8e48c14854c889e035ce9518aff1aaecd10eb820163bb0e02b1d0aca7b42f9d9"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c80c0fa777a5595137a0e729343dc66d0de034aff6096288a775be8faab6a29d"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5580682647111a58dca0693b7adb3ab897d5a1b659da68b6aab2501f187ccb1b"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6fa5150db6656b2b74bc3387310f436e58af81c2a6516e6f323c3dfca2ce36ef"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fb2813601cdf8ac1b2cd7bbc0ecb6ac2cd73ec4eec1be8eae09fb9f32096fd5f"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d632eddff24983188762062dd67fc4b7efea215375644a21fac88730fe0d9aa3"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"21daa02c77e2093b1c592c28ac4026265c556927e8cd9d08efa82e30677ecd54"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8639b06e715229c4160da457c16f153f7df4de61c73a0927dffe28083cf8c226"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2b60f945b0daaa27250037f7498489529ebd774738440efcd7fe3931b1c3d8e8"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3b528932e26eb938dda8d646c4d0fd1ce3542454b2127e3bbca8b8477dc674d9"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"46e3b39f1a0c7d8eefb5b5878e97f6fc3613ca6d5f300db610c4c3912b6a8659"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9fad2b606cdd473683016d487b7404099cb3a730b5d757c3262b59e6c7725ed8"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"86e29595250c7512a8659907ebbabe13cf42ce03f62fd7b0e8a3d441c3dbfd36"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b96ae25ccecc7a51db843bfbf7d5ac5225c4c719925b0a080f613d1b5a8ef7dd"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3dc47fbeaf6007e408db4f2a769667cc48c0487c321e612cab71e0c279f48469"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e4e4d53564fe731100ca7c2d079915fb3b082384634ef16e6857124f4aa2ff77"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a19b3199202f95913870c8bc90bba12f624a29d40bb99d1e7200301ee573d8ac"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"38726c40c58142f68ffe08486403fca7b3f3ecc5dda8c5de5de7ac068b58a4be"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b0bc770caa90b54a64dacaef306b689f3035097d70a222f320f1f1b68e5ddb87"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"aaf6b45d1e13a93744315f45e528735c1dc6b5ff655f173df23962132b2c1fc0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0f9a4150b3b60dc43a51f0d213cc3598a10d3c0bf87605a09c66f618aba7ce26"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9aefd7f7de5c5bf2ce1c9234432662acd6beb3e282d28ec1b15fb3b37b9c09e4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"633c0c65e005f92e2241fdeed2e1191d91b3f6e60fe57344000833ba5ccf43e1"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8805b194d6511affd14731f106f567a8281566213d180661869e20026a84a7e8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"49614e4a61e59295d642978996ec54ca3c6ce0e03bb38c04fcbb4224e14e8170"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"94244cb1920b6eb36b93e2e36d8415ece0a872749d9a83f4216912a8ddb281f9"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"076ee19c261f358f6c136af8087a04deeee8368eb510d4ed6a1b7fa41d3a1483"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c1261b312ea2aded7f9f9f9208f37a535a9843432a3a7ed9c6b6196b55d56998"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"46ffb06f23ec8ccfc78b18c91e35c4d4c3ac059df72479ad4599f72624c1a1f5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eea34665a2fad5d80e1b33f039abe4d9f59a9b8c473127e8fb00962dabba27c0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f22637d3b3ea00d9477c34ef629c1ee725fcb73ee8efa51dbf476fd7ae52f2d7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d81f8a9c698acec4e3a4c0b1f737e21e0d06aea7e8232e7d4c8fa67d41f7417e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5aa6e73af6aea48fcaa6f4ca303e1ec42dfe8b6937c8006b8418171f56112fab"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3c32b18d3eaffe29e89a7f22a89fd2c2bc83fb06ec4ad1873b36cb74d1b402db"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7367e2f3a150cc7d8efb34b71539fd84131514bb0411598fefa679a5c5ff6f4d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9e8f3e35685fbf188389c4ee8a8cb5b3137a8bd996624dc4e9f4e9a28432bba0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"50417b33884d934c1bac9e4d4c0fc330b1b57dd11a9faa9f4cd059bc77bdb198"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"622b4e3d56bcf416cd9cf50057fb4da27101b6d7569174df1f0417ed1208864a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3ec3c14ee613ce6d286ae040a8c3c8942266ea7e8c424075a4a44a374e27d0a9"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ef1ffa98c544d16144b7a6e520ce7de83004dec212b6f3d955d360874c96e1f3"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"87b2ec8636f80ece25fcd68a88d8b9aefbdfe1f6eb6a6a98569a4f400594c553"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"25546f85d4a127903edf58b1ecd9a850e4dc9da55332c05a59aeb7c36e0fe265"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6dcad2e545799473230e95c75aedaaf900f1f37dcfebc581f90a3eec27475bac"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"041f1df1515ef8697959550cdea844fb3297ab1556e0d60117a9f9280784dd1f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"495f8b24c82f2a85ce603437e6a0fe6f1e70ae7de17f07f05922eb705a5592c6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"deb9b185b4b6862b407b3d325e99651caeb5fb7c6716d75de8a62fa41c90b8cd"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ea8b26c679b707b248b6dea7ec1e17c59403f319e2bcf47b31c01aa909b6ae6c"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2c88a9bd3a0a8fd96e8a8aac3936c33dfce833c43a84e5f183b755be39bde347"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6dab7ae5534cae8b6e22b04190239bf44cb60d8a0877a2169d5e298f5170d35c"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"97825bbb25e49f2b3c24832d2458ad7a60641f5c1487aed4c5cac6d40ca0dbf7"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"be59d7fec2e9452df7195a270374e69a606d7e905892bdfdf051f40b36bf1f0d"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"269097279e360a47f10b397c354ed1a49720b88fb4b3ae2dbc8724195334b0f0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4251488d507cdb6e6c3c5ab91aa785661467686892ffa4b4d430a047360501f5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"66f64349628a938bfb6ed07d7f9b67a44e05209635333cfff5f09253878bb9eb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9d0e2c02355f2c430d24870d954934009abb3eabf23b22697b7adf243626c968"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b2d8b82f17bc0eba271178d9bc243b0a8cc8fe132a48cc2d4f4c05ad5e124ecb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"364104d601dbbd6bbbb3c242b396ce7fc0e39febe365810f95be2a2ca39972e4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e9308a8965710086e23fed2dcf2b96bdecbadd270afa58517e8d1d75571e0ea7"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7eff20b0d683b0685667d151db0feaf4bff31de71579a7e923af4f5e623699bc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fe42b7f33b414855dae27d1caab93e5423df57e0a7e699b0ba6215d13df6c052"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f454f5c3cafb68c056e91a63ab651ea56c51c1557ee554b94bf781eb86d11686"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ea3e122a4f69ff944252ce8f30f7b8c87b8e2200f8d09ea9bb8f54d913e55898"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"17e76ec8f6d039a1f9a6a062c94859cf421cb95e326569275c178a0469b18e93"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6fd67b823c0874715cb03873992fec30301622721199d539f5eb5a5a686cd2d0"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"98bfba80051219c52271ddc929285189088af48b2c5cedf0252943c6b4d4e0b1"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"642d19e19863ac8f812436cb0ce5cf02a969ab932cf1f2fda2fedc2301e1556f"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"70eaefa0141ce38f4bd0960e4688a7867fe67e86ddc5fe9e335905c22e3b7cbb"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4e62582d4a2f943b8c9568621d6359ec181baea353f3e15d7e618ecae57aa7f6"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"160f31dcceb9ca72e8634d10b2836a3766f241b36affad29417a4e51566e1d7a"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4d4db38ac38600ca0f0cc30bf283f88f6f5bbc0a2d1c406bd864283f7227c5e8"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7c1b3025f170fda38b3c05798df7b7ae0a0c439ba677c163f717b97e758062da"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8ad1df268ca454bad0aa1060f3789730029b9f169d5a13b5339cae3e2d2b192d"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c5faadf96dce146d1bc448a5010962ec980efabe9e98d06aef94bc8465f2c213"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"aa8455183213322e976e1fab6e8c2b1480d3d68c0dcd05967f7655fd27fba8f5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5e9f43ce67a8ca9db90180aee53abe850a7ffff3fe5b9b13f6fa90f52041c56e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"592d1d9885513744ec82db25eec22e1fa301cce9dc8c7e01265e56e0cc6409ab"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1190a67f83ebf538b85c6c31aab51f47bca07c147c6df58b3596acd55515821e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e96004392ce0f1602b0e095887e3cb1653bcbeaf5472d7da677526584249e173"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3fca8012bc0e5580700df97bf238a44f2f68901ecc4c1ebf62d681b6857a2aa8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ad420327653fa990a812784608dc78033dde977a1aa61d45957c95ca81fda8e5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2972afad706610e5cc0cff88b81bb33810c21b39825345f623dd0091d06cb72a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2780a676e27f964fea7c3125fc0feb5c44c1a78c0aa6445eba0c5b37326c6779"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cbcb8e246fc3467da7eb744461bc512b18fcf5d1107915f38ae4e0448d0e8adc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"115c31eb08cb18ddbc2da6f37bd9634c7acc6e24f07198da5b7a7a406d0d2c3c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b76f483620121d7eacb678ea72a04b9b6319f201860ee6a929a62f7515f1f270"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4e27aa5be2fe438374cf7276cb9fd29a4561159d5aaf0dfbba80a491fc0b93e6"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1048381dbbd5e7b7e59c536ff0c64e34d6aca8f49235406b4a3fb00c00823b03"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a9a79b6089f8a60da2560e05e6790dc3f6086f08041ce7f9e1ec0bfc90b0b629"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6167009c418ff60a5b2a786f95448852c5663bdf4ab7a00b4a4f8a273419c5da"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c960902bede37b7d81a66dfc11175ca7cb553ad0ebb78ea0cbc91c93aca4bb7c"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fa666defd2b57d26795d8ec2019de811984f4a083929451945703deb5a975fe4"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f6bf7a68aca8ccd1b1d8ff0cbbcdd4ca898c8210e0781da1f52a92757de17eda"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6717c1676e9778749c20c8ac86262782ed112a844bd05f3979e3ac12e9e7e0e7"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a3b0a8fc50c72f318d235856a1cc6d56ffafcef9c0bf0c4ad1797c24e25ad8d7"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"29bb01b4b17722d3141c89fdf097d95917d081785659b3856b438717b65d71de"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-test 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2df0e239300b009a73d04572d5fa7acaf1909974b435b44d603e52d658429c17"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"3d0d3314be4db453f59480387688418ce35219a97658af6953acd5884c27fc96"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"61f828655d0c483449eca22724cb7f7186f674a739e00528f00c3b7f2efaed13"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"fde6b59d849213c240743bdeda9dc45f762bbf12c8a486c1c2f461e0d9347ad4"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"0fc1f7263e683c42d6ce165b3fc6dd3ea52a5d4f4aaaf28c30028cfdf305d293"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"b0fca9e0f078e4ba016c6bfd1da4835ec3fdd55d7f528fe674b29b5a8de6ac86"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"e7e07cb4f46100edda83bd8b0fec6970932c693667c66c561eb8d0baaa5ea6f7"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-actuator 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"b67b6a1a398efe6ad342eddea8aa29fb125669bd06690bfb1ef94ac0657e18f4"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"eb6aff2eaca8d672067c2a0cab98c2af80168ef3f783a9f27153b6670237c865"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"436f50b10f6263d3bfcafd88d79afa64563936b1a9d5fa6cd2ec0f9f6efd19e5"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"fc23bdad3567ffd7491a464a79509e355a21be05b4799e6c9fbb4d64cf045963"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"5a5a09e31b8cb39287dc1a097e1a329e18249f28c4f25760c52b9b5472ba79e8"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"3267b6659f541f8e95aca1107e4709f5e6390df608e6de938a38a1b842275742"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"55146accc8573b6d3dcae9e6ef6ceb07ee6c66adf5823b54f300334b2d09b371"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-logging 2.2.2.RELEASE: spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"6ff752392628bb492ad4e1e83e6b558948b095f9fb6940808c61d98dca0d9b61"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0856 spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"9c20fce2b0d0c4cc0399549a421affb78d0c30d882ff8840306db55d519cafd4"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c7504b9368cb5ef2b981c27b31bd9684cbc41624385f4722944dba8cc725c766"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e6b47507353566108f786fe13130b7df93fbd9a9b34324954058e1c4cf20f181"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9e0d9b0a3b937af86b9bd63c55f1b0e9e71069c8cfbd7551b65bf32a024e4496"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"253321139828d4703e96220a10b08cef6c3343fce109d93ef153759e0103f4d1"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"704b69cf1599a1a36f0c362d57e0d6715c46383c97db090f3d8f94f2b6af90f3"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7213d57a37d87bda18e6934380d20b137a7b4cfa440774e0721620a3b22ff45e"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5c35c1f78e8c25d7e08eb859ac690791d75058aa4b1d2c26594fa3ae982752b3"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5d3306c0dfd8aca1208376e5f50ef85b6d73c32b65ea500ec7462b1065822def"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"490cdf3b695d80c0bc3cb4bc03703bbbaa26a79204ec3260811e9f3a1393f9de"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cdd7616c8a6bccb269eb3becbd3c3d7499719aa014e1f9b5d99239aad4b9ea25"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"110887642cf4aeecdee11732888ef9d5d052a53350deaba07370150ff58b6b17"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"01a72af5d455a20e03ccd0e84e3f9eba0751e85a2cee9c1851abbdd1f066269a"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7c3386407ca675a8f1c025d3e5ddac324aef159aed432b855f2722f7e8112b00"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b283d08c2b54dd8c9be68a44c4c512b33bf1f92b48fae3ec0ce17979755e040c"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"43fe0a48bf07d806917fafa61a255a128661da15a79222b735e78ddedae02594"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"bdf0419af6cb4386af071579aa0c5c9b6f0f49ba512b2bfb8d8daf76c9ff31ad"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"23675ca09f263a1b3092123ca8c16a19e77a58eeabf2eab8cf0e36e307ba385d"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a85519804d1fecd398401c65c86ff26e1d6f31acbed5f45ba342c720f51fb2e7"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0e4cd38d5d86af28e44559df65ab66ba5246e325a78ca89b712a97e47dcd164b"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"48c653d6fc7b0fe91c4789d649221574255bd0c63c9d47d8ccf817f01d39042a"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0e2878824c0505d05386cc3de12799261497972b03b19e54cf607185544894fa"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4c1232fdeb41807824df5fc26aa18ed4dd879da9d62dbae08402e8d097986341"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"065129af0555891b9a0d41f65b1fda546606f3a2c1f24013a861acf5bb7c7ded"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f5a3f783a3b851e8954c236a7f4daf80b27ccf45067b88416def9d5dd9091c87"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"509635916bcb05e1d3770822f8ea6e0c3f59c51ac4ce89045300df6ea461b6bc"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"92863e87c9a73ef2000cf98ee7897b447e584b20f371fc640d1106d7cf3f7373"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ab309224c2de3c7f466a048e21f77b4f4a9efdb33e3398f02e01cbe28c4e2f01"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7b7efdbd1b4caf0e9d8f8aa0bdf41f7e8160f920433799ab15fca06d3bf14126"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0a1b43b5478dd1e6c98d294a8fb2e664f893ff25d16be0ac8789b5516cd6de4f"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"90a2e5c89ce1c762c2e87b9b395c043d56dae9daa6e18360a42285a907f9ba68"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"93a83859bcde54f6eff81650167412dd66ebd6b6b2394276854a45c028965407"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cd59930328d6cb499f9d947c54383dd50c8140a4430e1c55245600d5433beddd"}},{"message":{"text":"Spring Security contains a path traversal vulnerability. This could be exploited by a remote attacker to bypass security constraints when handling URL path parameters."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2016-9879 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c5a65c534cab6810e8406c70e5e2f0d39560f51d4b0124c740fcbc4af205046b"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"72148c3dc8903776f06240e1a4f9fc2aad0b019a328a59209c277cf9f682334a"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a936aeb3ebdb5aded6ae74d21a0f190f364acfabdeed362b5f1625edcd3c0893"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"edf3b7083785e2fbb0af16cff6d45eb48f58f9adec9e002188358cf8d8ad9885"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"49f10ad91c4292ebcb2e032bfbc9924d890034ce5e975357384d1208b68b6bce"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9031697d7201d465aba20e4164e1ea57b9884f3457c0c4c0c706b43089609662"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8bf1c3ab938ee087b19fb418ccc2498a566ef2ec84a06a38566e9374f6c3ec21"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d641c631cd7529864aeca09616ecab624167986cbf7e9b733111e8a54a56fd7a"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"62c0410d273cca431d8047d768d83d3c374f538ccb666cdb3d70322c1b6652c5"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7c2cb4731a07990d2a75839caf74ea6278b93392af3c45c8a5e6a9bdf4d6877a"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c4e8653a302525172441e2c89eb9b06bfc5c8f81fd51cc13a46deeda8630685c"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2021-2310 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"198e86544b45c58338947ee84ff1723c971df76329caa92d51fa4decd289f88f"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"573a52ed535e3cb681c2e8e9f2bb53a20869afe410feeca0fde80a48766ec2a5"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"bbac549d69e5ad34bc10f0fcb7167313ff3b0eb21e79b75d1afab8b3984d359f"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4b970272198c68cbd33d8f683f13267d224469c2a3a23ef8cef44bda23ed5cf0"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a92002f1558fc1653b0d4a6048e6bbaea6cf54a81b70beccc992326245d396c0"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6edd5431f346a7f347107f29ade4266aa388a518abbd1ef1bd758c7d6a983a98"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9d824a5303aa1e1b6e81cd0f0ab4b79f5ada91e04a8137ce7d73c0d458d36969"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1ce09b33a1354b1e7d497a4843b4c3aa069846bb75978e3d6d2ccaab021bde14"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"63e1fdede389f795be4a1d8449846f2640b03bb7efd9bd7602cec7619b705ac7"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a4a9cf1d76cb7bfb33e5003c05a32e6bd94ecae335ba15c728cef95bce700908"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cc9a53a9ac16578035b41f666e5e0c8b6c26ebc49f001b7a495f1c282ca7b2b7"}},{"message":{"text":"Spring Security contains a vulnerability that allows authentication bypass. An attacker could exploit this to gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2019-11272 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"466a8c072aea09ed0b53cdfd5b1a960ed603f5fa5afdc4fb480ad16ff21de0b8"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8e0ce650175f4b726192c4fc447472998ef1db9dd17edf5f3f0a9db9d1adb0b5"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c634dc757f0e1c54fddd63cfcf5f20d27df064d4a0a345334031334a43f1c0e2"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3668b020eef91892853c790a2c1d46ed85b3197f9bfa774efbab61805a9b1646"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3556daa7602a51986fa4d42fe9e6c8ff979eec48cd3da68ea2485e5fda7626f9"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f8af1dcb989f2b6061fad4306b6cca659b32d1846b192810a2b8eb809cdc5c32"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"64beb598d625f7764168577271b26d0e6e31db1fadc2123fd095db684aa956bf"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8775d3a50a34b86d0e42ccb3c63d6d5a57943efa0dc0e5f9c37addbd549f015b"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9e34bb237a1a135084ffef2719c615b3b3f9c57c363bbdd1a42227ad719336a1"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"671efef6387ad916c9897641c398b4fdc49007c8b3c7ec2aa4f59f91224c3df9"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c0405445e1274d0293811c9c91f28c2e8f0656e45a32cf2c45701f1cc4eb2983"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8603292f8390cfbabcd7283e3d83be78e79c41c4b57c0756110848a655287a54"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"230dccae0e452107c4fc20373bb4e5dcf240fb151e1edcb4c575459304f9d722"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0764f026a0e492cd99bf9830d8fb0f9c5f1cdd24af934e71e8d88efd72f5e8cf"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3b629ef379712216d75e1f96cd99227280fc140b20a0603cd70248448eaab141"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ae4fdc5ddcb6429ebce6a106257dfbbfb2f73cf17431a44012e95e3a7e7bc277"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"780f13df5efedc10883a038d5ee82e2253da09c89a61c6aec1024793720f31f9"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"69b0633efd01bc6b81f2359064f6f1d68a0b8f7a38d2353134e78f95e8a07b04"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"143296917165c8252cdd0e0bee21bbcd59173fa45b9d0f9085c14e9b9945923d"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"bc3429894c871aedd1717c0962d4d590bbbc559d889971b4eb604229323ad389"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c9d9811c66b151775c3d7e85b95860b1a35bff193af0a2e42a234de544ce5f42"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"be4cd77479c96936335e0e76d12855a4656edfc08261bdf6dd160d22948911a3"}},{"message":{"text":"Spring Security is vulnerable to a remote attacker supplying path name components with different character encodings that bypass the security restraints of Spring MVC static resource URLs."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2018-1199 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8ba1ffe78bc866b882c7ab4556058124b11a9bc99fba49b64af14413e7e08936"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"26b4487bef5ecdcfaabf24e77e49e22513ae5006606b77a646f2b5396c16c0e8"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d43a54e624d138867e1e36309a241731c397acf936a99c6a46a318c5ad5ab8c0"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"feda23f4a0bde2e9d4bca309c5ed19d94f529e930e79ad0d43c2696bb72aa957"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cc83fbe3d64a43f81b783d08a2b11334a8a3f8c27383b0dc178785e785078aab"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c44e51241e136d7f94902d201568cf7b50657d56ea45e4092da38e5d089150eb"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"6aec7b350488a15db4cb292907a78af183fa7fd31a78f9424578d338253d02e2"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0b50f172959e01ef34e769e3edcda13ad2877593a93d4a26b7c9997398fb2c20"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"36d69e864321392eb1bfc51cdb9bb5b7c6e5da2f447934e96933076e2300b351"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c502bfd80934379d6b39db485a32d9b024c48f8a7b96e99bedc4c0bdb25043f8"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ed182ac69136148e6a83e8b74a99e48c27339ee322e6f15cf26fc74962c46348"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3d6c7b484286ecef9a78a80ddf240956bfd32a355654bb89d6202aad8ca97b6c"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"99717f53e13a49b9ac4257ef9897f92c0f4914653ce212ee483d51377c523e83"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"448fe198c82bcfcd2f37b9f512fb60d5bc68cb55fb1982c44faec56a50fe643b"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b103932b38d58f2ab960f31e29c0f169d8a79874d5134cda7da1a832023eade3"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"6d7e68b37b8a36da9d2435b89d4da5db781d73f40d976da1ed8ab3c8d3e584a8"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"2ad0685106a1e4bd7891e4894eb9d2bc1445fb6d9c2e3ded4cacbc3b7664641e"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"ff171458005c6271ecdcc536c2519d7845cb0486219c4a3311335999e89b3e12"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f7cf5db271556305e560d9cfe3aadfff681a8b8412b5a050f0a91dd88c94d125"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"31e2d432aefd46c8b741f6d26c2638efacd6d33f9a139a4b6bcc6fe542af1a86"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f7afcbb7b024708f5b45bc9434db5055cd27c332c46ddbb9418ed69bdef069cc"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5cbbdf08890bd705a018f040c3ad54102a93fcd82dbc22ca71a6d14ca9e82d56"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1f246f905e16d80d097b6ec26da47b531ebbdcc0f8c6f5d5d6113cbe27965d54"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"eaadbbb9a0b7d083902337a96f93508faca48bf92c89c0016925990f5704f5cf"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"fb7299dfaf03a00552019d9d6318efa1816f864670b56605ede64c9a6f3b4479"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"42b2f254132191cacb3980564ec9b5186eebaaea3634b0d617bac06384a4747d"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-servlets 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"78e9c04023c3f3da01392ea83ae98b3b08bf0b337922bf527c7efde278a31f23"}},{"message":{"text":"Apache Commons IO contains a path traversal vulnerability. Successfully exploiting this could allow an attacker access to files they do not have permission to view."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":128}}}],"ruleId":"CVE-2021-29425 commons-io 2.6: commons-io","partialFingerprints":{"primaryLocationLineHash":"ce40dffd5cb145a88520f6f16e297f375c1451abe810a5577811b159b862215d"}},{"message":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-2976 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"10b704ef45bc6c0ac06feb537725bd452af60a328301dc869d2816b124abed1f"}},{"message":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2023-2976 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"9a92a39fe3a8d2acad97a61f03913e6d1d741f48fcb328745a391ce0fc411547"}},{"message":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-8908 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"5d36d1416e6761f8b5395fc42d0c590d9c67118e9d8d00630010939e95706281"}},{"message":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2020-8908 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"2ebe3bef8b08f6bd15d0ff889c04dff7f852b1a48ad5016a1f49e56c0594a06a"}},{"message":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2018-10237 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"bd461582cea3fa947812c260853b72742fd241a5f1dcb3e4059d877a8ed07215"}},{"message":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"pom.xml"},"region":{"startLine":129}}}],"ruleId":"CVE-2018-10237 guava 20.0: wiremock 2.8.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"5538c59c84d81d0b6ba579ddd4369d2ea821c4dee6c43da7820fc0c5fa03431f"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of user-controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note:** If the application uses XStream's security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39139 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"d6d5f17600f1f7c66d60f47a3160604b8228a325376c5f9d1a04ada89f9ef047"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39146 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"4448bbe7124fcb251ce1f0f836f7aab5ede80ad8f32ccbb3bed742b81c51e52b"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39148 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"ab3ba4c93bc0761546ef1b162cdd3fc4816571d396864857bf74054243933450"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary system commands.\n\nNote that if the application uses XStream's security framework and allowlist approach to deserialization (recommended), it is not vulnerable.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39144 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"0a1022f696c29f691a016a28bcddfb5c8ce0b1a4645136b4e0db9a911465d20c"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\n**Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39141 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"2837196edb178229adde4af1f843895c688b7a4f55d07243102baa45afe5484a"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) through specially crafted input. A remote attacker is able to execute arbitrary system commands on the host machine if Xstream's security framework has been configured with a default blacklist, rather than the more secure whitelisting method."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26217 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"3b65ed9bdc4fe1d38d0c284d1f10fc41392fdcde35aeaa881b45246e8f27431e"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2013-7285 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"8fd4f7fc64c9a000eed6571e1f981bc3a1460a43163343d31197339bb309f32a"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to execute arbitrary code from a remote server.\n\nNote that if the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39154 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"c36885be8302956ce758cd0546549446a87e1db061645b5307388dbdad21f762"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39147 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"ea4bb7dc98247b93cad8ba27e8256522469f56625ae21538d4ed18f5477441e7"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39145 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"102925d52443ea1b003f052ba85af72ed6541df89a1c7e3d70632194808c4120"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.jndi.toolkit.dir.LazySearchEnumerationImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-29505 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"8ef33634a276541638ad4e4226f1e4e6849ad55eb9c377d95df6ed7f2b2e2fab"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary command execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `com.sun.corba.se.impl.activation.ServerTableEntry`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary commands on the XStream host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21345 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"24e73f0128c0e5bf96e321c85897d6a145ddb7cab099afd72e5e2bdc0573e4c7"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21351 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"e57aa373d460176a158b4d9b19671664df67e00c7a0e24634401957451ff381e"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) by a remote attacker who can supply a specially crafted input stream to modify or inject objects. This allows them to request data from the internal network that the XStream application is hosted on."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21349 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"4df82b1786db22006706b8210b1b17578e51fa7548d7197af21bce9294b51ced"}},{"message":{"text":"Xstream is vulnerable to remote code execution (RCE) by an attacker who can supply a specially crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21350 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"ff91dd3800a9a916bf3c15c224ffd0c726358fdcdbd76e50c2d8e78e770acc11"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of CORBA and XSLTC classes. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39149 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"b33011176eef1db2c526afda5660a4de9aaa5fc505a45929bd5c3c36b51828f2"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a server-side request forgery (SSRF) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `javax.activation.URLDataSource`.\n\nAn attacker could supply a crafted input to XStream in order request information from internal resources."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21342 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"56d89d2c391e772d4b45f2eaf7d09cfd4a4c980cecbadc6fd4bcc68013ddd2f6"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe demarshalling of the `KeyStoreResolver$KeyStoreIterator` subclass. A remote attacker could execute arbitrary code on a vulnerable server by causing that server to deserialize a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39151 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"c62c40e164cbd62dd10fac8b4b9a29591e92abaa844b1b73c07024950b012f07"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case are `javafx.collections.ObservableList` and `JavacProcessingEnvironment$NameProcessIterator`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21347 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"663049fd89f848c3a83755fb5be8ca383ea4c4bfb574766b23f3d97a7c03b9c7"}},{"message":{"text":"XStream is vulnerable to an arbitrary file deletion flaw in it's handling of unmarshalling specially crafted input. A remote attacker could delete arbitrary files on the server, if the server process has sufficient rights. As well as impacting the integrity of data, this might lead to a denial-of-service (DoS) of applications on the system that rely on specific files for their operation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26259 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"6df3add933462451b6910a9335f00017a097513c49bcec4e3557643dd55d6849"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are the JAXB `Accessor$GetterSetterReflection` internal type and `com.sun.rowset.JdbcRowSetImpl`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21344 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"bd1646787ef420a1365b4c89af53aa60a0147e757515cbad559f8be2bbe5d387"}},{"message":{"text":"Xstream is vulnerable to an information disclosure flaw where it can be tricked into including remote resources when unmarshalling specially crafted input. A remote attacker could learn details about the internal network."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2020-26258 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"4477293c15aaa76a248cff442e51b59c90e20900261579a3b3009845eef95cfe"}},{"message":{"text":"XStream is vulnerable to remote code execution (RCE) due to the unsafe deserialization of classes from the `com.sun.java.util.jar.pack` package. A remote attacker could execute arbitrary code on a vulnerable server by causing it to process a maliciously crafted serialized object."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39153 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"4fcac576012f528a5ad6d042b85bbcb81cd380b1e9d081ea95d84ed6473818e1"}},{"message":{"text":"XStream, when using some supported parsers, is vulnerable to an XML entity expansion issue due to how these parsers can process external entities by default.\n\nA remote attacker could use this issue to retrieve the content of arbitrary files with known locations in a local file system if the Java process has read access.\n\n**Note**: XStream is not vulnerable if the default XML Pull Parser (`Xpp3` or `kXML2`) is used. These parser types do not process XML entities."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2016-3674 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"5671da9af7ae8c37e7d2f22d0d3b86533df3df2089d0eb894a26d134ce98ebb2"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary code execution issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `sun.swing.SwingLazyValue`.\n\nAn attacker could supply a crafted input to XStream in order execute arbitrary code stored on a remote host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21346 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"34ab0b14755e89f0afb8d98f984e34e30aa0a1752ffe724f92d1a0ac723772e7"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39150 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"c55cd9d3671d6f5cb528b94754156d36f6990d47b2a93cde56d3070be85681ef"}},{"message":{"text":"XStream is vulnerable to server-side request forgery (SSRF) due to the improper restriction of deserialization functionality. A remote attacker could send requests to intranet hosts by sending maliciously crafted serialized data to a vulnerable server.\n\n **Note** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39152 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"e0e054127b56ee4203c7579481396f78db2bb5428fd6429f6c45d6fd1f18f270"}},{"message":{"text":"XStream is vulnerable to unsafe deserialization of attacker controlled input. A remote attacker could leverage this to consume all available CPU cycles via an infinite loop condition.\n\n**Note:** If the application uses XStreams security framework and whitelist approach to deserialization (recommended), it is not vulnerable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-39140 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"9d4cf9065910df97e952c3fe48536d253192cc122f1893232573a8fd69f77c2e"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to a denial-of-service (DoS) issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous type in this case is `java.io.ByteArrayInputStream`.\n\nAn attacker could supply a crafted input to XStream in order to cause an endless loop, negatively impacting the availability of XStream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21341 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"29a129975b6c13088f95a3f618a62666e3ef9697f88f45f4db1ab6f9cf2d687d"}},{"message":{"text":"XStream is vulnerable to denial-of-service (DoS). An attacker could exploit this by manipulating the processed input stream by injecting a highly recursive collection or map."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-43859 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"e71eadd2560a9ebf844fa39aac22d9264debe0946b9a707d9a235efcd8a1fd75"}},{"message":{"text":"A flaw exists within (de)seralization functionality within XStream. Sending a carefully crafted object data will crash the Java process and cause a DoS *(Denial of Service)*. In order to exploit this vulnerability, users require the ability to manipulate the incoming stream of data."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2017-7957 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"a5eb5cafe8618503fed440d7b09a169c1175dce4c262827958fd9dcc1c8f3df1"}},{"message":{"text":"XStream is vulnerable to denial-of-service due to a stack overflow that exists due to a recursive hash set calculation. A remote attacker could cause a vulnerable application to crash by causing that application to process a maliciously crafted input stream."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-41966 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"7cd060156b00e92e3aeb9d4c6a13eb4ee918dd7de3da575e32011391601b2815"}},{"message":{"text":"XStream contains a stack overflow vulnerability. An attacker could exploit this by providing crafted content in order to cause a denial-of-service (DoS) condition via a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2022-40151 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"800c3e6f304e1883a0fba0a4acacc435c610f52622dc1322b2669e9e3e848637"}},{"message":{"text":"Xstream is vulnerable to regular expression denial-of-service (ReDoS) by a remote attacker who can supply a specially crafted input stream. This allows the attacker to occupy a thread that consumes maximum CPU time, making it unavailable for service."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21348 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"b1cd40bca581ea528e3830500fe68456bea9ada75f89a6f6f8c6692c4076e651"}},{"message":{"text":"XStream, when in its default configuration or operating without a sufficient blacklist / whitelist configuration, is vulnerable to an arbitrary file deletion issue. This is due to how XStream can potentially create new instances of dangerous objects that are not blocked based on the contents of the input stream. The potentially dangerous types in this case are  `sun.awt.datatransfer.DataTransferer$IndexOrderComparator` and `java.io.FileInputStream`.\n\nAn attacker could supply a crafted input to XStream in order deletion arbitrary files on the local host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/vulnerable-components/pom.xml"},"region":{"startLine":15}}}],"ruleId":"CVE-2021-21343 xstream 1.4.5: com.thoughtworks.xstream","partialFingerprints":{"primaryLocationLineHash":"f1f54666bb6e0c3eeea9e28396bf71056e770456b3cdacb9ccc11296bba6e474"}},{"message":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to the insufficient validation of classes that are to be instantiated. An attacker could potentially execute arbitrary code on a vulnerable server by causing that server to load a dangerous class."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-21724 postgresql 42.2.8: org.postgresql","partialFingerprints":{"primaryLocationLineHash":"335f829115a8cbde920171565638cc8292592e81a14ce15110cf02cdc964a5cb"}},{"message":{"text":"PgJDBC is vulnerable to XML external entity injection (XXE). A remote attacker could leverage this to cause a variety of impacts. These include:\n* Disclosure of confidential data\n* Denial-of-service (DoS)\n* Server Side Request Forgery (SSRF)\n* Port scanning"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-13692 postgresql 42.2.8: org.postgresql","partialFingerprints":{"primaryLocationLineHash":"ede1302c842827a1123d3e3b85fb1a2e724c73e28b67101037c9980a4d98d0ee"}},{"message":{"text":"pgjdbc is vulnerable to remote code execution (RCE) due to an arbitrary file write issue in the Connection Properties settings. An attacker could potentially exploit this by creating an executable `.JSP` file under a Tomcat web root.\n\n**Note:** The vendor disputes that the issue lies within pgjdbc, instead suggesting that the issue lies with how the driver can be allowed to run with untrusted connection properties within an application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-26520 postgresql 42.2.8: org.postgresql","partialFingerprints":{"primaryLocationLineHash":"7c03e320bf0290d1bb66262ece57806bc9e2cbd80ec058276599620c35d4fa8e"}},{"message":{"text":"The PostgreSQL JDBC driver is vulnerable to SQL injection due to missing sanitization of supplied column names in the `java.sql.ResultRow.refreshRow()` implementation. With applications that invoke this method, this could allow an attacker to execute malicious SQL statements within the privileges of the JDBC user. An attacker could exploit this by specifying a column name containing crafted SQL and tricking a victim into executing SQL against the table containing the target column."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-31197 postgresql 42.2.8: org.postgresql","partialFingerprints":{"primaryLocationLineHash":"fdaee5f2d00b9307a466d9eceeef49db570212fdac0c0a67141708ca7c1599cb"}},{"message":{"text":"PostgreSQL JDBC Driver is vulnerable to information disclosure within the file system. This could allow an authenticated but unauthorized local attacker to access sensitive data within files created in the TemporaryFolder.\n\n**Note:** \n* This vulnerability only affects Unix like systems.\n* For users running **Java 1.6 and lower**, there is no patch available, please follow the workaround provided. A patch is available for users running Java 1.7 and above."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-41946 postgresql 42.2.8: org.postgresql","partialFingerprints":{"primaryLocationLineHash":"311c9b104b925a72ad847cbfa0773865dbcbcbd18ff9d8e03dd60504baa72302"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"e53dac3b69db2f0bbe3b0351ed4165b8d38f136ad38c5f73c6637ea69aad917b"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"80752d348264b4f0758181f9be39c889594303927e53300d58ce9922571c6868"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"549aff04cfd94bc5d45f2064c9d0eed0e35ef902951a45cd2972d6a189b6e3af"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"6222d7f91a3c427eead8e810fb8fe14334493190c7c9d8998a8fb1b40a371e99"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"a6946823c6c407e03476f8ce0a52f43ec1df06afd5894711ac11d649ce2a339c"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"ffc601ea5b6d38c8b370d892eba9416322345a411a4f4724a4cc8e4ef40e0be1"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot-starter-test 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"097678c720069974edd03abfff56940948af385a33ae6fa2225036ed70ec1620"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"3fd6d0d7cb45164ad1637893c26ff33886328246657761402c6ea4c32f9a6170"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"338b6beda7f91a064cf2271ed8eee47d52c9bc957d3c1975c8434195fd5cacc5"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"d448967d8b590a57fe8ba6076fef582c2a7cba40dfbcfa7bc7b93304a95d83e8"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e567cae2a42e81f24cb1b9dd85b9ce8a0537af1741930d8b675fe0a3a42727b1"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"044a58328b48c0f803944660fdc05319b1b58de693c0a76a267b989feb2ed535"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1c30b1379df0ea079f6ce616e1742c116936fe4fb22f473542e05dccac5ad5fa"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"049bbafbe91276534096d7cb809b4575a6fd86b4a3e906c118aea9c858c0bf03"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9dc24ba425e2122a146592aab0d7614811e4d6f13c944adaaa53836e66786f5d"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"de23231ffb6c34e7d552a121fbd4ae8d35327dfffde8776935239d2f39932bbf"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5e2638816ff2d7d284330d7faf48a58a9fbd96529034b2d079e77610c7f64520"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"42f8069a09a5083a632bc18c3344afa432291a9154fc7b3a23f7a044433fdd32"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b7d270a108e060a7b2ad7df34a6dce766349950de2b10efd7fef9f80f6f88cae"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"eeef5ef641c67b472f5f5aa6078ee8c8aca001ccfc021466db44007cfdb10b78"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5dbb688c5c294b8f6555b0f6cc893886c7800c1a2a02c339b6850e9d8c692b45"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-xml 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"8e096f4538fd0999aa27f049c2aa080eee379a8eee126c2803f4cf00b8acf59b"}},{"message":{"text":"Guava is vulnerable to authorization bypass due to the use of an insecure temporary directory for certain file creation operations. A local attacker that has access to the default Java temporary directory could access files created by the `FileBackedOutputStream` class, even when they are not intended to be able to do so."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-2976 guava 18.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"d58c1641cb404251a44d7214dbd23777b24cc303eea6926e1c6bd93834cebccd"}},{"message":{"text":"Guava is vulnerable to creating temporary directories with insecure default permissions. A local attacker on the machine could learn the contents of sensitive temporary files."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-8908 guava 18.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"50a3954fda365b0c93828666cdddf557cabe6f3d7328d9b86cbbb2726dfd3562"}},{"message":{"text":"Servers that depend on the Guava libraries are vulnerable to denial-of-service (DoS) conditions because certain classes allocate memory without proper checks. Potential attackers can leverage this flaw to crash the software repeatedly rendering it unusable."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2018-10237 guava 18.0: com.google.guava","partialFingerprints":{"primaryLocationLineHash":"53f41e18d674818385be61c3e97ce91ae75e9e77e494b2af8f66b2ea9c1e438e"}},{"message":{"text":"Apache Groovy is vulnerable to privilege escalation and information exposure due to inappropriate use of an insecure JDK method. A local attacker could exploit this vulnerability by supplying a system with maliciously crafted input."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-17521 groovy 2.5.8: rest-assured 3.3.0: org.codehaus.groovy","partialFingerprints":{"primaryLocationLineHash":"590fae774177ceb4322e290f03ff2f1b9af21c06bf7c974b5e95cdfb339f5c8f"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"006755ca8102d72bf5b8f163c990c45929e3161f6ef51a7b8d13b06033db73ab"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5350ccbd711ea1a2e5054ac4b9ecdb2b394bb63a72d557c5ed57d98c2de534d0"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"533fbaa7b4f823449dd01d1e83d6330d5cb6e41a46b6625734cc918e4cad72eb"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e9b41e74572775e0f36b4509b83933100ffaa9a281f54834a50acb51299f8e57"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b8184d18677356c4c2ded24e32b509d6ddd82f4a6a748d01735171af7d9e2de2"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a640ce0065a3ae7616bcf0672c599cffcd57baaf01d2b3e62fa430775b5e56ce"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3c77a44587ea82834fb90f99430d04a64b3d65fe4fd360b8afa51e0a9e440f38"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"044b526e69279a60733e788b6b4fffb421a09f90c2f9b2cb3809818ecf292e70"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"33246f48a5cb85e4c7e15bdb55941b3f9d1c5e6998e61b3ae212557e898af6ea"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3922a2dda501ccdc45a99e0e4cb7c17ce6e2d08e2ccb2e28c89a3c7566e394c4"}},{"message":{"text":"Spring Security contains a flaw when dealing with OAuth2 access token empty scope list  responses. A remote attacker could leverage this to escalate their privileges under **all** the following conditions being met:\n\n* They act as the role of a Login Client (e.g. uses `http.oauth2Login()`).\n* They use one or more authorization rules with authorities mapped from authorized scopes (e.g. `anyRequest().hasAuthority(\"SCOPE_message.write\")`) in the client application.\n* An authorization server that responds with empty scopes list is registered (RFC 6749, Section 5.1).\n\n**Note:** The role of Resource Servers (`http.oauth2ResourceServer()`) and applications that do not map authorization rules from authorized scopes (eg. `anyRequest().hasAuthority(\"ROLE_USER\")`) cannot be exploited by this vulnerability."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-3109 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d2cb6a379da903f64649b4b0ec7d499a9609f6f645da4f8aea34b037e8d0adc4"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cb35b7690fd9ee6e6e2774eccfdc3d86fc70707943fc98ca490fd2c8735712a0"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"23724e3ee6091c3db3bebd9979fe22e07dc01e8039d8e82888642924c19bd914"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0ab0a5e1f779e9c388615cdfcb2790de442328cf6beaf7f37c8c4c17318a0bec"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a278a4bbaee2169c1a7294901ecec74490aff1c6bc943c351fcce8b36eb8e8d5"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"805b2f60dca4f0f016d0311812cc21fd57b88e6e36d962cbfd0e9a8f91f2c74c"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ebbc44b914426738c2b3d7205513e200b265a59d090e2e52651bdfaaa322c9ba"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e01ecd754ce01a7b0d88c94350121fc8e5d5dc0c8e8a367bd744e6a4f77c3e06"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9ef39a690a6f8858b36d82614144442b39f6ae397022f76e7653e3ec7a756dad"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3fe94312e93dd46b0a1c08e1a8dfb3b963ed28ecb7e02928a21c64d320a84806"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7f28ce7e822efa6c2fd5a0f0488b7d7a944aeb3f164e2f679d1d58cbd91ff702"}},{"message":{"text":"Spring Security is vulnerable to the bypassing of an authorization mechanism due to improperly implemented regular expression matching. A remote attacker could perform unauthorized actions on a vulnerable server by sending maliciously crafted requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22978 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b5de32a125315da332975f5beb6c0f4211629b2a7ba211cb34063a2f7a505abb"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"51821de4260f30bc83239ef94bfbf0da5f1ca0e75a2f00d315e59dd3b294e4be"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3844ca730147a5a6eaca3be91ab28089f1bb097c3b58eb646842910afd8a4325"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"38f42667ac344773fa6cd26da0b227ea40a2c0ae6b46102e4415c371cac3b9d6"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e1192dfe491fc38524c6361bd90c448f40a1fa9df1ee998cb717690a14bacf58"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cfa7970c958e8de89e12da9a8dc000e79ffc5e955d9125ea94180d4c219f6a1e"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4e34fc35280e84b1ee2454f39cba5c2056602a535953e160f8d6d79d2d35dbd7"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e701a389289f555075f3426507092e8591e34a9b8389a92dc4f545fb339c12bd"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"302a86f917e6cde15affc66f6339ccd87eb086b997a353016f8e41c7b7882754"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"39aeba2111a94daebd55b0745ee492c0d3140f526716743d3b3da69a4a93ac6a"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7770934254387e2112a010785780e3f93b9bf72a949469bf64eff8793cdf53bd"}},{"message":{"text":"Spring Security used with Spring WebFlux performs incorrect parsing when using `**` as a pattern in Spring Security configuration due to inconsistent pattern matching between the two components. This could lead to bypassing of security mechanisms configured by Spring Security."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2023-1825 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"62eb94af5ebf5b5a934e448481992e5d9904554e4320a13d11d3b2ca38f2a142"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"7464548f8dda005671d67b4d0165be18fea717631be48268aa54b38f35d5326a"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9af41dd223fa302de097e971062d660b6a585b0fedbe1bf75cdc18464c9e6973"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"282db97bb20e403b62040e890c312faba540a1c9576ba218794452937e5733d4"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b2334a2e9aad2628b2bd6fed588a227f381b3f7e5e7c8c75d627989ab482612d"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0d01cbd0e4a40f0a1907e53e4db8f03e3f72a595e30cff14a7a0193518abb285"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1418e0390d2b4681ec700dc1e465268e72f6342ed832b205d45430d32fe55fff"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"498e956c074203432008da2f73a082633952a88cec55d42cd2c7ce99e1b99032"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9436ca0846c61afda766dff656783d8f76b99b31ec6d0a0b320a299b0eac24c6"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9e022f88ead5f9850d3b2f0bbaf3793f3ebdc0c6eeadef903ad1c095c2194a57"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"105e8deeea724ca5eec64ffb3b9cf618825ee66c565314c0b0400528f4b91a7e"}},{"message":{"text":"Spring Security is vulnerable to authentication abuse due to the improper handling of SAML response validation. This could allow an attacker to inject arbitrary assertions into SAML responses."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5407 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"024f20e0aab8e57ca2388350e971e44fa5b9abba90f389f6456eff6486f8b4c2"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"861360ac5bae03d5158a2e0441a53b94dd59782a27bab7cf252fa96da8f761c3"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"098d92a37e01c0817b9b52b5b49e73be8b91f86142d926923bc16a8bd3a7b592"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"5484b2e18e882343646f5c09c77ed8cad1ee3ab1b4f27e357fdb2281f7a7b590"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2de00b7e88cac904fb53375046ebae0f7054079afc0d7081a579132b1af10748"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a7bffaa7b52ac7c118f85472cf3908813b1c4f3f3f6b5fc5ad3a6e1b10d9e57d"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"b341d900d4c6872fff6f7e9faee1f6fb558301e1e065e222085003990157a389"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"d9f136290a2789b8328ed5ddf5c1dfcb0583660a2f1886abfb204417d4494013"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9c9c9ea20945e3258ca8ff5bea4422c0106280b8a38a3f1286fb0175c5192fb4"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ec7a143cbf68787c34b0ef1c123af1af6b7ea66b8ab31578ef584f01a523d350"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4198b1625bb59093a38d9d8ba55dbbc7ca34b0cc861dbfa575a7e2efec202eea"}},{"message":{"text":"Spring Security is vulnerable to information exposure due to an insecure cryptographic mechanism in the queryable text encryptor. This could be leveraged by an attacker to derive sensitive information from encrypted text using dictionary attacks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5408 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"8c8967d69717c6faaeaba95f61dfa022f7620af3e57a8b77802a10cb4380f7cc"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"482b5c36325af267f6ff2688917a6d6d72275a904fd003feb6600445f0707833"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9ad93ea64c7bd87f6cb3f9ccf5555794468712209043149b18fd290d74963fa8"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9fa8842b2802a2dc04997e34f4cc1504658daf60a2427ec0df9cea0460491910"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a6f1a2f31c0601487fafadfb2603e8a100f5ddc55606e7a0953afc216087776e"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4e71eaf46183e47ee5e4b1531ced549d0cc103a24c02f7be0c85d383312a907c"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"871acf9b1bc1a6c79c1af4bc67bad26a983433b5819505554a4fea0b6c2adbaf"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"48a702e0cefcc1ff59f6412874107afb0ea45af39f4a84566e9741985c697543"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cd8b9c94be2bea6fcb7de2c42a3a3557b5ab730657f3e33aaf81ebc0b6247ab4"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"0bcfe96a3899060c194c5ac8776716a0cd43ef95bf4500d13c3f3ee2b0021ff0"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4ad791d1dbf8c3e7b9e932e558a71f00e261b306cf78f26662e6553dd2ddb28d"}},{"message":{"text":"Spring Security contains an uncontrolled resource consumption vulnerability. Attackers could exploit this to create an `OutOfMemory` error and exhaust  system resources, triggering a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22119 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2bb9ea92e4d7f79eed9ae2de2c2cdda03cba521e684ea831ca9fe8efe1bde8b3"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"06e9bf592b30c4b636c5a3d93606d93c6954d19c21011bd1924a39f0a4d6b680"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4f19e261612ed6cc0792de7639c5713c48dda12789db2e49fbeff56bb61d3b64"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2769a480916623afcc1f4fbec10bb9d43651414d81763a900ae884c1af4332d4"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"2cd6cf9fbaa6a854038fe2de3a7e40d61a2b80ca33be18030b14020f462a67bd"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ee514b05655494d61c4105f633ce71c68bd223105f399f1ba0a3edd09288b0d5"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f57384426e1bddff77e2f74e9c7873a26ec88cf04f8768935e1f24d3969c6dcf"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"74da41590881a6e2b34c9f210171336f9e3005a6dedb4c08ebf13a48cea946f8"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a5b020d8d95b2598250a3bdba11f3cbbb3eadd757448eaf538cd597764163553"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"e4fc66e110852a880dac2a22cd565ba0bd52702854637e7b7507d02eb1ea8e15"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f7ffaddb011cf5c03ea903638aa11801e53a30072874e496914f5270664f4610"}},{"message":{"text":"Spring Security is vulnerable to the weakening of bcrypt-generated password hashes due to an integer overflow. An attacker that is able to obtain weak password hashes that have been produced by a vulnerable application could potentially retrieve the plaintext password. It should be noted that the `BCryptPasswordEncoder` class must have been configured to use the maximum work factor (31) in order for the vulnerability to manifest. This is a non-default value."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22976 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"a1f4c0f4082d127e348a592ea1849666823ef3b5b0a556ad2f3b53868c95da1a"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"c087afc4bdc087cda379ef4fa616e321e61731f12327eda5d8ddbee7c0063a5d"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"4652025a1f2b28633e9192a49c0ebadb1581548af708451e148636cea95d0b5e"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"3a04236c1730ed4abc53f18a1625678e86eba20556cc240681a8808ac89aadfb"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"1de7ef0edf6a2cdc2541d00bac06deff7f17a065e625f2bf6b6d6138ac59b425"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"43f2ac32c6c74e1fffe0abdca0f14c0bf3bc4f77cd6a7918f4969530c31db9cc"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cf6f56021e217a30633575fd5a5ac578e55a59ef13a5e72eea9715ba08ae3867"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"06d2a114b7f628d69db9ffabb0835c25fc1e07fd38aa09f63ac0de6e82a6d27c"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"9e1f4f93cbdfd048fd96308a58ec2ce950028a38879a783e7756ec45573ab1ec"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"cd797b055ff703cf8013bd23d9c1c41cedc3a094a11291177b226e1bbf1b4882"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"ca7fa6c4c9da1a330ba20ed0e573fae6274dd13feaeb84f520e914e5b82a5348"}},{"message":{"text":"Spring Security is vulnerable to privilege escalation due to a failure to correctly save security context information. An attacker who is allowed to use elevated privileges in a small portion of a program could extend those privileges to the entire program by sending maliciously crafted requests to the application.\n\nIt should be noted that the vulnerability is not present by default, and must be programmed in by an application developer."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22112 spring-security-core 5.2.1.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework.security","partialFingerprints":{"primaryLocationLineHash":"f1d2401daf107244a5bdc69a79282bbae18822b288fd31ef6acd800445bb4fa1"}},{"message":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if certain HTML is passed to Document Object Model (DOM) manipulation methods. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-11023 jquery 3.2.1: org.webjars","partialFingerprints":{"primaryLocationLineHash":"b290fba0e424f9dfbbe42d1a527d61592e2620341bf3b8ee7a444c7cc5c865ee"}},{"message":{"text":"jQuery is vulnerable to cross-site scripting (XSS) due to a flaw present in Document Object Model (DOM) manipulation methods.\n\nAn attacker could craft HTML content that when viewed by a victim user could allow for the execution of arbitrary scripts. Such scripts could be used to steal tokens or tamper with the rendering of the web content.\n\n**Note**: This reported issue appears to be a duplicate of **CVE-2020-11023** (**BDSA-2020-0964**)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-23064 jquery 3.2.1: org.webjars","partialFingerprints":{"primaryLocationLineHash":"8830bbe4eeb9c051b4de29bbc8c72460758a40f6225c6a8e9885d1aff4b91fcc"}},{"message":{"text":"It was discovered that jQuery could allow for cross-site scripting (XSS) vulnerabilities to be introduced if `jQuery.htmlPrefilter` method is used. Attackers could exploit XSS vulnerabilities to execute JavaScript code in a target's browser by tricking them into accessing the vulnerable page. This would allow an attacker to steal an administrator's session tokens or execute arbitrary code on their behalf by sending the link to an unsuspecting user or waiting for them to discover it."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2020-11022 jquery 3.2.1: org.webjars","partialFingerprints":{"primaryLocationLineHash":"5760f17f061ceabcccb0e59355ecd1d813495c92be001b0727a7f7e1a5331ce8"}},{"message":{"text":"An improper input validation vulnerability has been discovered in JQuery. An attacker could exploit this vulnerability to execute cross-site scripting (XSS) attacks, trigger a denial-of-service (DoS) condition, or gain unauthorized access to the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"CVE-2019-11358 jquery 3.2.1: org.webjars","partialFingerprints":{"primaryLocationLineHash":"2eeaec3d7c7222ca3eb7ed4739f0fbefac5110efe2cb521febad521196e8a371"}},{"message":{"text":"jQuery contains commented references to the hijacked domain `blindsignals`, within the source/non-minified versions of the files `src/queue/delay.js` and `test/data/jquery-1.9.1.js` (the former referring to a Web Archive version of the original site). References to this domain are not present in the minified files.\n\nUsers viewing the jQuery source code may attempt to follow links to the hijacked site without awareness of the domain's current status. This could expose them to attacks such as phishing, where they are tricked into supplying credentials or downloading malicious software. Users are not at risk if they do not manually follow links to the `blindsignals` domain."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":83}}}],"ruleId":"BDSA-2021-3651 jquery 3.2.1: org.webjars","partialFingerprints":{"primaryLocationLineHash":"861841fc51aeb97e31896d54a54c8cc770ad6ca59570e513880770030f6382f5"}},{"message":{"text":"Apache Log4j, as used in many popular services, is vulnerable to improperly allowing lightweight directory access protocol (LDAP) access via Java naming and directory interface (JNDI). A remote attacker able to supply the end application with specially crafted input that is then processed by the Log4j subcomponent could cause the execution of arbitrary Java code.\n\n**Note** \n\n- log4j-api packages by themselves do not contain the vulnerable functionality and are therefore unaffected. log4j-core packages and the upstream overarching source repository are affected.\n\n- A previously suggested mitigation of setting environment variable `LOG4J_FORMAT_MSG_NO_LOOKUPS=true` is not recommended. This mitigation has been proven inadequate against this vulnerability. \n\n- This vulnerability is partially fixed in [**2.15.0-rc2**](https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0-rc2) by [this](https://github.com/apache/logging-log4j2/commit/001aaada7dab82c3c09cde5f8e14245dc9d8b454) commit and [this](https://github.com/apache/logging-log4j2/commit/bac0d8a35c7e354a0d3f706569116dff6c6bd658) commit. These fixes were deemed incomplete. See BDSA-2021-3779 (CVE-2021-45046) for more details.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3731 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"7332ce772a13b891299c81f3a3d62456b3ed8ed2e1887ad859cd66c228c80a53"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"2aa9f7c8293912d9a0daf6f4ca8b1642c337a3d266edea6a0197cf4574407bc4"}},{"message":{"text":"Spring framework contains a security bypass vulnerability when `/**` is used as a pattern in Spring Security configuration with the `/cloudfoundryapplication/**` component. The potential for security bypass exists due to the mismatch in pattern matching between Spring Security and Cloud Foundry.\n\n**Note**: The vendor has stated in their [advisory](https://spring.io/security/cve-2023-20873) that this application is not vulnerable if any of the following is true:\n* The application is not deployed to Cloud Foundry.\n* You have disabled Cloud Foundry actuator endpoints with `management.cloudfoundry.enabled` set to `false`.\n* Your application does not have handler mappings that can handle requests to `/cloudfoundryapplication/**`."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20873 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"0edab932773168e78d931abe6cbe8c47e9f8d0d27f6c9edb22783ad87301d8a9"}},{"message":{"text":"Apache Log4j contains a remote code execution (RCE) vulnerability. This allows an attacker that has permissions to modify the logging configuration files to input a malicious JDBC Appender with a data source referencing a JDNI URI. This can then lead to RCE.\n\n**Note:** This vulnerability impacts log4j-core."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3887 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"83bec7e15355b21f146db22f94a2dba8ca03d27810420f7d77e800582799b16a"}},{"message":{"text":"Apache log4j is vulnerable to a denial-of-service (DoS) when uncontrolled recursion occurs through a self-referencing lookup.  An attacker can trigger a DoS with malicious input data that generates a recursive lookup  and consequent application crash.\n\nSuccessful attacks require the attacker to have access to Thread Context Map (MDC) input, and for log4j configured with non-default pattern layout with a Context Lookup.\n\nOnly the log4j-core JAR file is impacted by this vulnerability. Applications using only the log4j-api JAR file without the log4j-core JAR file are not impacted.\n\nApache Log4j is the only Logging Services subproject affected by this vulnerability. Other projects like Log4net  are not impacted."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3817 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"fc36bc2937bbc69184ab00321f8e6e71a834ce1911f50c798137eb8969b49b7d"}},{"message":{"text":"Spring Boot is vulnerable to denial-of-service (DoS) via the welcome page when used to serve an application behind a reverse proxy cache. This will cause users to continuously be served a 404 response, preventing standard application use.\n\n\n**Note:** Spring have provided the following guidance for vulnerable criteria. \nAn application is vulnerable if all of the following are true:\n\n- \"The application has Spring MVC auto-configuration enabled. This is the case by default if Spring MVC is on the classpath.\"\n- \"The application makes use of Spring Boot's welcome page support, either static or templated.\"\n- \"Your application is deployed behind a proxy which caches 404 responses.\"\n\nThe application is not vulnerable if any of the following are true:\n\n- \"Spring MVC auto-configuration is disabled. This is true if `WebMvcAutoConfiguration` is explicitly excluded, if Spring MVC is not on the classpath, or if `spring.main.web-application-type` is set to a value other than `SERVLET`.\"\n- \"The application does not use Spring Boot's welcome page support.\"\n- \"You do not have a proxy which caches 404 responses.\""},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20883 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"cedcc943252ed696a9aa42d7ba94897b0c2289d790633e08ccee98170b959d64"}},{"message":{"text":"Spring Boot is vulnerable to privilege escalation due to a race condition which occurs during the creation of a temporary directory. A local attacker could create their own temporary directory by racing against Spring Boot and supply their own configuration files which would allow for the full takeover of the application."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-27772 spring-boot 2.2.2.RELEASE: spring-boot-devtools 2.2.2.RELEASE: org.springframework.boot","partialFingerprints":{"primaryLocationLineHash":"79936100fb9191c2f5a55aaa580d2703c4aa877dec689daccd30209ca36cac16"}},{"message":{"text":"A stored cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts in the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2018-20677 bootstrap 3.3.7: org.webjars","partialFingerprints":{"primaryLocationLineHash":"8c5370c13e0ea442c0359fd88ca2c74dbb39d08d39ea7f9d33567e7daeb2ed86"}},{"message":{"text":"A reflected cross-site scripting (XSS) vulnerability has been discovered in Bootstrap. An attacker could exploit this vulnerability by distributing  a crafted link that executes malicious scripts on the victims browser."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2018-20676 bootstrap 3.3.7: org.webjars","partialFingerprints":{"primaryLocationLineHash":"bd063031401ce6400b14de5a06304ac015b26ce34c67736b7512ccc520ee5fe2"}},{"message":{"text":"Bootstrap is vulnerable to cross-site scripting (XSS) due to the insufficient sanitization of user-provided input. An attacker could execute malicious scripts within a victim's browser by tricking them into clicking on a crafted link. This could allow the attacker to obtain sensitive information such as browser cookies."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2016-10735 bootstrap 3.3.7: org.webjars","partialFingerprints":{"primaryLocationLineHash":"4bfaa463c0189b313462b07d13a94a484db3e61e408122e00eefc38cf28db3ba"}},{"message":{"text":"bootstrap is vulnerable to cross-site scripting (XSS) due to an absence of sanitation in the `data-template`, `data-content` and `data-title` properties for tooltips and popovers plugin content."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webwolf/pom.xml"},"region":{"startLine":78}}}],"ruleId":"CVE-2019-8331 bootstrap 3.3.7: org.webjars","partialFingerprints":{"primaryLocationLineHash":"9195693879b3d748e54bcf38eb2ca64e72c2a591723d3da6f25a0f87e7274f1a"}},{"message":{"text":"logback does not verify the SSL hostname as part of the certificate verification process. A remote attacker could leverage this to perform man-in-the-middle (MitM) attacks against applications using logback."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-3401 logback-core 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","partialFingerprints":{"primaryLocationLineHash":"34c4e317b8937560f18c276238b39b7537be45b7e4f31793e4f1355af2957c4b"}},{"message":{"text":"Logback is vulnerable to remote code execution (RCE) due to missing restrictions on JNDI locations provided in the configuration file. An attacker with an access to `logback.xml` configuration file could provide a JNDI location that would load and execute malicious code from an LDAP server.\n\n**Note:** In addition to high privileges required to access `logback.xml`, successful exploitation requires reloading poisoned configuration data. This can be achieved by an application restart or `scan=\"true\"` set prior to the attack."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-42550 logback-core 1.2.3: spring-boot-starter-test 2.2.2.RELEASE: ch.qos.logback","partialFingerprints":{"primaryLocationLineHash":"ac9391d2c2cd460fb59e762e761997bbcf5ea818e78d204dd27054a29ba5d24f"}},{"message":{"text":"Apache ant is vulnerable to an arbitrary file write vulnerability via a directory traversal. An attacker could exploit this vulnerability by supplying the component with a maliciously crafted archive that, when unpacked, would cause an arbitrary file to be written to the file system."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2018-1836 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"eaa3abdab96abcb939688a8685d9e1626f240c1e1c8ada33fa49d56b19a1314c"}},{"message":{"text":"Apache Common Compress and Apache Ant are vulnerable to denial-of-service (DoS) conditions due to the potential worst-case performance of the `bzip2` compressing streams.\n\nAn attacker could supply a crafted input to the Common Compress or Ant `bzip2` tasks to cause a substantial amount of processing time to be used up processing the task."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2012-0078 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"a498f1254139cdf1e6e4cc401095b82b379ba3c75d115c818cfd29e90c13b52e"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `TAR` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition.\n\n**Note:** Per the Vendor, \"Versions prior to 1.9.0 are not affected when reading tar archives.\"."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-2083 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"1522e17ce388f272720277184b48b3076f5b9eafbf4ee35200a50331ec0cf2a8"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-1945 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"e1e13d44ab9cce1dd98c83635110ec8ca60355f09a90af3a710606fe6617ec97"}},{"message":{"text":"Apache Ant is vulnerable to an out of memory error via a crafted `ZIP` archive. An attacker could exploit this in order to cause as denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2021-2085 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"0bd8e6df94323251df3dd1241f60e78216d7e4255368a971b754072308b863ee"}},{"message":{"text":"Apache Ant is vulnerable to information disclosure due to the usage of a default temporary directory for several tasks. Some tasks may also allow the integrity of a build to be damaged."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2020-2577 ant-launcher 1.6.2: ant","partialFingerprints":{"primaryLocationLineHash":"70c20430590c62220b2751346f0a3cdfb4ae8678993f83aacf3e6fc1283e5a96"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8b3b4fb94051f515878b87796f751327a6634f81fd6a82f2e1b9d7e88dc3e6da"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a8fbcdde605f861c38b95b5f7346f5d9a037c2eb86453877f30edafe7e3b57ae"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"706d91ccf5a9e4e9cbe4ea68e17fca001872a919bac356d6158b8bfe10f69ead"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5e29882afd2bbb729e672fe6095856cc207f9a37a55ecadb28d3b041bf802279"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0fc4e26e5d552adb96711432ff11839713a9cf57ccf34e885b9b2174df85d139"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0e9e9a10f76578b9e70c7a0a91b5a43b229c96ddf5e3adf7c9a7e161cb64db29"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5c6397ce5f5fbfc1cf07c983a66dfa83ee3ce82eafa20849b8afe68ffeb55ffb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3239d702b68f2181f7d17ff6680a1c3d56e9771067df8d7dbda122709af0a764"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"789323e8e667d01c4df33831fe95507af7b7aa6ffb3ff4467dcc4f34b4d6ded4"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b39b2562227a7c6505557541f67b2eea910b21f5c322474739ecc7c7376e53d4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"da78c4d34262098136f252bca64137b28d0955311951a2a5134bf61a44fd65c0"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"66c118f86751c6e16169ed805e87ae94c34456adadb8125052d50ac44f17ce38"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4b7aa0f3b7c52e3c8f1a02f278d22958037bc88acc8bc7e376768e547f13c716"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-jdbc 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4d727a19e894312a019714ede4752bffff8ee41866d6d1419f2bda0aeecbfcea"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6621d478560307171ec35b7fee646e8141e00a8790228d37217cca940466b7c2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8e01b1a27bb7f856523591c42c7dc1a4562dc504a6b393133c4d8dfc67311913"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"76a2f0a28c7f470368a349e85b35aec95e1fbc422e0a3fca3d6d1847993e28da"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9d6f85b8c5ea14d6723b50b82e72442cfd471e3d8e81846c90526f839bddb4f9"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"23474d964733a98ab8c1dbfc1f071698da3f9827ba953322902dfc2795944d55"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"354ecd4b5b07c8faf07bca8a1473cf4aa83decc8e05f402167c62b3c8b9f8eb1"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bb7b184bfb5ede303ded16ee6648d683f0c8bb4f45bd5b83d444cbc0bed8f76c"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"75584808251a762303d48fa102e495022d4745a223a01568a19603c8545ae985"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a7c5a288037fcef137ae518383bd8554d8969e08dc5124bb71fb8de5993997d2"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"788eb1c9da90143140b3e7cc9c2e705f13c0c2ed971f3f7797e8fac858bcaa94"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22965 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a0139d47fcf2d91e739f276d96c0062d25039388c425947fd304d6a3fe24e870"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"055443fb191f522d39ea5caee0c09d9e2ce0e7811892fdc797ce567f11dc960d"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"af321fc34aaeca197a40886907ec235dce987ef6fbef511d2b37170db66ff924"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f3d868c77368a2bc3028c3f96c9c72bdf6b749b41bd30eb813d26960c3ccca7e"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fb82d29ba33fad356c25395f85f3503fe44ad2bb7fb10d7c2d5b32786fa15f71"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6738df55634fb64969571b18c65b996fdd410dc70aaa1e94d8ac661b5d907bbe"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e7d34bc61fb896e73ad4b17d837bf6967955286ceabf8ffec749ea84c2c2b4cf"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5b527192a0e97bfec2d2a8e0cef7e0c57f14adad0f4cd695320922a3fde2271c"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e862c8c40c3849e1d2194d7df38093ea261bc06a8862266310203511d8514871"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a884b629774b3211c36fd89b9a1b5c2836a85cdaea5a8548d0f2877f98600138"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cb20c76bad96967c230b0fce8d78b249fa32b2f5ce9cb0cfc9d6d88f78882db6"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5398 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"22eeb3c5a8df6604d2aaab0f8478f4be99f8b2dfd89ed117461e40e09cd9cf4e"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"70f13c86f0f73aee063d893c93a60b1eb18e26eed93aefbc13187e4b724c2959"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"526fec7fc71ffd9e79e5f257eac8666067e7c0de409f471b44df2c8a579a6843"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"920745374a1e19907d3971186550f8167996b74ae7fa8dfe6b6ab260e3709471"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e9f3cd7913d860f0a41cdc0cbc88291e11027f8ab9b502e14b6ace3fb2a3424a"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b6ac2f4acebf6d4770a0f7b2e3925fc3a203e26c3e0bdc2a47f7921eef4c132d"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dee0fe843fe69b672f3a891880df8af9bf4b03631843bfcf2f7c7270f004f7a8"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7139d13874f21228e70928ee1d39f5ec1be62b7c1c562af05815a283ce4f3b7b"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4c905b619d0855e09f01b6cbffff135356049f00baed149af429a4d09bb5c64a"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"27dea963105ea899a862c5d0523fb907733a718673432e617023f45c060f5041"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f186c6278e78bac69d45363fdb996feaf5df7faef18871805cf9995f778c2f2a"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5397 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b99541ffe3e3210c936d88c9b08e321eb404bed609b181227fe334a9a2008df1"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a192eb2513ba2787eda240bbd24e6d390e56b082752e5fb8778ba62a45f17fb7"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9b7b14981ae28fda6a4351bedde542888f3fc1647f04283af571b2f2ab7c221e"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4a4cd0f87d0f6e52307cf19f15ff6a0056d6ab4394b2784df9456db360e8c7e9"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4db45b8d0b629071811bc8a0d964a52a0f53395067c84629ac5aaa1429092c72"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9f6bfbe676d06bddf3ded92de1de735891b4513dd43556cf7ce853f90a75b830"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"96a5640d33bef28a15759c9751cd2b3738a16e245f66c05bc7cb53fbcdaf5bb9"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"80d2e21712515da0fca1608bbac0af9e52bb4126d6099e3354281656a6e14bed"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d48248051b521355c6bc3fa021dabc3963f31fb2371e7153cba02b9dbb7d2a0b"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ac9e80b77cbffb2e04aa52e4ca40b02c78484c39d311a09f48d81c2b50d31227"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"eaebb885b02cf2b1e9351ebb7d511ebdccb72423268703bbb8f68662bfd9383f"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"BDSA-2022-0847 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f592d2bcdc2177fe796c17cd12699242aee906ad8ad72439eb1446f749813d41"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ae7b69662eb645dbbcf685272ef9ad63e61180c19cf66f7f657e3c9116172b65"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"30b877817e83911b1012e1f810c09e5798f3644d8226071387674fce31a16311"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a28919f2dfab0c41a5e705ea8737e1cb77eb806f90e0fab79a21f720f0d6e038"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fd8e0cf889cd7babfd501d92241d900a22d574774710f6ce8a54a2f1b71fb09b"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f47e787e5307b7044a3c017eab98594e3875f0412a9afc978982d2ebca309eaf"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"51197f1a63b36f2985dc6c58750dfe5013c7ba0d0aa176c28d9c4ab56753c74b"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a85c7e057fe3806387e4edd68f59e458551fefdac8298b8c4a4e6cbd5f8fb758"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"18ce8a36c60af6ea83fc8b9d40563e1d2e4a391d5ee55631594666aff17ff60b"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2e9133b861bc5f333a5f0b6387a37c0488960756a3e839122b20ce12466e0994"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"667a559d8c2871e8313f4c32b258a338e7ae72f24427bf223c396a9881f528f9"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22950 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3c10558f68778120f471df5c4ddb1b6834d6ed6e28c90b33e987da78cadc80f5"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bc155b959e3b19ad5c3252718cd82b8a3ca349047f10e74cfaac79099eb2742e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"074345f37d6b5137844097b09c9981c2214ba3923447169a1b3424f75b6d4f4e"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cad41532e70ed9233be9417c2122dc88f32f893900d45bb13eef1e29c2895bd1"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"31ff431d1a21ef8069db281d5479910ba5271df535927dc4c22d78965b70428c"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"499ba42012398ead5105cd01ffe24d929dd94fc70ec4458f6e909fe54c3f0e71"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"921ee8b81ac1a8137a0879a6b26ce0a1e97a32914f2b4a508ebe0228d24ea210"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a4dcaf03cc7f61885bcad8c94bb9c250d05e64a4126701daa31c45657c4db612"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9a7550ca2ea75b75629890382df47215be980c4cfd95334748e1e450801111e3"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"11226b877fe2117c10eaaaaaf4e42fb7cb817f1addb0513bcba9d8a381f13477"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"14cf7ca35c29d06153dbbb8b2519d00acc123c53b14f0023ccd9bfc6f4787773"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22118 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"70a5b80637b9598214e5d7fad6503bd1e9ac9c2a1f23de96527a08a7558ed345"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b7078995b06abef0b9092ed681c233bd120601faaf1dcce312c9436119da24e5"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9b2abbc41bd68d6ebb5748df25517525b7b471c61fb94be5476d56ac8c876d88"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8422e2583e05a4b0fd342e0c2aa39e14ef70ef1ec5b91844269189009253b087"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ade6c78be31c73ea4ecdfecaf8bd9982999985d284536075de9bf2cd025a25e2"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"28b280afa3b9c835663e73afe42591fbc1f1be276084c50175b0af859abcf963"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3206e61db22b3c4231e39459846a38fe3def3a1c319be5566c4a7fd0b3c2e76f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"df04b60beb44c45006b852e61ec089b8571c14aab8c135b65784793b154c8d92"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"06e5b4dcbc969b8b48525cff80ca9deccb5cc4df8c83e02da4308d3021548d26"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"73447ee21d75a31fa11a0a104409f2b35d96fec4717d90eecdde8dda82488823"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f2bc80ebe7b7db882ef5459c7d87f9f36ba9ee9135d0985b0f394f30f9cf6e17"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22096 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"961615801a5f8508c7aa9bf4ee8abf90867be6ef56dc19fe58ce65a25192e5d6"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5245188aec65845494f4775eb66032bf5af34784dbb25293cc6002ed48c9d4f3"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cfa356324e9327c00e17e49375eb586ca90cd94513ade124329ccad5beb3eae6"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"473669c8c97514c038e11d630ba549a454164a4586837f3556568cf0dda19a91"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"859165dd5ef4f03ba106bd20a53a5905c6fc4d88c74b8f48daf1b84d9302d5e4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7f6c38a3924de5c27267080f2d795e0a49dac4ff3a9b2c2df0a0a2d0772bb6f8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f519f5bdec2d68cf727dbe4bd4d2b0a904900d22c46548b527a8a23bbc9134c8"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"cc0e0e0e657a5c29cb1e901554dcda5a9427760d520213eaf8fa760ca9d7411e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"47f5850fe1b5ce46ef3bf895817967a4af0a4c1d65e21c382675a2aad034f2f0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d64369e21ad2a2c1e5ad9f0c3af6663e0195a0fa407cf312460a7e3839418751"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90b7234744750961681635fe685172090c63a51279710702b1756d0e81170a38"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22971 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"de570c2873d600d4b407ef4352370920429c871f924516501c18f7a7a9b5fd37"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3ae4e40797091bf951533037ae9d02f95712ffe8f8cfdc0de6fdf25a6e75e641"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7ec5ffb2fed2aa551f23e92d1f86b8b011b751b18735558188793450b7eb5cb9"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"b14099e694716ec2a0c02fec77c8cba64000bfc7e6d1714e31b67064be8b1ed0"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"23fb3f1c5befc14b1f079e5982755b419d58ce3cbb616c79e54449c91c8584a1"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6b12e17a3ef871cde3d8d6644e3bcdc1c74ddbf4bac2a5935e2cbdd0723e414c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"5b287d47e82a73609a1ac3cd1479736db672883d578d1eb53a0ccc957531bf5f"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bef3c0c5cf3206612c6bf7b883fe53e6474e68dd8db03e40cbf32e840c8680ac"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"df9c680a1244e71323d8721e48f58b0030171fa82e5cd8e567ab25a22f888add"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"10b7f3749a1d77a4b98a73f93ccd5f817c95a9a4e43885c9f6f32527ddfbe251"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"bd8420559d291bde89bd1b3dad692b17c1ba643d630812a16b1d560a32ec594e"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20863 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2fe9b70f016bdd2832ccbc5cb27eb047df8f2ebcac8bbba2d2cc07aa7516eaf7"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d19e18a9d7210e4fe4da9e2f01142dee9bb218e6f85a1a5f1e00239210bb703d"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4a3001bf312cbfea9431787d2279bedf7b1f0f94707a85c8326abf8d2373e376"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3f6a27a8e0777fa856884c036374e519380dd0531961eaf6da228e3b799d0f21"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"668f824e701476dbeb117459ed4804b8a6deb54052657c33be005cfcec2f95e6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ba08eeed7d04ee551c6748264acd320729b9aee6d017b085ad27dd510591d0ba"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a33db6973af3020d01b458e4b622dccaa7e939817f2a2e0c5765e2c051b83401"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"dad2ff2b492c9b0f22a27cbc971c59d60b4a65ae633f0ea34abf744480233013"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"37f730405eb9fc30bcabc95531284bd3858f2ac87d52a31e8cab90f85fb6665f"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"53d825553973b1ca2d3d774815b5b25729599f14c3397577f9ada268805880e6"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8cab3c2e764d35a22ef8e3f51b51d670e01ffe14ad61759d3c6c1bb80b7bc96b"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2021-22060 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"49b89b8b329db509ad55b8a4b6ef8d437b841cab33dfd3031f14788028af91cc"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1ed62bc85c030db7c18528865a98124b8ffcc44f36441f4c55f97e3317562a8c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1f41f9afcb7887636dec6ad79e384c9665cd1c2944a381dbfc1bf8177c0479d5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"531fe6b518476f4367ff9d96c8bdc19217cc2c41c8fc249e69af00dc8a04f9ca"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"3e8e59780388c607b89882c438d733e8f542ac9d8606bdcccb8ce462f590e5cb"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4b6ad1e0b72d6e91c39c0f9a5ce3387b4443dafc4d7bfba0f475099f048c5ec5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0a995f4a6ad91a7767bc5109f08d79ce682359176f50f71b27c2e525fb68ac2b"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"c3a1fc2619ba689a737e5cd5848ac4a5d840a6dae43fd2a4afae44a793f30a71"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"92502eb7c9c9d3b97875d9cc54d66af7f5e15e0214646c1262b45086a2cfeeb4"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ab88e9dd8e7ae778de13f22ca5129c922f90aec678d44aca13a30223450480f1"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e10d6972c4688fd0fdcc49fa3a015d6b9854ecf8dd1f187e620478f84c5fdc40"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2023-20861 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"1493393c32715b9830054b443a9178f62074b2e15b55557ed6f1aacbe1e617e4"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"2c8aace62b286ccb230e5e571bcd069189f486cd742d5439d7927240ecf91034"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d0f8efdf9fe93f60a13ad9a52da57954cfbce35fac2d0ebfa2cea8e0d0ba8075"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9eb833f3ecab02270b6d888a1fdf734915ff2ea487a5688bbe31b5cc45283f8f"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0644eaa88777e8d8098491f909d3845b90a65c579b4a15b5f955cfe6a8d169e7"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"866ecd5f5be8d7a02be0c63873dfae58df067f9a1a1b74d6b2a479134c79c398"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"68cd730338adc0ea3a7455a6d50a7ff9c645986bb08306001d48dd4579af7e66"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"112db722f9603dd41e026ebcd39f7180177043358ca3b234729b199b05fd4491"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90957f3f07668e04a798e0f4cf7183853d9452bed5fedf6ee7a366879e986115"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f0c6d5edfa9e5845e3680ba15b0e0c1a41f944f99be4bc605310e307b8fabcaf"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7e384e75223bdded55bbe14c3e82e22e2cb2ba01272345d457d6d9ff9ab9d259"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2020-5421 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d2b3d8171fc84afae979aa100c4940cc3558e56322f658189fd7e6dde8958c8c"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"8e592fa707c972e4d45aacb467c0636630349ebb09a114c0df6460755bf46719"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fabd66e9f14b6069f6e8de9ee901ed91a93598ba3b0226eef83c3e7e2f11c41a"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"156c927403a453236b5e36ae32819b1baead5a22d6c565a023abcb27d84a8c78"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ae0b211ad1c089f6c313758fb5f15de2eca62c6c22e42bb53c20536bb5688455"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"91233f14e17a0558048adddac55dbf2cee746ba2f4b1ece957846f5d88342132"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"62dcec9b0224b0ad79944a1cd71e1c61063836351bcf49a2b2bfe38783a60983"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"56620504d61b2d69424447d20fca1db041efb59193c1a1edfae04d88dd8bc7f1"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7d55ac2b956cafacc189a03e7151dd66af49f6e71cc0e2363ee89ab9112c2447"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"90ed06c94ff3bae1805ab0edfcb655667f2a190baf44bc0f9146b955c19b20e2"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a9fecf5c61c8cb2db57dc468157d0de7293992330e13a29d6090253704b25775"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22970 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e1428ee5b61ff80a79f8ca2ba2d873fbf986713ebf5a625fe6b910a50d685b0e"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-container/pom.xml"},"region":{"startLine":116}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ca95a41d04191396013f6307d55f682714751f345efdd7a95785db9863f75dea"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/jwt/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"176a306bbcfc5013ffccd26e8454596148acc35bfa303ed1df53c64936379886"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/ssrf/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f84dfbb042c9ebc8b9859a9c256085dadc79135e951f6e74bfd1e37271189ac7"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-login/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"7562101ac13e63dc88097ed02f25a303f9798c33fcc9458c3d79ef59d4bf6554"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/pom.xml"},"region":{"startLine":81}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"fd63ef65493738e8e47cf6eb85ef853e8b20c4c7860e3ce906af73d6291bdcca"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/insecure-deserialization/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a8a04fb29b2870153dd587f496e556fff89c479b9b513f8a484e0a62c154687d"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/password-reset/pom.xml"},"region":{"startLine":16}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6d3a43883f828fec686606e6f3fe42dafb54fb705eeb6f2f947880857eb9e0c9"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/command-injection/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"45105a6bd7c0dafcc072cbc66a35551d98343d0c3f332b8cc17c58546c8eafb1"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/challenge/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f2f6cd514d06d960959f98c033d8a8188513b4f14c94cee2ed1c13a0829ab674"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/http-proxies/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"f2239b2e023005285c0102b5ed7218a28cf6c6af0161621c0c9516138bdae3bb"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/html-tampering/pom.xml"},"region":{"startLine":21}}}],"ruleId":"CVE-2022-22968 spring-core 5.2.2.RELEASE: spring-security-test 4.1.3.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e078a094cd3abb4a9eeb093761481f3d654ee4479c537a8df20609b6c39b19e2"}},{"message":{"text":"thymeleaf-spring is vulnerable to template injection. This can lead to remote code execution (RCE) through double evaluation of certain parameters.\n\n**Note** the vendor states:\n\u003e Just in order to reduce anxiety around this issue, I'd like to explain that CVE-2021-43466 only affects those applications that contain controllers or controller configurations that take a request parameter and directly use it, without previous filtering, as the name of the view to be rendered — which is something IMHO no one should be doing, as it is a bit like voluntarily providing a way for code injection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-43466 thymeleaf-spring5 3.0.11.RELEASE: spring-boot-starter-thymeleaf 2.2.2.RELEASE: org.thymeleaf","partialFingerprints":{"primaryLocationLineHash":"9c304719281f169a587ce56e5ff9e50174253bdc16c1033ed60754dbf9f1efc1"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"fb6e88e95935093aead0a8dc0c6c3537eb2afd7e2e6556d622a20663b9e6c0fe"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"2f2c014efbd153245d0469257cea29de764c524954a231fe5920a5220bb4a546"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"4b95e64267d338af062d2e44607cc981213feb2cb73b17abf5fde91ed09a3293"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"36b3363287c4c562ac64d045f517a0a9a9304eeb23abbe72487f857535d3164b"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"40747212f92e1d3e13c04960b8e18b9b6230b36cb044513f7bddc86df36dd968"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"80b87a176f9d18912e7d80e6bc2dc7f9e99963d6b8be571909a441caee9ac033"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"6def68b8bf56af5f0b30e9682c1124f90ca27980f783a874c091b5ed37b41378"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"aa5eb352d63e741831e4af77359f4e7b97827e1eb029d37740c258e7e952473f"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"56105914893d126b75c275246770abd4c45e80384d7a97216c89fd936d44dd2f"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1b182cd72a147175a8f44b33c6fefacfe72c64bca28bedaad18da4f945cde0c9"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"5ecf5d36361f89b7a9cddbf813bfffdb89f6576d9d884fd88792ff0a7d559c60"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"088960c4d5ad90ac7671b450f5f64a4fbef3be455d790f13b611a5e5aa8b975d"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"1064ac77c6635236db8ec4b6170a483e726fa1fba02c33fae9f2dc851eef8a5f"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"c51c693b1c24321b660cf0c3de12ccfe57f36d38d61105a382640cbf32684238"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-continuation 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"34cd32b787e21dafe3cd5ccdfd7f9a125fefff0e4d9da82c90cf52d3a3c0f486"}},{"message":{"text":"Jetty is vulnerable to temporary directory Hijacking via a race condition. If code is executed from this temporary directory it can lead to local privilege escalation."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27216 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"141324303eea1a6351885186fdb780be541c0d3b5f98c5888b3727fc64c0ad48"}},{"message":{"text":"The HTTP/2 protocol contains a flaw related to the stream multiplexing feature that can allow for excessive resource consumption on servers operating implementations of the HTTP/2 protocol. \n\nThe HTTP/2 protocol allows clients to signal to a server to cancel a previously opened stream by sending an `RST_STREAM` frame. Attackers can abuse this stream canceling ability by opening a large number of streams at once immediately followed by `RST_STREAM` frames. In most HTTP/2 implementations this bypasses concurrent open stream limits and causes servers to spend processing time first handling request frames and then performing stream tear downs. For the server, these operations can pile up whereas the attacker client paid minuscule bandwidth and processing costs.\n\n[Amazon](https://aws.amazon.com/security/security-bulletins/AWS-2023-011/), [Cloudflare](https://blog.cloudflare.com/technical-breakdown-http2-rapid-reset-ddos-attack/) and [Google](https://cloud.google.com/blog/products/identity-security/google-cloud-mitigated-largest-ddos-attack-peaking-above-398-million-rps/) have reported that this vulnerability has been exploited in the wild from August to October 2023.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-44487 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"450ad9d8d58a24608d5af9b573b6d427736e04b0795bb69fa17c2221e0dbd315"}},{"message":{"text":"Eclipse Jetty contains a vulnerability in its multipart request parsing mechanism that can lead to an out-of-memory error due to insufficient limiting measures. An attacker can exploit this flaw by supplying a request containing a large multipart without a filename in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26048 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"b4e25272b36e906f22962585213fadaabbb1969da4f8090aafb2fa375dddd2c2"}},{"message":{"text":"Eclipse Jetty does not properly parse quoted values in cookies. This could allow an attacker to smuggle cookies within other cookies into the application. The attacker can also tamper with the cookie parsing mechanism and cause other unintended behavior."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-26049 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"33db2e61a55e5f46873277b4729aa539c4083d7c63873396ab5b7dc9cf44f227"}},{"message":{"text":"Jetty is vulnerable to information disclosure due to improper requested path verification. This allows crafted requests to access protected resources of the web application which, depending on the implementation, might reveal sensitive information."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28169 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"7ca2777e02b9d0324fbe25c41e0d1d5d6ea1843194f02a158da254bb26844c0f"}},{"message":{"text":"Eclipse Jetty is vulnerable to Denial-of-Service (DoS) via invalid TLS frames. An attacker could exploit this by sending a TLS frame with a size in excess of 17408 resulting in excessive resource consumption leading to a DoS condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-28165 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"2626ef48e5d3b38625ace46e825bd65ce2b40b37b2bbb331d43b261e7af3bd4b"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid HTTP/2 requests. An attacker could exploit this flaw to exhaust the HTTP/2 flow control window or TCP congest the connection. This will cause the relevant selector threads to be blocked and it will lead to a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2048 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"e7d788141c481f8b048e6d93241e8118fc140e7949c4b891e625c31968222405"}},{"message":{"text":"Eclipse Jetty contains a vulnerability that allows a remote attacker to inject data into other client's requests. This vulnerability only exists when GZIP request body inflation is enabled, and requests from different clients are multiplexed onto a single connection."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27218 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"253873b30c67155c06f0d2ea66611a9623d0e03ac9aa91946012b243b54d27a1"}},{"message":{"text":"Jetty is vulnerable to denial-of-service (DoS) due to the use of an exponential algorithm that can have excessive resource requirements. A remote attacker could cause a vulnerable server to become unresponsive by sending maliciously crafted HTTP requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2020-27223 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"6367f10c98d222ee4d1d488e8a0d308eb766d83ef3e6ebbdbd60d27809f9473d"}},{"message":{"text":"Eclipse Jetty is vulnerable to HTTP request smuggling due to the improper parsing of HTTP requests. An attacker could exploit this vulnerability by sending maliciously crafted HTTP requests to a vulnerable endpoint with multiple requests included inside the body by manipulating the `Content-Length` of the request. The smuggling of HTTP requests may allow for the bypass of security tools such as web application firewalls (WAFs) and intrusion detection systems (IDSs)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-40167 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"7c6dd98e8d69779af874199fe97ba87bb6cd83e4fb12d485b3d6da53820f90b2"}},{"message":{"text":"Eclipse Jetty is vulnerable to a denial-of-service (DoS) issue due to presence of a user input validation flaw in the HTTP/2 HPACK functionality that can lead to an integer overflow and allow HPACK headers to exceed their expected size limits.\n\nAn attacker could submit crafted HTTP messages that trigger the integer overflow flaw and cause large buffers to be allocated on the server, consuming memory resources in a manner that could cause the server to run out of memory."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36478 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"12dd593bc15e69fa2a0e9d1a7a38c6c64d35061e84908d661e1effbc47c334fb"}},{"message":{"text":"Eclipse Jetty does not correctly handle invalid authority segments of HTTP URIs. An authenticated attacker could exploit this flaw by passing an invalid URI that contains an improper authority with no host so that it is interpreted as one with a host."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2022-2047 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"f17247e3b89536f3643c8cb65563d779eda644ab284433b8335ad0b49488b42b"}},{"message":{"text":"Eclipse Jetty contains an improper authentication vulnerability. This could allow an authenticated attacker to bypass authentication after it has been rejected or revoked by the `LoginService` and make a request as if authenticated.\n\n**Note:** The vendor has stated that this issue impacts usages of the `jetty-openid` which have configured a nested `LoginService` and where that `LoginService` is capable of rejecting previously authenticated users."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-41900 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"ebac712248df745089eb126c1861275d41e4e04a05431150f512d61eea49f9a6"}},{"message":{"text":"Eclipse Jetty is vulnerable to insufficient session expiry. This may result in sessions used on a shared computer persisting for longer than intended."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2021-34428 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"9ad85d02574b36346524a7daaa704697a51f53235be686e44784e46ed942a5fb"}},{"message":{"text":"Eclipse Jetty contains an improper neutralization of quoting syntax issue within the CGI servlet. This could allow an authenticated attacker to send a request to the CGI Servlet for a binary with a space in its name in order to manipulate the command structure and execute incorrect commands."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"webgoat-lessons/xxe/pom.xml"},"region":{"startLine":27}}}],"ruleId":"CVE-2023-36479 jetty-http 9.4.24.v20191120: wiremock 2.8.0: org.eclipse.jetty","partialFingerprints":{"primaryLocationLineHash":"902232bbb51dc44ded31ca45a0c12c42ac44f3535a77a209955abb2c12c29c46"}},{"message":{"text":"Undertow is vulnerable to a remote file inclusion vulnerability. An attacker could potentially exploit this to cause remote code execution (RCE)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-1745 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"40219df250437af676147574fe5d90a06b170f058ddc2eb07dff4786dc1021bf"}},{"message":{"text":"Undertow is vulnerable to HTTP request smuggling due to a possible regression in the fix for `CVE-2020-10687` (`BDSA-2020-2102`). This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-20220 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"4b73e0b9fa34367824a2b5a970981728b97609a30f1f62728e32867cb2994f1f"}},{"message":{"text":"It was found that a previously known HTTP request smuggling issue (`CVE-2017-2666`) in Undertow was not fully fixed. It is still possible to abuse this vulnerability by including invalid characters in HTTP/1.x and [HTTP/2](https://en.wikipedia.org/wiki/HTTP/2) requests. This flaw can result in cache-poisoning, cross-site scripting (XSS) attacks and information disclosure."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10687 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"8f08953f27644c498498dbdbec114f1071124cd9731267ea6ee1bc75435abd1c"}},{"message":{"text":"Undertow contains a flaw with how certain calls are made over HTTP2. Invocation of an EJB can fail on the client side which will result in the invocation-timeout being hit. Successfully exploiting this can allow an attacker to trigger a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3859 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"1b0d500dac7e896f192eb1e64277a53308b1e19236ece49f95aa0ee6dc3c1fc7"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** It has been found that this vulnerability is an incomplete fix and a new CVE has been assigned **CVE-2022-1259**. This has been addressed by **BDSA-2022-2100**."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3629 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"8eca5a4ef27ae0580d9e88f05400caf21a2e2eec142253bf73600bbad17bef07"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the flawed implementation of flow controls during HTTP/2 exchanges. A remote attacker could impact the performance of a vulnerable server, or potentially cause it to crash, by sending maliciously crafted network traffic to that server.\n\n**Note:** This vulnerability is a result of an incomplete fix for **CVE-2021-3629** (**BDSA-2021-3463**)"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-1259 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"e268c90d0cc816ae0ca756c00b6a61e3f46a1709aeeff15630095dd6184a9bc8"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to a buffer overflow in the HTTPS functionality. A remote attacker could crash a victim's instance of the application by connecting to a HTTP2 port."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2019-14888 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"66418662649237b2b9d3793f494698277c23a04b537e42c1727d8d493ae06b5a"}},{"message":{"text":"Undertow contains a flaw with its `HTTP2SourceChannel` implementation where in some circumstances it fails to write a final frame. Successfully exploiting this could allow an attacker to cause a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3597 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"5dcbc4d95a768663dbea45492a357e1ecd8cd1a6d1bd3187b10ae5a0570746b2"}},{"message":{"text":"Undertow is vulnerable to improperly normalizing servlet paths. A remote attacker may be able to leverage this to bypass specific URL-based security checks."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-1757 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"159a7ca7966bf03ca28348a57bdf6c3cb0fb672e1244403cfabf31abfc1cf893"}},{"message":{"text":"Undertow contains a server identity spoofing vulnerability. This issue exists due to the Undertow client not checking the server identity presented by the server certificate in HTTPS connections, leading it to accept certificates with arbitrary subjects."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-4041 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"7bf1b26d63b53aef448e75201dee8a28a7dd70e371f20a2be392fd5ad2a295bc"}},{"message":{"text":"Undertow is vulnerable to an infinite loop condition. A remote unauthenticated attacker could exploit this vulnerability in order to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-1108 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"165b698dc59dac6e2f81adfbb56e6ab8f4a0eda922e906ead195079dbaca4643"}},{"message":{"text":"undertow is vulnerable to denial-of-service (DoS) due to improper processing of incoming WebSocket PONG messages. An attacker could exploit this vulnerability by supplying a system with maliciously crafted requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-3690 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"b9fe171bb71ff5f5af71fbd9ddfd91391ac8adea7998d99a88c341721d08f2ba"}},{"message":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An unauthenticated attacker could exploit this by manipulating Servlet annotations to exhaust system resources and cause a system crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-3223 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"63264e6fa9dec6a638407bff8f05b717eec1da4ad9ce39ea9311320ead9283be"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper management of system memory resources. A remote attacker could cause a vulnerable server to crash by sending maliciously crafted web requests to that server."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-10705 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"721f5cea2962e3514d6b02064a055fe88cd258310a6b73f324fd52eb4fc519d3"}},{"message":{"text":"Undertow is vulnerable to denial-of-service (DoS) due to the improper handling of certain characters. An attacker could exploit this vulnerability via a maliciously crafted request in order to trigger a denial-of-service (DoS) condition."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-27782 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"0000e4abad7b41cd0273d766805ad1194540616df47baf5cbbf8267c45c29687"}},{"message":{"text":"Undertow is vulnerable to an uncaught exception flaw. A remote attacker could leverage this to cause a denial-of-service (DoS)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-2053 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"09c3ac5b695c7e7f3264560a7d684955f1b9d73acacf084c79078df3cc5ed12b"}},{"message":{"text":"Undertow contains a denial-of-service (DoS) vulnerability. An authenticated attacker can exploit this via EJB invocations to exhaust system resources and cause a system crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-2764 undertow-core 2.0.28.Final: spring-boot-starter-undertow 2.2.2.RELEASE: io.undertow","partialFingerprints":{"primaryLocationLineHash":"627de531e009329cb7322d8d37ff0d2b927ef62ddea49102a5f02d1ebd47c319"}},{"message":{"text":"Spring Framework is vulnerable to a flaw in the access restrictions to the security sensitive `ClassLoader` property. The restrictions can be bypassed through alternative paths available with Java9 and later. An attacker can leverage this vulnerability to cause remote code execution (RCE).\n\n**Note** this issue exists because the restrictions that were introduced to prevent exploitation of BDSA-2010-0001 (CVE-2010-1622) can be bypassed on platforms where Java9 and later are in use.\n\nThis vulnerability is listed as exploitable by the Cybersecurity \u0026 Infrastructure Security Agency in their [Known Exploited Vulnerabilities Catalog](https://www.cisa.gov/known-exploited-vulnerabilities-catalog)."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22965 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"0d20954462cfe0120c86966d66fbbfcea70921db26967427d555df3a16b7e3b8"}},{"message":{"text":"Spring Framework is vulnerable to a reflected file download (RFD) attack via improper input validation on filenames in a `Content-Disposition` header."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5398 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"ef3946c41752a64b318b05cbb1e445e2649ea7b57cdd18a391d5cd3f1fdbd245"}},{"message":{"text":"Spring Framework is vulnerable to cross-site request forgery (CSRF) attacks via CORS preflight requests which target Spring MVC or Spring WebFlux endpoints."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5397 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"d94bbc35ad9c228eab36c91905f13684f7c87cf9622f03749f3a5ac695440737"}},{"message":{"text":"Software systems using Spring Framework may be vulnerable to unsafe deserialization if they employ unsafe use of certain provided deserialization functionality. A remote attacker could potentially execute arbitrary code on a vulnerable endpoint by passing a maliciously crafted serialized object to that endpoint.\n\n**Note**: This issue only affects software that has been written to leverage specific deserialization functionality provided by the Spring Framework without sanitization."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"BDSA-2022-0847 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a5b3139bd3b10bc763acc6aa7e5db8082060530763d028611f55770a34aeceae"}},{"message":{"text":"Spring-Framework's spring-expression is vulnerable to a denial-of-service (DoS) condition. This allows an attacker to use crafted input to cause the spring-expression process to crash due to an exception."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22950 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"4ecd50e804f7d153a90dd2f35e96d58fc8712b6ed24a13736cb2e8a196943be8"}},{"message":{"text":"Spring Framework is vulnerable to privilege escalation due to the creation of unsafe temporary directories by the WebFlux component. A local authenticated attacker could modify arbitrary files via maliciously crafted `multipart` requests. \n\nThis vulnerability does not affect Spring MVC applications, or applications that do not handle `multipart` file requests."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22118 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"6c4179b5f3075545f13d9e7bbad3145efe571542f374786e60bbb19ce155a4ad"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: a follow-up to this issue was disclosed as **CVE-2021-22060** (**BDSA-2021-3236**), with further fixed releases that protect against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22096 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"31b813a06abd13b26b0e147f8c1ebfdc726a8c83141ca9ddf0abf71b94dcd9c5"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper handling of the STOMP protocol for websockets. A remote authenticated attacker could leverage this issue in order to cause a server to crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22971 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"e98d6e3126c47eb077265a288c960a047c98859bc23837db6b7003ff92964ead"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20863 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9432112a96ca9acc0cf2d42e60f63c6f88d166dccd5d07d074a387cda1acda3a"}},{"message":{"text":"Spring Framework is vulnerable to log file injection due to the insufficient validation of user input in an undisclosed component. An attacker could leverage this issue in order to add arbitrary entries to a log file which could impact both the integrity issues and performance issues.\n\n**Note**: the vendor states this issue exists as a follow up to CVE-2021-22096 (BDSA-2022-0011) that protects against additional types of input and in more places of the Spring Framework codebase."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2021-22060 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"9687cd38644c439ec22d710033c186bb1d395adde563d632b113fd0e98b006c9"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) via specially crafted SpEL expressions. An attacker could exploit this issue by passing a crafted SpEL expression to the application which may result in a crash."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2023-20861 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a651f0d2872b19c6bed6da7f1446ee69fc7136c18e5e17689caafa223c1a5426"}},{"message":{"text":"It was discovered that Spring Framework was vulnerable to RFD protection bypass. In some instances, depending on the browser used, an attacker could bypass the RFD attack protections via the use of a `jsessionid` path parameter."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2020-5421 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"a58348b8d757b79940bc702552b48b324508ab7cf47c7f0c81df97182701082d"}},{"message":{"text":"Spring Framework is vulnerable to denial-of-service (DoS) due to the improper implementation of data binding functionality. A remote attacker could cause a vulnerable server to crash if that server provides file upload functionality."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22970 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"08876052655697af7c9dbaacee85bc0aa4e144a110d5f0fe3d751c96a8778db6"}},{"message":{"text":"Spring Framework is vulnerable to data binding protection bypass due to improper validation of specified disallowed fields in `DataBinders`. This could be leveraged by an attacker to bypass the suggested workaround to **CVE-2022-22965** (**BDSA-2022-0858**) if it is improperly implemented."},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"unknown file"},"region":{"startLine":1}}}],"ruleId":"CVE-2022-22968 spring-tx 5.2.2.RELEASE: spring-boot-starter-data-jpa 2.2.2.RELEASE: org.springframework","partialFingerprints":{"primaryLocationLineHash":"148cd2035089e1f38557e2502cd5d6e841a27fda4d49a739d809ad05a636f8a8"}}]}],"version":"2.1.0"}